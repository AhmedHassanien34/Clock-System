
STM32F446_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002788  08002788  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002788  08002788  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002788  08002788  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000004  08002794  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08002794  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ec3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009e3  00000000  00000000  00023ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  000248e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  00024ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016a9  00000000  00000000  00024df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ef0  00000000  00000000  000264a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000728f  00000000  00000000  0002a391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00031620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009bc  00000000  00000000  00031670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002704 	.word	0x08002704

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08002704 	.word	0x08002704

08000204 <DMA_Init>:

void(*DMA1_Callback[NUMBERS_OF_STREAMS][DMA_IT_FLAGS])(void) = { NULL };
void(*DMA2_Callback[NUMBERS_OF_STREAMS][DMA_IT_FLAGS])(void) = { NULL };

uint8_t DMA_Init(ST_DMA_config_t* DMA_config)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 800020c:	2301      	movs	r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]
	uint16_t wait_time_out = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	81bb      	strh	r3, [r7, #12]

	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (DMA_config->DMA_controller) * 0x400);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	029b      	lsls	r3, r3, #10
 800021a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800021e:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 8000222:	60bb      	str	r3, [r7, #8]

	/* clear all flags , reset some configs */
	if (DMA_config->DMA_controller == DMA1 || DMA_config->DMA_controller == DMA2)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d003      	beq.n	8000234 <DMA_Init+0x30>
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d112      	bne.n	800025a <DMA_Init+0x56>
	{
		/* clear flags */
		DMA_X->DMA_IFCR[0] = 0;
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
		DMA_X->DMA_IFCR[1] = 0;
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
		/* reset SFCR register */
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR = 0;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	789b      	ldrb	r3, [r3, #2]
 8000244:	4619      	mov	r1, r3
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	460b      	mov	r3, r1
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	440b      	add	r3, r1
 800024e:	00db      	lsls	r3, r3, #3
 8000250:	4413      	add	r3, r2
 8000252:	3324      	adds	r3, #36	; 0x24
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	e001      	b.n	800025e <DMA_Init+0x5a>
	}
	else
	{
		Local_u8_Error_State = DMA_SELECT_ERR;
 800025a:	2316      	movs	r3, #22
 800025c:	73fb      	strb	r3, [r7, #15]
	}

	/* disable the stream by clear EN , not allowd for config the stream when this bit is 1 */
	if (DMA_config->DMA_str_num < NUMBERS_OF_STREAMS)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	2b07      	cmp	r3, #7
 8000264:	d818      	bhi.n	8000298 <DMA_Init+0x94>
	{
		CLEAR_BIT(DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR, EN);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	789b      	ldrb	r3, [r3, #2]
 800026a:	4619      	mov	r1, r3
 800026c:	68ba      	ldr	r2, [r7, #8]
 800026e:	460b      	mov	r3, r1
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	440b      	add	r3, r1
 8000274:	00db      	lsls	r3, r3, #3
 8000276:	4413      	add	r3, r2
 8000278:	3310      	adds	r3, #16
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	7892      	ldrb	r2, [r2, #2]
 8000280:	4610      	mov	r0, r2
 8000282:	f023 0201 	bic.w	r2, r3, #1
 8000286:	68b9      	ldr	r1, [r7, #8]
 8000288:	4603      	mov	r3, r0
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	4403      	add	r3, r0
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	440b      	add	r3, r1
 8000292:	3310      	adds	r3, #16
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	e00c      	b.n	80002b2 <DMA_Init+0xae>
	}
	else
	{
		Local_u8_Error_State = DMA_NUM_STREAM_ERR;
 8000298:	2317      	movs	r3, #23
 800029a:	73fb      	strb	r3, [r7, #15]
	}

	/*  Writing this bit to 0 is not immediately effective , wait for the EN bit to be cleared
	**  before starting any stream configuration ********************************************/
	while (CLEAR_BIT(DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR, EN) == 1)
 800029c:	e009      	b.n	80002b2 <DMA_Init+0xae>
	{
		if (wait_time_out >= STREAM_EN_TIMEOUT)
 800029e:	89bb      	ldrh	r3, [r7, #12]
 80002a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002a4:	d302      	bcc.n	80002ac <DMA_Init+0xa8>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 80002a6:	2304      	movs	r3, #4
 80002a8:	73fb      	strb	r3, [r7, #15]
			break;
 80002aa:	e01c      	b.n	80002e6 <DMA_Init+0xe2>
		}

		wait_time_out++;
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	81bb      	strh	r3, [r7, #12]
	while (CLEAR_BIT(DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR, EN) == 1)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	789b      	ldrb	r3, [r3, #2]
 80002b6:	4619      	mov	r1, r3
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	460b      	mov	r3, r1
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	440b      	add	r3, r1
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	4413      	add	r3, r2
 80002c4:	3310      	adds	r3, #16
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7892      	ldrb	r2, [r2, #2]
 80002cc:	4610      	mov	r0, r2
 80002ce:	f023 0201 	bic.w	r2, r3, #1
 80002d2:	68b9      	ldr	r1, [r7, #8]
 80002d4:	4603      	mov	r3, r0
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	4403      	add	r3, r0
 80002da:	00db      	lsls	r3, r3, #3
 80002dc:	440b      	add	r3, r1
 80002de:	3310      	adds	r3, #16
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	d0db      	beq.n	800029e <DMA_Init+0x9a>
	}

	/* set DMA channel */
	if ((DMA_config->DMA_ch_num >= CHANNEL0) && (DMA_config->DMA_ch_num <= CHANNEL7))
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	785b      	ldrb	r3, [r3, #1]
 80002ea:	2b07      	cmp	r3, #7
 80002ec:	d834      	bhi.n	8000358 <DMA_Init+0x154>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_CHANNEL_MASK;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	789b      	ldrb	r3, [r3, #2]
 80002f2:	4619      	mov	r1, r3
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	460b      	mov	r3, r1
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	440b      	add	r3, r1
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	4413      	add	r3, r2
 8000300:	3310      	adds	r3, #16
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	7892      	ldrb	r2, [r2, #2]
 8000308:	4610      	mov	r0, r2
 800030a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800030e:	68b9      	ldr	r1, [r7, #8]
 8000310:	4603      	mov	r3, r0
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	4403      	add	r3, r0
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	440b      	add	r3, r1
 800031a:	3310      	adds	r3, #16
 800031c:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_ch_num << CHSEL;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	789b      	ldrb	r3, [r3, #2]
 8000322:	4619      	mov	r1, r3
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	460b      	mov	r3, r1
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	440b      	add	r3, r1
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	4413      	add	r3, r2
 8000330:	3310      	adds	r3, #16
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	7852      	ldrb	r2, [r2, #1]
 8000338:	0652      	lsls	r2, r2, #25
 800033a:	4611      	mov	r1, r2
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	7892      	ldrb	r2, [r2, #2]
 8000340:	4610      	mov	r0, r2
 8000342:	ea43 0201 	orr.w	r2, r3, r1
 8000346:	68b9      	ldr	r1, [r7, #8]
 8000348:	4603      	mov	r3, r0
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	4403      	add	r3, r0
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	440b      	add	r3, r1
 8000352:	3310      	adds	r3, #16
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	e001      	b.n	800035c <DMA_Init+0x158>
	}
	else
	{
		Local_u8_Error_State = DMA_CHANNEL_ERR;
 8000358:	231b      	movs	r3, #27
 800035a:	73fb      	strb	r3, [r7, #15]
	}

	/* set stream priority */
	if (DMA_config->DMA_str_priority >= LOW_PRIORITY && DMA_config->DMA_str_priority <= VERY_HIGH_PRIORITY)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	7a1b      	ldrb	r3, [r3, #8]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d834      	bhi.n	80003ce <DMA_Init+0x1ca>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_PL_MASK;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	4619      	mov	r1, r3
 800036a:	68ba      	ldr	r2, [r7, #8]
 800036c:	460b      	mov	r3, r1
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	440b      	add	r3, r1
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	4413      	add	r3, r2
 8000376:	3310      	adds	r3, #16
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	7892      	ldrb	r2, [r2, #2]
 800037e:	4610      	mov	r0, r2
 8000380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000384:	68b9      	ldr	r1, [r7, #8]
 8000386:	4603      	mov	r3, r0
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4403      	add	r3, r0
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	440b      	add	r3, r1
 8000390:	3310      	adds	r3, #16
 8000392:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_str_priority << PL;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	789b      	ldrb	r3, [r3, #2]
 8000398:	4619      	mov	r1, r3
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	460b      	mov	r3, r1
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	440b      	add	r3, r1
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	3310      	adds	r3, #16
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7a12      	ldrb	r2, [r2, #8]
 80003ae:	0412      	lsls	r2, r2, #16
 80003b0:	4611      	mov	r1, r2
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	7892      	ldrb	r2, [r2, #2]
 80003b6:	4610      	mov	r0, r2
 80003b8:	ea43 0201 	orr.w	r2, r3, r1
 80003bc:	68b9      	ldr	r1, [r7, #8]
 80003be:	4603      	mov	r3, r0
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4403      	add	r3, r0
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	440b      	add	r3, r1
 80003c8:	3310      	adds	r3, #16
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	e001      	b.n	80003d2 <DMA_Init+0x1ce>
	}
	else
	{
		Local_u8_Error_State = DMA_STREAM_PRIORITY_ERR;
 80003ce:	2319      	movs	r3, #25
 80003d0:	73fb      	strb	r3, [r7, #15]
	}

	/* set DMA mode  direct & fifo */

	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR &= DMA_MODE_MASK;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	789b      	ldrb	r3, [r3, #2]
 80003d6:	4619      	mov	r1, r3
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	460b      	mov	r3, r1
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	440b      	add	r3, r1
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	4413      	add	r3, r2
 80003e4:	3324      	adds	r3, #36	; 0x24
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7892      	ldrb	r2, [r2, #2]
 80003ec:	4610      	mov	r0, r2
 80003ee:	f023 0204 	bic.w	r2, r3, #4
 80003f2:	68b9      	ldr	r1, [r7, #8]
 80003f4:	4603      	mov	r3, r0
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	4403      	add	r3, r0
 80003fa:	00db      	lsls	r3, r3, #3
 80003fc:	440b      	add	r3, r1
 80003fe:	3324      	adds	r3, #36	; 0x24
 8000400:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR |= DMA_config->DMA_mode << DMDIS;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	4619      	mov	r1, r3
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	460b      	mov	r3, r1
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	440b      	add	r3, r1
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	4413      	add	r3, r2
 8000414:	3324      	adds	r3, #36	; 0x24
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7a52      	ldrb	r2, [r2, #9]
 800041c:	0092      	lsls	r2, r2, #2
 800041e:	4611      	mov	r1, r2
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7892      	ldrb	r2, [r2, #2]
 8000424:	4610      	mov	r0, r2
 8000426:	ea43 0201 	orr.w	r2, r3, r1
 800042a:	68b9      	ldr	r1, [r7, #8]
 800042c:	4603      	mov	r3, r0
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	4403      	add	r3, r0
 8000432:	00db      	lsls	r3, r3, #3
 8000434:	440b      	add	r3, r1
 8000436:	3324      	adds	r3, #36	; 0x24
 8000438:	601a      	str	r2, [r3, #0]

	if (DMA_config->DMA_mode == FIFO_MODE)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	7a5b      	ldrb	r3, [r3, #9]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d139      	bne.n	80004b6 <DMA_Init+0x2b2>
	{
		if (DMA_config->DMA_fifo_select >= QUARTER_FULL_FIFO && DMA_config->DMA_fifo_select <= FULL_FIFO)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7adb      	ldrb	r3, [r3, #11]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d833      	bhi.n	80004b2 <DMA_Init+0x2ae>
		{
			DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR &= DMA_FIFO_THRESHOLD_MASK;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	4619      	mov	r1, r3
 8000450:	68ba      	ldr	r2, [r7, #8]
 8000452:	460b      	mov	r3, r1
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	440b      	add	r3, r1
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	4413      	add	r3, r2
 800045c:	3324      	adds	r3, #36	; 0x24
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7892      	ldrb	r2, [r2, #2]
 8000464:	4610      	mov	r0, r2
 8000466:	f023 0203 	bic.w	r2, r3, #3
 800046a:	68b9      	ldr	r1, [r7, #8]
 800046c:	4603      	mov	r3, r0
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4403      	add	r3, r0
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	440b      	add	r3, r1
 8000476:	3324      	adds	r3, #36	; 0x24
 8000478:	601a      	str	r2, [r3, #0]
			DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR |= DMA_config->DMA_fifo_select << FTH;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	789b      	ldrb	r3, [r3, #2]
 800047e:	4619      	mov	r1, r3
 8000480:	68ba      	ldr	r2, [r7, #8]
 8000482:	460b      	mov	r3, r1
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	440b      	add	r3, r1
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	4413      	add	r3, r2
 800048c:	3324      	adds	r3, #36	; 0x24
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7ad2      	ldrb	r2, [r2, #11]
 8000494:	4611      	mov	r1, r2
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7892      	ldrb	r2, [r2, #2]
 800049a:	4610      	mov	r0, r2
 800049c:	ea43 0201 	orr.w	r2, r3, r1
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	4603      	mov	r3, r0
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4403      	add	r3, r0
 80004a8:	00db      	lsls	r3, r3, #3
 80004aa:	440b      	add	r3, r1
 80004ac:	3324      	adds	r3, #36	; 0x24
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	e001      	b.n	80004b6 <DMA_Init+0x2b2>
		}
		else
		{
			Local_u8_Error_State = DMA_FIFO_THRESHOLD_ERR;
 80004b2:	231a      	movs	r3, #26
 80004b4:	73fb      	strb	r3, [r7, #15]
		}
	}

	/* set DMA Direction */
	if (DMA_config->DMA_dir == P2M || DMA_config->DMA_dir == M2P || DMA_config->DMA_dir == M2M)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	78db      	ldrb	r3, [r3, #3]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d007      	beq.n	80004ce <DMA_Init+0x2ca>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	78db      	ldrb	r3, [r3, #3]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d003      	beq.n	80004ce <DMA_Init+0x2ca>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	78db      	ldrb	r3, [r3, #3]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d134      	bne.n	8000538 <DMA_Init+0x334>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_DIR_MASK;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	789b      	ldrb	r3, [r3, #2]
 80004d2:	4619      	mov	r1, r3
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	460b      	mov	r3, r1
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	440b      	add	r3, r1
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	4413      	add	r3, r2
 80004e0:	3310      	adds	r3, #16
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7892      	ldrb	r2, [r2, #2]
 80004e8:	4610      	mov	r0, r2
 80004ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	4603      	mov	r3, r0
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4403      	add	r3, r0
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	440b      	add	r3, r1
 80004fa:	3310      	adds	r3, #16
 80004fc:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_dir << DIR;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	4619      	mov	r1, r3
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	460b      	mov	r3, r1
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	440b      	add	r3, r1
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	4413      	add	r3, r2
 8000510:	3310      	adds	r3, #16
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	78d2      	ldrb	r2, [r2, #3]
 8000518:	0192      	lsls	r2, r2, #6
 800051a:	4611      	mov	r1, r2
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7892      	ldrb	r2, [r2, #2]
 8000520:	4610      	mov	r0, r2
 8000522:	ea43 0201 	orr.w	r2, r3, r1
 8000526:	68b9      	ldr	r1, [r7, #8]
 8000528:	4603      	mov	r3, r0
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	4403      	add	r3, r0
 800052e:	00db      	lsls	r3, r3, #3
 8000530:	440b      	add	r3, r1
 8000532:	3310      	adds	r3, #16
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	e001      	b.n	800053c <DMA_Init+0x338>
	}
	else
	{
		Local_u8_Error_State = DMA_DIR_ERR;
 8000538:	231c      	movs	r3, #28
 800053a:	73fb      	strb	r3, [r7, #15]
	}

	/* set memmory increment */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_MEM_INC_MASK;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	4619      	mov	r1, r3
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	460b      	mov	r3, r1
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	440b      	add	r3, r1
 800054a:	00db      	lsls	r3, r3, #3
 800054c:	4413      	add	r3, r2
 800054e:	3310      	adds	r3, #16
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7892      	ldrb	r2, [r2, #2]
 8000556:	4610      	mov	r0, r2
 8000558:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800055c:	68b9      	ldr	r1, [r7, #8]
 800055e:	4603      	mov	r3, r0
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4403      	add	r3, r0
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	440b      	add	r3, r1
 8000568:	3310      	adds	r3, #16
 800056a:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_mem_inc << MINC;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	789b      	ldrb	r3, [r3, #2]
 8000570:	4619      	mov	r1, r3
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	460b      	mov	r3, r1
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	440b      	add	r3, r1
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	4413      	add	r3, r2
 800057e:	3310      	adds	r3, #16
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7992      	ldrb	r2, [r2, #6]
 8000586:	0292      	lsls	r2, r2, #10
 8000588:	4611      	mov	r1, r2
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7892      	ldrb	r2, [r2, #2]
 800058e:	4610      	mov	r0, r2
 8000590:	ea43 0201 	orr.w	r2, r3, r1
 8000594:	68b9      	ldr	r1, [r7, #8]
 8000596:	4603      	mov	r3, r0
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	4403      	add	r3, r0
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	440b      	add	r3, r1
 80005a0:	3310      	adds	r3, #16
 80005a2:	601a      	str	r2, [r3, #0]

	/* set peripheral increment */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_PERIPH_INC_MASK;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	4619      	mov	r1, r3
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	460b      	mov	r3, r1
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	440b      	add	r3, r1
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	4413      	add	r3, r2
 80005b6:	3310      	adds	r3, #16
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7892      	ldrb	r2, [r2, #2]
 80005be:	4610      	mov	r0, r2
 80005c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	4603      	mov	r3, r0
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4403      	add	r3, r0
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	440b      	add	r3, r1
 80005d0:	3310      	adds	r3, #16
 80005d2:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_p_inc << PINC;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	789b      	ldrb	r3, [r3, #2]
 80005d8:	4619      	mov	r1, r3
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	460b      	mov	r3, r1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	440b      	add	r3, r1
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	4413      	add	r3, r2
 80005e6:	3310      	adds	r3, #16
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	79d2      	ldrb	r2, [r2, #7]
 80005ee:	0252      	lsls	r2, r2, #9
 80005f0:	4611      	mov	r1, r2
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7892      	ldrb	r2, [r2, #2]
 80005f6:	4610      	mov	r0, r2
 80005f8:	ea43 0201 	orr.w	r2, r3, r1
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	4603      	mov	r3, r0
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4403      	add	r3, r0
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	440b      	add	r3, r1
 8000608:	3310      	adds	r3, #16
 800060a:	601a      	str	r2, [r3, #0]


	/* set memmory allignment */
	if (DMA_config->DMA_mem_allign == BYTE || DMA_config->DMA_mem_allign == HALF_WORD || DMA_config->DMA_mem_allign == WORD)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d007      	beq.n	8000624 <DMA_Init+0x420>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d003      	beq.n	8000624 <DMA_Init+0x420>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d134      	bne.n	800068e <DMA_Init+0x48a>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_MEM_SIZE_MASK;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	4619      	mov	r1, r3
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	460b      	mov	r3, r1
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	440b      	add	r3, r1
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4413      	add	r3, r2
 8000636:	3310      	adds	r3, #16
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7892      	ldrb	r2, [r2, #2]
 800063e:	4610      	mov	r0, r2
 8000640:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	4603      	mov	r3, r0
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4403      	add	r3, r0
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	440b      	add	r3, r1
 8000650:	3310      	adds	r3, #16
 8000652:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_mem_allign << MSIZE;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	4619      	mov	r1, r3
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	460b      	mov	r3, r1
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	440b      	add	r3, r1
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4413      	add	r3, r2
 8000666:	3310      	adds	r3, #16
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	7912      	ldrb	r2, [r2, #4]
 800066e:	0352      	lsls	r2, r2, #13
 8000670:	4611      	mov	r1, r2
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	7892      	ldrb	r2, [r2, #2]
 8000676:	4610      	mov	r0, r2
 8000678:	ea43 0201 	orr.w	r2, r3, r1
 800067c:	68b9      	ldr	r1, [r7, #8]
 800067e:	4603      	mov	r3, r0
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4403      	add	r3, r0
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	440b      	add	r3, r1
 8000688:	3310      	adds	r3, #16
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e001      	b.n	8000692 <DMA_Init+0x48e>
	}
	else
	{
		Local_u8_Error_State = DMA_MEM_ALLIGN_ERR;
 800068e:	231d      	movs	r3, #29
 8000690:	73fb      	strb	r3, [r7, #15]
	}

	/* set peripheral allignment */
	if (DMA_config->DMA_mem_allign == BYTE || DMA_config->DMA_mem_allign == HALF_WORD || DMA_config->DMA_mem_allign == WORD)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d007      	beq.n	80006aa <DMA_Init+0x4a6>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d003      	beq.n	80006aa <DMA_Init+0x4a6>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d134      	bne.n	8000714 <DMA_Init+0x510>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_PERIPH_SIZE_MASK;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	789b      	ldrb	r3, [r3, #2]
 80006ae:	4619      	mov	r1, r3
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	460b      	mov	r3, r1
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	440b      	add	r3, r1
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	3310      	adds	r3, #16
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	7892      	ldrb	r2, [r2, #2]
 80006c4:	4610      	mov	r0, r2
 80006c6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80006ca:	68b9      	ldr	r1, [r7, #8]
 80006cc:	4603      	mov	r3, r0
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4403      	add	r3, r0
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	440b      	add	r3, r1
 80006d6:	3310      	adds	r3, #16
 80006d8:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_p_allign << PSIZE;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	789b      	ldrb	r3, [r3, #2]
 80006de:	4619      	mov	r1, r3
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	460b      	mov	r3, r1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	440b      	add	r3, r1
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	4413      	add	r3, r2
 80006ec:	3310      	adds	r3, #16
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	7952      	ldrb	r2, [r2, #5]
 80006f4:	02d2      	lsls	r2, r2, #11
 80006f6:	4611      	mov	r1, r2
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	7892      	ldrb	r2, [r2, #2]
 80006fc:	4610      	mov	r0, r2
 80006fe:	ea43 0201 	orr.w	r2, r3, r1
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	4603      	mov	r3, r0
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4403      	add	r3, r0
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	3310      	adds	r3, #16
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e001      	b.n	8000718 <DMA_Init+0x514>
	}
	else
	{
		Local_u8_Error_State = DMA_PERIPH_ALLIGN_ERR;
 8000714:	231e      	movs	r3, #30
 8000716:	73fb      	strb	r3, [r7, #15]
	}


	/* set enable & disable circular mode */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_CIRCULAR_MODE_MASK;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	4619      	mov	r1, r3
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	460b      	mov	r3, r1
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	440b      	add	r3, r1
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4413      	add	r3, r2
 800072a:	3310      	adds	r3, #16
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	7892      	ldrb	r2, [r2, #2]
 8000732:	4610      	mov	r0, r2
 8000734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000738:	68b9      	ldr	r1, [r7, #8]
 800073a:	4603      	mov	r3, r0
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4403      	add	r3, r0
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3310      	adds	r3, #16
 8000746:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_Circular_mode << CIRC;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	4619      	mov	r1, r3
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	4413      	add	r3, r2
 800075a:	3310      	adds	r3, #16
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	7a92      	ldrb	r2, [r2, #10]
 8000762:	0212      	lsls	r2, r2, #8
 8000764:	4611      	mov	r1, r2
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7892      	ldrb	r2, [r2, #2]
 800076a:	4610      	mov	r0, r2
 800076c:	ea43 0201 	orr.w	r2, r3, r1
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	4603      	mov	r3, r0
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4403      	add	r3, r0
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	440b      	add	r3, r1
 800077c:	3310      	adds	r3, #16
 800077e:	601a      	str	r2, [r3, #0]

	/* enable & disable interrupts */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_IT_TYPES_MASK;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	4619      	mov	r1, r3
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	460b      	mov	r3, r1
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	440b      	add	r3, r1
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4413      	add	r3, r2
 8000792:	3310      	adds	r3, #16
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	7892      	ldrb	r2, [r2, #2]
 800079a:	4610      	mov	r0, r2
 800079c:	f023 021e 	bic.w	r2, r3, #30
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	4603      	mov	r3, r0
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4403      	add	r3, r0
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	440b      	add	r3, r1
 80007ac:	3310      	adds	r3, #16
 80007ae:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= (DMA_config->DMA_IT_State.Direct_Mode_Error_IT << DMEIE) | (DMA_config->DMA_IT_State.Transfer_Error_IT << TEIE) | (DMA_config->DMA_IT_State.Half_Transfer_IT << HTIE) | (DMA_config->DMA_IT_State.Transfer_Complete_IT << TCIE);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	789b      	ldrb	r3, [r3, #2]
 80007b4:	4619      	mov	r1, r3
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	460b      	mov	r3, r1
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	440b      	add	r3, r1
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	3310      	adds	r3, #16
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	7c12      	ldrb	r2, [r2, #16]
 80007ca:	0051      	lsls	r1, r2, #1
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	7b92      	ldrb	r2, [r2, #14]
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	4311      	orrs	r1, r2
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7b52      	ldrb	r2, [r2, #13]
 80007d8:	00d2      	lsls	r2, r2, #3
 80007da:	4311      	orrs	r1, r2
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7b12      	ldrb	r2, [r2, #12]
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	430a      	orrs	r2, r1
 80007e4:	4611      	mov	r1, r2
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	7892      	ldrb	r2, [r2, #2]
 80007ea:	4610      	mov	r0, r2
 80007ec:	ea43 0201 	orr.w	r2, r3, r1
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	4603      	mov	r3, r0
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4403      	add	r3, r0
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	440b      	add	r3, r1
 80007fc:	3310      	adds	r3, #16
 80007fe:	601a      	str	r2, [r3, #0]




	return Local_u8_Error_State;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <DMA_Set_Callback>:

	return Local_u8_Error_State;
}

uint8_t DMA_Set_Callback(ST_DMA_config_t* DMA_config, EN_DMA_IT_Type_t DMA_IT_type)
{
 8000810:	b490      	push	{r4, r7}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	uint8_t Local_u8_Error_State = OK;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]

	if (DMA_config->DMA_CallBackFun != NULL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3314      	adds	r3, #20
 8000824:	2b00      	cmp	r3, #0
 8000826:	d02e      	beq.n	8000886 <DMA_Set_Callback+0x76>
	{
		if (DMA_config->DMA_controller == DMA1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d111      	bne.n	8000854 <DMA_Set_Callback+0x44>
		{
			DMA1_Callback[DMA_config->DMA_str_num][DMA_IT_type] = DMA_config->DMA_CallBackFun[DMA_IT_type];
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7892      	ldrb	r2, [r2, #2]
 8000836:	4614      	mov	r4, r2
 8000838:	78f9      	ldrb	r1, [r7, #3]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	3304      	adds	r3, #4
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <DMA_Set_Callback+0x88>)
 8000846:	4623      	mov	r3, r4
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4423      	add	r3, r4
 800084c:	440b      	add	r3, r1
 800084e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8000852:	e01a      	b.n	800088a <DMA_Set_Callback+0x7a>
		}
		else if (DMA_config->DMA_controller == DMA2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d111      	bne.n	8000880 <DMA_Set_Callback+0x70>
		{
			DMA2_Callback[DMA_config->DMA_str_num][DMA_IT_type] = DMA_config->DMA_CallBackFun[DMA_IT_type];
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	7892      	ldrb	r2, [r2, #2]
 8000862:	4614      	mov	r4, r2
 8000864:	78f9      	ldrb	r1, [r7, #3]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	3304      	adds	r3, #4
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	480a      	ldr	r0, [pc, #40]	; (800089c <DMA_Set_Callback+0x8c>)
 8000872:	4623      	mov	r3, r4
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4423      	add	r3, r4
 8000878:	440b      	add	r3, r1
 800087a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800087e:	e004      	b.n	800088a <DMA_Set_Callback+0x7a>
		}
		else
		{
			Local_u8_Error_State = DMA_SELECT_ERR;
 8000880:	2316      	movs	r3, #22
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e001      	b.n	800088a <DMA_Set_Callback+0x7a>
		}

	}
	else
	{
		Local_u8_Error_State = NULL_PTR_ERR;
 8000886:	2303      	movs	r3, #3
 8000888:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bc90      	pop	{r4, r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000020 	.word	0x20000020
 800089c:	200000c0 	.word	0x200000c0

080008a0 <DMA_Get_Flags_State>:

static uint8_t DMA_Get_Flags_State(EN_DMA_Controller_t DMA_type, EN_DMA_Stream_t stram_num, ST_DMA_IT_FLAGS_State_t* Flags_state)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	603a      	str	r2, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	460b      	mov	r3, r1
 80008ae:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8_Error_State = OK;
 80008b0:	2301      	movs	r3, #1
 80008b2:	75fb      	strb	r3, [r7, #23]

	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (DMA_type) * 0x400);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008bc:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 80008c0:	613b      	str	r3, [r7, #16]

	uint8_t loc_stream_num = stram_num % 4;
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	73fb      	strb	r3, [r7, #15]
	if ((loc_stream_num == 0) || (loc_stream_num == 1))
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d003      	beq.n	80008d8 <DMA_Get_Flags_State+0x38>
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	f040 80fe 	bne.w	8000ad4 <DMA_Get_Flags_State+0x234>
	{
		Flags_state->FIFO_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (FEIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SFCR, FEIE);
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	461a      	mov	r2, r3
 80008f2:	2301      	movs	r3, #1
 80008f4:	4093      	lsls	r3, r2
 80008f6:	4019      	ands	r1, r3
 80008f8:	7bfa      	ldrb	r2, [r7, #15]
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa21 f303 	lsr.w	r3, r1, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00e      	beq.n	8000928 <DMA_Get_Flags_State+0x88>
 800090a:	79ba      	ldrb	r2, [r7, #6]
 800090c:	6939      	ldr	r1, [r7, #16]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	3324      	adds	r3, #36	; 0x24
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <DMA_Get_Flags_State+0x88>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <DMA_Get_Flags_State+0x8a>
 8000928:	2300      	movs	r3, #0
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	b2d9      	uxtb	r1, r3
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	7813      	ldrb	r3, [r2, #0]
 8000934:	f361 03c3 	bfi	r3, r1, #3, #1
 8000938:	7013      	strb	r3, [r2, #0]
		Flags_state->Direct_Mode_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (DMEIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, DMEIE);
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	3302      	adds	r3, #2
 8000954:	2201      	movs	r2, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	4019      	ands	r1, r3
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	3302      	adds	r3, #2
 8000968:	fa21 f303 	lsr.w	r3, r1, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00e      	beq.n	800098e <DMA_Get_Flags_State+0xee>
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	6939      	ldr	r1, [r7, #16]
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	440b      	add	r3, r1
 800097e:	3310      	adds	r3, #16
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <DMA_Get_Flags_State+0xee>
 800098a:	2301      	movs	r3, #1
 800098c:	e000      	b.n	8000990 <DMA_Get_Flags_State+0xf0>
 800098e:	2300      	movs	r3, #0
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	b2d9      	uxtb	r1, r3
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	7813      	ldrb	r3, [r2, #0]
 800099a:	f361 1304 	bfi	r3, r1, #4, #1
 800099e:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TEIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TEIE);
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	3303      	adds	r3, #3
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	4019      	ands	r1, r3
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	3303      	adds	r3, #3
 80009ce:	fa21 f303 	lsr.w	r3, r1, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00e      	beq.n	80009f4 <DMA_Get_Flags_State+0x154>
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	6939      	ldr	r1, [r7, #16]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	3310      	adds	r3, #16
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <DMA_Get_Flags_State+0x154>
 80009f0:	2301      	movs	r3, #1
 80009f2:	e000      	b.n	80009f6 <DMA_Get_Flags_State+0x156>
 80009f4:	2300      	movs	r3, #0
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	b2d9      	uxtb	r1, r3
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	7813      	ldrb	r3, [r2, #0]
 8000a00:	f361 0382 	bfi	r3, r1, #2, #1
 8000a04:	7013      	strb	r3, [r2, #0]
		Flags_state->Half_Transfer_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (HTIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, HTIE);
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	3304      	adds	r3, #4
 8000a20:	2201      	movs	r2, #1
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	4019      	ands	r1, r3
 8000a28:	7bfa      	ldrb	r2, [r7, #15]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	3304      	adds	r3, #4
 8000a34:	fa21 f303 	lsr.w	r3, r1, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00e      	beq.n	8000a5a <DMA_Get_Flags_State+0x1ba>
 8000a3c:	79ba      	ldrb	r2, [r7, #6]
 8000a3e:	6939      	ldr	r1, [r7, #16]
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3310      	adds	r3, #16
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <DMA_Get_Flags_State+0x1ba>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <DMA_Get_Flags_State+0x1bc>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2d9      	uxtb	r1, r3
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	7813      	ldrb	r3, [r2, #0]
 8000a66:	f361 0341 	bfi	r3, r1, #1, #1
 8000a6a:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Complete_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TCIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TCIE);
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a7a:	7bfa      	ldrb	r2, [r7, #15]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	3305      	adds	r3, #5
 8000a86:	2201      	movs	r2, #1
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	4019      	ands	r1, r3
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	3305      	adds	r3, #5
 8000a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00e      	beq.n	8000ac0 <DMA_Get_Flags_State+0x220>
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	6939      	ldr	r1, [r7, #16]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	440b      	add	r3, r1
 8000ab0:	3310      	adds	r3, #16
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <DMA_Get_Flags_State+0x220>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <DMA_Get_Flags_State+0x222>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	b2d9      	uxtb	r1, r3
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	7813      	ldrb	r3, [r2, #0]
 8000acc:	f361 0300 	bfi	r3, r1, #0, #1
 8000ad0:	7013      	strb	r3, [r2, #0]
 8000ad2:	e109      	b.n	8000ce8 <DMA_Get_Flags_State+0x448>
	}
	else if (loc_stream_num == 2)
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	f040 80b0 	bne.w	8000c3c <DMA_Get_Flags_State+0x39c>
	{
		Flags_state->FIFO_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (FEIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SFCR, FEIE);
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00e      	beq.n	8000b10 <DMA_Get_Flags_State+0x270>
 8000af2:	79ba      	ldrb	r2, [r7, #6]
 8000af4:	6939      	ldr	r1, [r7, #16]
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	440b      	add	r3, r1
 8000b00:	3324      	adds	r3, #36	; 0x24
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <DMA_Get_Flags_State+0x270>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <DMA_Get_Flags_State+0x272>
 8000b10:	2300      	movs	r3, #0
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	b2d9      	uxtb	r1, r3
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	7813      	ldrb	r3, [r2, #0]
 8000b1c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b20:	7013      	strb	r3, [r2, #0]
		Flags_state->Direct_Mode_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (DMEIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, DMEIE);
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d00e      	beq.n	8000b56 <DMA_Get_Flags_State+0x2b6>
 8000b38:	79ba      	ldrb	r2, [r7, #6]
 8000b3a:	6939      	ldr	r1, [r7, #16]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	440b      	add	r3, r1
 8000b46:	3310      	adds	r3, #16
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <DMA_Get_Flags_State+0x2b6>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <DMA_Get_Flags_State+0x2b8>
 8000b56:	2300      	movs	r3, #0
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	b2d9      	uxtb	r1, r3
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	7813      	ldrb	r3, [r2, #0]
 8000b62:	f361 1304 	bfi	r3, r1, #4, #1
 8000b66:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TEIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TEIE);
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00e      	beq.n	8000b9c <DMA_Get_Flags_State+0x2fc>
 8000b7e:	79ba      	ldrb	r2, [r7, #6]
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3310      	adds	r3, #16
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <DMA_Get_Flags_State+0x2fc>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <DMA_Get_Flags_State+0x2fe>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	b2d9      	uxtb	r1, r3
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	7813      	ldrb	r3, [r2, #0]
 8000ba8:	f361 0382 	bfi	r3, r1, #2, #1
 8000bac:	7013      	strb	r3, [r2, #0]
		Flags_state->Half_Transfer_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (HTIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, HTIE);
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00e      	beq.n	8000be2 <DMA_Get_Flags_State+0x342>
 8000bc4:	79ba      	ldrb	r2, [r7, #6]
 8000bc6:	6939      	ldr	r1, [r7, #16]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3310      	adds	r3, #16
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <DMA_Get_Flags_State+0x342>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <DMA_Get_Flags_State+0x344>
 8000be2:	2300      	movs	r3, #0
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	b2d9      	uxtb	r1, r3
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	7813      	ldrb	r3, [r2, #0]
 8000bee:	f361 0341 	bfi	r3, r1, #1, #1
 8000bf2:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Complete_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TCIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TCIE);
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00e      	beq.n	8000c28 <DMA_Get_Flags_State+0x388>
 8000c0a:	79ba      	ldrb	r2, [r7, #6]
 8000c0c:	6939      	ldr	r1, [r7, #16]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3310      	adds	r3, #16
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <DMA_Get_Flags_State+0x388>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <DMA_Get_Flags_State+0x38a>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	b2d9      	uxtb	r1, r3
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	f361 0300 	bfi	r3, r1, #0, #1
 8000c38:	7013      	strb	r3, [r2, #0]
 8000c3a:	e055      	b.n	8000ce8 <DMA_Get_Flags_State+0x448>
	}
	else if (loc_stream_num == 3)
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d150      	bne.n	8000ce4 <DMA_Get_Flags_State+0x444>
	{
		Flags_state->FIFO_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (FEIF0 + 22));
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c50:	0d9b      	lsrs	r3, r3, #22
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	b2d9      	uxtb	r1, r3
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	7813      	ldrb	r3, [r2, #0]
 8000c5c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c60:	7013      	strb	r3, [r2, #0]
		Flags_state->Direct_Mode_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (DMEIF0 + 22));
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	0e1b      	lsrs	r3, r3, #24
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	7813      	ldrb	r3, [r2, #0]
 8000c7c:	f361 1304 	bfi	r3, r1, #4, #1
 8000c80:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TEIF0 + 22));
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	0e5b      	lsrs	r3, r3, #25
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	b2d9      	uxtb	r1, r3
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	7813      	ldrb	r3, [r2, #0]
 8000c9c:	f361 0382 	bfi	r3, r1, #2, #1
 8000ca0:	7013      	strb	r3, [r2, #0]
		Flags_state->Half_Transfer_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (HTIF0 + 22));
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	0e9b      	lsrs	r3, r3, #26
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	b2d9      	uxtb	r1, r3
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	7813      	ldrb	r3, [r2, #0]
 8000cbc:	f361 0341 	bfi	r3, r1, #1, #1
 8000cc0:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Complete_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TCIF0 + 22));
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	0edb      	lsrs	r3, r3, #27
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	b2d9      	uxtb	r1, r3
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	7813      	ldrb	r3, [r2, #0]
 8000cdc:	f361 0300 	bfi	r3, r1, #0, #1
 8000ce0:	7013      	strb	r3, [r2, #0]
 8000ce2:	e001      	b.n	8000ce8 <DMA_Get_Flags_State+0x448>
	}
	else
	{
		Local_u8_Error_State = DMA_NUM_STREAM_ERR;
 8000ce4:	2317      	movs	r3, #23
 8000ce6:	75fb      	strb	r3, [r7, #23]
	}

	return Local_u8_Error_State;
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]


}
 8000cea:	4618      	mov	r0, r3
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <DMA_Clear_IT_Flag>:


uint8_t DMA_Clear_IT_Flag(EN_DMA_Controller_t DMA_type, EN_DMA_Stream_t stram_num, EN_DMA_IT_Type_t IT_type)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	460b      	mov	r3, r1
 8000d04:	71bb      	strb	r3, [r7, #6]
 8000d06:	4613      	mov	r3, r2
 8000d08:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8_Error_State = OK;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	75fb      	strb	r3, [r7, #23]

	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (DMA_type) * 0x400);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	029b      	lsls	r3, r3, #10
 8000d12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d16:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 8000d1a:	613b      	str	r3, [r7, #16]

	uint8_t loc_stream_num_div = stram_num / 4;
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	73fb      	strb	r3, [r7, #15]
	uint8_t loc_stream_num_rem = stram_num % 4;
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	73bb      	strb	r3, [r7, #14]

	if ((loc_stream_num_rem == 0) || (loc_stream_num_rem == 1))
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <DMA_Clear_IT_Flag+0x3e>
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d167      	bne.n	8000e06 <DMA_Clear_IT_Flag+0x10e>
	{
		switch (IT_type)
 8000d36:	797b      	ldrb	r3, [r7, #5]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d861      	bhi.n	8000e00 <DMA_Clear_IT_Flag+0x108>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <DMA_Clear_IT_Flag+0x4c>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000d83 	.word	0x08000d83
 8000d4c:	08000dad 	.word	0x08000dad
 8000d50:	08000e01 	.word	0x08000e01
 8000d54:	08000dd7 	.word	0x08000dd7
		{
		case Transfer_Complete_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTCIF0 + loc_stream_num_rem * 6));
 8000d58:	7bfa      	ldrb	r2, [r7, #15]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3202      	adds	r2, #2
 8000d5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d62:	7bba      	ldrb	r2, [r7, #14]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	3305      	adds	r3, #5
 8000d6e:	2201      	movs	r2, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	4319      	orrs	r1, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	3202      	adds	r2, #2
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000d80:	e042      	b.n	8000e08 <DMA_Clear_IT_Flag+0x110>
		case Half_Transfer_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CHTIF0 + loc_stream_num_rem * 6));
 8000d82:	7bfa      	ldrb	r2, [r7, #15]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	3202      	adds	r2, #2
 8000d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d8c:	7bba      	ldrb	r2, [r7, #14]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	3304      	adds	r3, #4
 8000d98:	2201      	movs	r2, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4319      	orrs	r1, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	3202      	adds	r2, #2
 8000da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000daa:	e02d      	b.n	8000e08 <DMA_Clear_IT_Flag+0x110>
		case Transfer_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTEIF0 + loc_stream_num_rem * 6));
 8000dac:	7bfa      	ldrb	r2, [r7, #15]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3202      	adds	r2, #2
 8000db2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000db6:	7bba      	ldrb	r2, [r7, #14]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	4319      	orrs	r1, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	3202      	adds	r2, #2
 8000dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000dd4:	e018      	b.n	8000e08 <DMA_Clear_IT_Flag+0x110>
		case Direct_Mode_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CDMEIF0 + loc_stream_num_rem * 6));
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3202      	adds	r2, #2
 8000ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000de0:	7bba      	ldrb	r2, [r7, #14]
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	3302      	adds	r3, #2
 8000dec:	2201      	movs	r2, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	4319      	orrs	r1, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	3202      	adds	r2, #2
 8000dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000dfe:	e003      	b.n	8000e08 <DMA_Clear_IT_Flag+0x110>
		default:
			Local_u8_Error_State = DMA_IT_TYPES_ERR;
 8000e00:	231f      	movs	r3, #31
 8000e02:	75fb      	strb	r3, [r7, #23]
 8000e04:	e000      	b.n	8000e08 <DMA_Clear_IT_Flag+0x110>
		}
	}
 8000e06:	bf00      	nop

	if (loc_stream_num_rem == 2)
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d15f      	bne.n	8000ece <DMA_Clear_IT_Flag+0x1d6>
	{
		switch (IT_type)
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d859      	bhi.n	8000ec8 <DMA_Clear_IT_Flag+0x1d0>
 8000e14:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <DMA_Clear_IT_Flag+0x124>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000e31 	.word	0x08000e31
 8000e20:	08000e57 	.word	0x08000e57
 8000e24:	08000e7d 	.word	0x08000e7d
 8000e28:	08000ec9 	.word	0x08000ec9
 8000e2c:	08000ea3 	.word	0x08000ea3
		{
		case Transfer_Complete_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTCIF0 + loc_stream_num_rem * 16));
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	3202      	adds	r2, #2
 8000e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3a:	7bba      	ldrb	r2, [r7, #14]
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	3205      	adds	r2, #5
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	4611      	mov	r1, r2
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	4319      	orrs	r1, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	3202      	adds	r2, #2
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000e54:	e03c      	b.n	8000ed0 <DMA_Clear_IT_Flag+0x1d8>
		case Half_Transfer_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CHTIF0 + loc_stream_num_rem * 16));
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	3202      	adds	r2, #2
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	7bba      	ldrb	r2, [r7, #14]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	3204      	adds	r2, #4
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	4319      	orrs	r1, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	3202      	adds	r2, #2
 8000e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000e7a:	e029      	b.n	8000ed0 <DMA_Clear_IT_Flag+0x1d8>
		case Transfer_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTEIF0 + loc_stream_num_rem * 16));
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	3202      	adds	r2, #2
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	7bba      	ldrb	r2, [r7, #14]
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	3203      	adds	r2, #3
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	4611      	mov	r1, r2
 8000e94:	7bfa      	ldrb	r2, [r7, #15]
 8000e96:	4319      	orrs	r1, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	3202      	adds	r2, #2
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000ea0:	e016      	b.n	8000ed0 <DMA_Clear_IT_Flag+0x1d8>
		case Direct_Mode_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CDMEIF0 + loc_stream_num_rem * 16));
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	3202      	adds	r2, #2
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	7bba      	ldrb	r2, [r7, #14]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	3202      	adds	r2, #2
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	4611      	mov	r1, r2
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	4319      	orrs	r1, r3
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	3202      	adds	r2, #2
 8000ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000ec6:	e003      	b.n	8000ed0 <DMA_Clear_IT_Flag+0x1d8>
		default:
			Local_u8_Error_State = DMA_IT_TYPES_ERR;
 8000ec8:	231f      	movs	r3, #31
 8000eca:	75fb      	strb	r3, [r7, #23]
 8000ecc:	e000      	b.n	8000ed0 <DMA_Clear_IT_Flag+0x1d8>
		}
	}
 8000ece:	bf00      	nop

	if (loc_stream_num_rem == 3)
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d167      	bne.n	8000fa6 <DMA_Clear_IT_Flag+0x2ae>
	{
		switch (IT_type)
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d861      	bhi.n	8000fa0 <DMA_Clear_IT_Flag+0x2a8>
 8000edc:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <DMA_Clear_IT_Flag+0x1ec>)
 8000ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee2:	bf00      	nop
 8000ee4:	08000ef9 	.word	0x08000ef9
 8000ee8:	08000f23 	.word	0x08000f23
 8000eec:	08000f4d 	.word	0x08000f4d
 8000ef0:	08000fa1 	.word	0x08000fa1
 8000ef4:	08000f77 	.word	0x08000f77
		{
		case Transfer_Complete_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTCIF0 + loc_stream_num_rem * 22));
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	3202      	adds	r2, #2
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	7bba      	ldrb	r2, [r7, #14]
 8000f04:	2116      	movs	r1, #22
 8000f06:	fb01 f202 	mul.w	r2, r1, r2
 8000f0a:	3205      	adds	r2, #5
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	4611      	mov	r1, r2
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	4319      	orrs	r1, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	3202      	adds	r2, #2
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f20:	e042      	b.n	8000fa8 <DMA_Clear_IT_Flag+0x2b0>
		case Half_Transfer_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CHTIF0 + loc_stream_num_rem * 22));
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	3202      	adds	r2, #2
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	7bba      	ldrb	r2, [r7, #14]
 8000f2e:	2116      	movs	r1, #22
 8000f30:	fb01 f202 	mul.w	r2, r1, r2
 8000f34:	3204      	adds	r2, #4
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	4319      	orrs	r1, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3202      	adds	r2, #2
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f4a:	e02d      	b.n	8000fa8 <DMA_Clear_IT_Flag+0x2b0>
		case Transfer_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTEIF0 + loc_stream_num_rem * 22));
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3202      	adds	r2, #2
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	7bba      	ldrb	r2, [r7, #14]
 8000f58:	2116      	movs	r1, #22
 8000f5a:	fb01 f202 	mul.w	r2, r1, r2
 8000f5e:	3203      	adds	r2, #3
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	4611      	mov	r1, r2
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	4319      	orrs	r1, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	3202      	adds	r2, #2
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f74:	e018      	b.n	8000fa8 <DMA_Clear_IT_Flag+0x2b0>
		case Direct_Mode_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CDMEIF0 + loc_stream_num_rem * 22));
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	3202      	adds	r2, #2
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	7bba      	ldrb	r2, [r7, #14]
 8000f82:	2116      	movs	r1, #22
 8000f84:	fb01 f202 	mul.w	r2, r1, r2
 8000f88:	3202      	adds	r2, #2
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	4319      	orrs	r1, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	3202      	adds	r2, #2
 8000f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f9e:	e003      	b.n	8000fa8 <DMA_Clear_IT_Flag+0x2b0>
		default:
			Local_u8_Error_State = DMA_IT_TYPES_ERR;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	75fb      	strb	r3, [r7, #23]
 8000fa4:	e000      	b.n	8000fa8 <DMA_Clear_IT_Flag+0x2b0>
		}
	}
 8000fa6:	bf00      	nop

	return Local_u8_Error_State;
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <DMA1_Stream0_IRQHandler>:


void DMA1_Stream0_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM0, &loc_Flags);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fc6b 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8000fca:	793b      	ldrb	r3, [r7, #4]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <DMA1_Stream0_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Transfer_Complete_ID);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fe8c 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Transfer_Complete_ID]();
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <DMA1_Stream0_IRQHandler+0xa8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <DMA1_Stream0_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Half_Transfer_ID);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fe7e 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Half_Transfer_ID]();
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <DMA1_Stream0_IRQHandler+0xa8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001002:	793b      	ldrb	r3, [r7, #4]
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <DMA1_Stream0_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Direct_Mode_Error_ID);
 800100e:	2204      	movs	r2, #4
 8001010:	2100      	movs	r1, #0
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fe70 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Direct_Mode_Error_ID]();
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <DMA1_Stream0_IRQHandler+0xa8>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800101e:	793b      	ldrb	r3, [r7, #4]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <DMA1_Stream0_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, FIFO_Error_ID);
 800102a:	2203      	movs	r2, #3
 800102c:	2100      	movs	r1, #0
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fe62 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][FIFO_Error_ID]();
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <DMA1_Stream0_IRQHandler+0xa8>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800103a:	793b      	ldrb	r3, [r7, #4]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <DMA1_Stream0_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Transfer_Error_ID);
 8001046:	2202      	movs	r2, #2
 8001048:	2100      	movs	r1, #0
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fe54 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Transfer_Error_ID]();
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <DMA1_Stream0_IRQHandler+0xa8>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4798      	blx	r3
	}
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000020 	.word	0x20000020

08001064 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM1, &loc_Flags);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	461a      	mov	r2, r3
 800106e:	2101      	movs	r1, #1
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc15 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001076:	793b      	ldrb	r3, [r7, #4]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <DMA1_Stream1_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM1, Transfer_Complete_ID);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fe36 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM1][Transfer_Complete_ID]();
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <DMA1_Stream1_IRQHandler+0x80>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <DMA1_Stream1_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM1][Half_Transfer_ID]();
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <DMA1_Stream1_IRQHandler+0x80>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80010a4:	793b      	ldrb	r3, [r7, #4]
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <DMA1_Stream1_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM1][Direct_Mode_Error_ID]();
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <DMA1_Stream1_IRQHandler+0x80>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <DMA1_Stream1_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM1][FIFO_Error_ID]();
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <DMA1_Stream1_IRQHandler+0x80>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80010c8:	793b      	ldrb	r3, [r7, #4]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <DMA1_Stream1_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM1][Transfer_Error_ID]();
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <DMA1_Stream1_IRQHandler+0x80>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	4798      	blx	r3
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000020 	.word	0x20000020

080010e8 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM2, &loc_Flags);
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	461a      	mov	r2, r3
 80010f2:	2102      	movs	r1, #2
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fbd3 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 80010fa:	793b      	ldrb	r3, [r7, #4]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <DMA1_Stream2_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM2, Transfer_Complete_ID);
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fdf4 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM2][Transfer_Complete_ID]();
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <DMA1_Stream2_IRQHandler+0x80>)
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001116:	793b      	ldrb	r3, [r7, #4]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <DMA1_Stream2_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM2][Half_Transfer_ID]();
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <DMA1_Stream2_IRQHandler+0x80>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001128:	793b      	ldrb	r3, [r7, #4]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <DMA1_Stream2_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM2][Direct_Mode_Error_ID]();
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <DMA1_Stream2_IRQHandler+0x80>)
 8001136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001138:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800113a:	793b      	ldrb	r3, [r7, #4]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <DMA1_Stream2_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM2][FIFO_Error_ID]();
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <DMA1_Stream2_IRQHandler+0x80>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800114c:	793b      	ldrb	r3, [r7, #4]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <DMA1_Stream2_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM2][Transfer_Error_ID]();
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <DMA1_Stream2_IRQHandler+0x80>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4798      	blx	r3
	}
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000020 	.word	0x20000020

0800116c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM3, &loc_Flags);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	461a      	mov	r2, r3
 8001176:	2103      	movs	r1, #3
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fb91 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <DMA1_Stream3_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM3, Transfer_Complete_ID);
 800118a:	2200      	movs	r2, #0
 800118c:	2103      	movs	r1, #3
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fdb2 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM3][Transfer_Complete_ID]();
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <DMA1_Stream3_IRQHandler+0x80>)
 8001196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001198:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 800119a:	793b      	ldrb	r3, [r7, #4]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <DMA1_Stream3_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM3][Half_Transfer_ID]();
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <DMA1_Stream3_IRQHandler+0x80>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <DMA1_Stream3_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM3][Direct_Mode_Error_ID]();
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <DMA1_Stream3_IRQHandler+0x80>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80011be:	793b      	ldrb	r3, [r7, #4]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <DMA1_Stream3_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM3][FIFO_Error_ID]();
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <DMA1_Stream3_IRQHandler+0x80>)
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <DMA1_Stream3_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM3][Transfer_Error_ID]();
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <DMA1_Stream3_IRQHandler+0x80>)
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	4798      	blx	r3
	}
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000020 	.word	0x20000020

080011f0 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM4, &loc_Flags);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	461a      	mov	r2, r3
 80011fa:	2104      	movs	r1, #4
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fb4f 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001202:	793b      	ldrb	r3, [r7, #4]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <DMA1_Stream4_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM4, Transfer_Complete_ID);
 800120e:	2200      	movs	r2, #0
 8001210:	2104      	movs	r1, #4
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fd70 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM4][Transfer_Complete_ID]();
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <DMA1_Stream4_IRQHandler+0x80>)
 800121a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121c:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 800121e:	793b      	ldrb	r3, [r7, #4]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <DMA1_Stream4_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM4][Half_Transfer_ID]();
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <DMA1_Stream4_IRQHandler+0x80>)
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001230:	793b      	ldrb	r3, [r7, #4]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <DMA1_Stream4_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM4][Direct_Mode_Error_ID]();
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <DMA1_Stream4_IRQHandler+0x80>)
 800123e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001240:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001242:	793b      	ldrb	r3, [r7, #4]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <DMA1_Stream4_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM4][FIFO_Error_ID]();
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <DMA1_Stream4_IRQHandler+0x80>)
 8001250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001252:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001254:	793b      	ldrb	r3, [r7, #4]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <DMA1_Stream4_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM4][Transfer_Error_ID]();
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <DMA1_Stream4_IRQHandler+0x80>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	4798      	blx	r3
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000020 	.word	0x20000020

08001274 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM5, &loc_Flags);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	461a      	mov	r2, r3
 800127e:	2105      	movs	r1, #5
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fb0d 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001286:	793b      	ldrb	r3, [r7, #4]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01c      	beq.n	80012cc <DMA1_Stream5_IRQHandler+0x58>
	{
		/*  disable DMA requests then wait for a BTF event before programming the Stop condition */
		DMA->DMA1_Peripheral.DMA_Stream[6].DMA_SCR &= ~(1 << EN);
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <DMA1_Stream5_IRQHandler+0xa8>)
 8001294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001298:	4a20      	ldr	r2, [pc, #128]	; (800131c <DMA1_Stream5_IRQHandler+0xa8>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

		while (!READ_BIT(I2C->I2C1.SR1, 2));
 80012a2:	bf00      	nop
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <DMA1_Stream5_IRQHandler+0xac>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f9      	beq.n	80012a4 <DMA1_Stream5_IRQHandler+0x30>
		SET_BIT(I2C->I2C1.CR1, 9);
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <DMA1_Stream5_IRQHandler+0xac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <DMA1_Stream5_IRQHandler+0xac>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]

		DMA_Clear_IT_Flag(DMA1, STREAM6, Transfer_Complete_ID);
 80012bc:	2200      	movs	r2, #0
 80012be:	2106      	movs	r1, #6
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fd19 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM6][Transfer_Complete_ID]();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <DMA1_Stream5_IRQHandler+0xb0>)
 80012c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012ca:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <DMA1_Stream5_IRQHandler+0x6a>
	{
		DMA1_Callback[STREAM5][Half_Transfer_ID]();
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <DMA1_Stream5_IRQHandler+0xb0>)
 80012da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012dc:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80012de:	793b      	ldrb	r3, [r7, #4]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <DMA1_Stream5_IRQHandler+0x7c>
	{
		DMA1_Callback[STREAM5][Direct_Mode_Error_ID]();
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <DMA1_Stream5_IRQHandler+0xb0>)
 80012ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ee:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <DMA1_Stream5_IRQHandler+0x8e>
	{
		DMA1_Callback[STREAM5][FIFO_Error_ID]();
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <DMA1_Stream5_IRQHandler+0xb0>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001302:	793b      	ldrb	r3, [r7, #4]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <DMA1_Stream5_IRQHandler+0xa0>
	{
		DMA1_Callback[STREAM5][Transfer_Error_ID]();
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <DMA1_Stream5_IRQHandler+0xb0>)
 8001310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001312:	4798      	blx	r3
	}
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40026000 	.word	0x40026000
 8001320:	40005400 	.word	0x40005400
 8001324:	20000020 	.word	0x20000020

08001328 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM6, &loc_Flags);
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	461a      	mov	r2, r3
 8001332:	2106      	movs	r1, #6
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fab3 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800133a:	793b      	ldrb	r3, [r7, #4]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01c      	beq.n	8001380 <DMA1_Stream6_IRQHandler+0x58>
	{
		/*  disable DMA requests then wait for a BTF event before programming the Stop condition */
		DMA->DMA1_Peripheral.DMA_Stream[6].DMA_SCR &= ~(1 << EN);
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <DMA1_Stream6_IRQHandler+0xb8>)
 8001348:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <DMA1_Stream6_IRQHandler+0xb8>)
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

		while (!READ_BIT(I2C->I2C1.SR1, 2));
 8001356:	bf00      	nop
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <DMA1_Stream6_IRQHandler+0xbc>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f9      	beq.n	8001358 <DMA1_Stream6_IRQHandler+0x30>
		SET_BIT(I2C->I2C1.CR1, 9);
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <DMA1_Stream6_IRQHandler+0xbc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <DMA1_Stream6_IRQHandler+0xbc>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]

		DMA_Clear_IT_Flag(DMA1, STREAM6, Transfer_Complete_ID);
 8001370:	2200      	movs	r2, #0
 8001372:	2106      	movs	r1, #6
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fcbf 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM6][Transfer_Complete_ID]();
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <DMA1_Stream6_IRQHandler+0xc0>)
 800137c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800137e:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001380:	793b      	ldrb	r3, [r7, #4]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <DMA1_Stream6_IRQHandler+0x74>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM6, Half_Transfer_ID);
 800138c:	2201      	movs	r2, #1
 800138e:	2106      	movs	r1, #6
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fcb1 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM6][Half_Transfer_ID]();
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <DMA1_Stream6_IRQHandler+0xc0>)
 8001398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800139a:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800139c:	793b      	ldrb	r3, [r7, #4]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <DMA1_Stream6_IRQHandler+0x88>
	{
		DMA1_Callback[STREAM6][Direct_Mode_Error_ID]();
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <DMA1_Stream6_IRQHandler+0xc0>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80013b0:	793b      	ldrb	r3, [r7, #4]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <DMA1_Stream6_IRQHandler+0x9c>
	{
		DMA1_Callback[STREAM6][FIFO_Error_ID]();
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <DMA1_Stream6_IRQHandler+0xc0>)
 80013be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c2:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80013c4:	793b      	ldrb	r3, [r7, #4]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <DMA1_Stream6_IRQHandler+0xb0>
	{
		DMA1_Callback[STREAM6][Transfer_Error_ID]();
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <DMA1_Stream6_IRQHandler+0xc0>)
 80013d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013d6:	4798      	blx	r3
	}
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40026000 	.word	0x40026000
 80013e4:	40005400 	.word	0x40005400
 80013e8:	20000020 	.word	0x20000020

080013ec <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM7, &loc_Flags);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	461a      	mov	r2, r3
 80013f6:	2107      	movs	r1, #7
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fa51 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 80013fe:	793b      	ldrb	r3, [r7, #4]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <DMA1_Stream7_IRQHandler+0x30>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM7, Transfer_Complete_ID);
 800140a:	2200      	movs	r2, #0
 800140c:	2107      	movs	r1, #7
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fc72 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM7][Transfer_Complete_ID]();
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <DMA1_Stream7_IRQHandler+0x88>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800141a:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 800141c:	793b      	ldrb	r3, [r7, #4]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <DMA1_Stream7_IRQHandler+0x44>
	{
		DMA1_Callback[STREAM7][Half_Transfer_ID]();
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <DMA1_Stream7_IRQHandler+0x88>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142e:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <DMA1_Stream7_IRQHandler+0x58>
	{
		DMA1_Callback[STREAM7][Direct_Mode_Error_ID]();
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <DMA1_Stream7_IRQHandler+0x88>)
 800143e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001442:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001444:	793b      	ldrb	r3, [r7, #4]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <DMA1_Stream7_IRQHandler+0x6c>
	{
		DMA1_Callback[STREAM7][FIFO_Error_ID]();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <DMA1_Stream7_IRQHandler+0x88>)
 8001452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001456:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001458:	793b      	ldrb	r3, [r7, #4]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <DMA1_Stream7_IRQHandler+0x80>
	{
		DMA1_Callback[STREAM7][Transfer_Error_ID]();
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <DMA1_Stream7_IRQHandler+0x88>)
 8001466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146a:	4798      	blx	r3
	}
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000020 	.word	0x20000020

08001478 <DMA2_Stream0_IRQHandler>:




void DMA2_Stream0_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM0, &loc_Flags);
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	461a      	mov	r2, r3
 8001482:	2100      	movs	r1, #0
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fa0b 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800148a:	793b      	ldrb	r3, [r7, #4]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <DMA2_Stream0_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Transfer_Complete_ID);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fc2c 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Transfer_Complete_ID]();
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <DMA2_Stream0_IRQHandler+0xa8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <DMA2_Stream0_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Half_Transfer_ID);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2100      	movs	r1, #0
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fc1e 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Half_Transfer_ID]();
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <DMA2_Stream0_IRQHandler+0xa8>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80014c2:	793b      	ldrb	r3, [r7, #4]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <DMA2_Stream0_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Direct_Mode_Error_ID);
 80014ce:	2204      	movs	r2, #4
 80014d0:	2100      	movs	r1, #0
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff fc10 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Direct_Mode_Error_ID]();
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <DMA2_Stream0_IRQHandler+0xa8>)
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80014de:	793b      	ldrb	r3, [r7, #4]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <DMA2_Stream0_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, FIFO_Error_ID);
 80014ea:	2203      	movs	r2, #3
 80014ec:	2100      	movs	r1, #0
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff fc02 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][FIFO_Error_ID]();
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DMA2_Stream0_IRQHandler+0xa8>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <DMA2_Stream0_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Transfer_Error_ID);
 8001506:	2202      	movs	r2, #2
 8001508:	2100      	movs	r1, #0
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff fbf4 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Transfer_Error_ID]();
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <DMA2_Stream0_IRQHandler+0xa8>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4798      	blx	r3
	}
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200000c0 	.word	0x200000c0

08001524 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM1, &loc_Flags);
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	461a      	mov	r2, r3
 800152e:	2101      	movs	r1, #1
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff f9b5 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001536:	793b      	ldrb	r3, [r7, #4]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <DMA2_Stream1_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Transfer_Complete_ID);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff fbd6 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Transfer_Complete_ID]();
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <DMA2_Stream1_IRQHandler+0xa8>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001552:	793b      	ldrb	r3, [r7, #4]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <DMA2_Stream1_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, Half_Transfer_ID);
 800155e:	2201      	movs	r2, #1
 8001560:	2101      	movs	r1, #1
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff fbc8 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Half_Transfer_ID]();
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <DMA2_Stream1_IRQHandler+0xa8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800156e:	793b      	ldrb	r3, [r7, #4]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <DMA2_Stream1_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, Direct_Mode_Error_ID);
 800157a:	2204      	movs	r2, #4
 800157c:	2101      	movs	r1, #1
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fbba 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Direct_Mode_Error_ID]();
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <DMA2_Stream1_IRQHandler+0xa8>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800158a:	793b      	ldrb	r3, [r7, #4]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <DMA2_Stream1_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, FIFO_Error_ID);
 8001596:	2203      	movs	r2, #3
 8001598:	2101      	movs	r1, #1
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff fbac 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][FIFO_Error_ID]();
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <DMA2_Stream1_IRQHandler+0xa8>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80015a6:	793b      	ldrb	r3, [r7, #4]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d007      	beq.n	80015c2 <DMA2_Stream1_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, Transfer_Error_ID);
 80015b2:	2202      	movs	r2, #2
 80015b4:	2101      	movs	r1, #1
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff fb9e 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Transfer_Error_ID]();
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <DMA2_Stream1_IRQHandler+0xa8>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4798      	blx	r3
	}
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000c0 	.word	0x200000c0

080015d0 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM2, &loc_Flags);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	461a      	mov	r2, r3
 80015da:	2102      	movs	r1, #2
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff f95f 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 80015e2:	793b      	ldrb	r3, [r7, #4]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <DMA2_Stream2_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Transfer_Complete_ID);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2102      	movs	r1, #2
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fb80 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Transfer_Complete_ID]();
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <DMA2_Stream2_IRQHandler+0xa8>)
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80015fe:	793b      	ldrb	r3, [r7, #4]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <DMA2_Stream2_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Half_Transfer_ID);
 800160a:	2201      	movs	r2, #1
 800160c:	2102      	movs	r1, #2
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fb72 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Half_Transfer_ID]();
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <DMA2_Stream2_IRQHandler+0xa8>)
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800161a:	793b      	ldrb	r3, [r7, #4]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <DMA2_Stream2_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Direct_Mode_Error_ID);
 8001626:	2204      	movs	r2, #4
 8001628:	2102      	movs	r1, #2
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fb64 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Direct_Mode_Error_ID]();
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <DMA2_Stream2_IRQHandler+0xa8>)
 8001632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001634:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001636:	793b      	ldrb	r3, [r7, #4]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <DMA2_Stream2_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, FIFO_Error_ID);
 8001642:	2203      	movs	r2, #3
 8001644:	2102      	movs	r1, #2
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fb56 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][FIFO_Error_ID]();
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <DMA2_Stream2_IRQHandler+0xa8>)
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001652:	793b      	ldrb	r3, [r7, #4]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <DMA2_Stream2_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Transfer_Error_ID);
 800165e:	2202      	movs	r2, #2
 8001660:	2102      	movs	r1, #2
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff fb48 	bl	8000cf8 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Transfer_Error_ID]();
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <DMA2_Stream2_IRQHandler+0xa8>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4798      	blx	r3
	}
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000c0 	.word	0x200000c0

0800167c <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM3, &loc_Flags);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	461a      	mov	r2, r3
 8001686:	2103      	movs	r1, #3
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff f909 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800168e:	793b      	ldrb	r3, [r7, #4]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <DMA2_Stream3_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM3][Transfer_Complete_ID]();
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <DMA2_Stream3_IRQHandler+0x74>)
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80016a0:	793b      	ldrb	r3, [r7, #4]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <DMA2_Stream3_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM3][Half_Transfer_ID]();
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <DMA2_Stream3_IRQHandler+0x74>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80016b2:	793b      	ldrb	r3, [r7, #4]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <DMA2_Stream3_IRQHandler+0x48>
	{
		DMA2_Callback[STREAM3][Direct_Mode_Error_ID]();
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <DMA2_Stream3_IRQHandler+0x74>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80016c4:	793b      	ldrb	r3, [r7, #4]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <DMA2_Stream3_IRQHandler+0x5a>
	{
		DMA2_Callback[STREAM3][FIFO_Error_ID]();
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <DMA2_Stream3_IRQHandler+0x74>)
 80016d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d4:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80016d6:	793b      	ldrb	r3, [r7, #4]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <DMA2_Stream3_IRQHandler+0x6c>
	{
		DMA2_Callback[STREAM3][Transfer_Error_ID]();
 80016e2:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <DMA2_Stream3_IRQHandler+0x74>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4798      	blx	r3
	}
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000c0 	.word	0x200000c0

080016f4 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM4, &loc_Flags);
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	461a      	mov	r2, r3
 80016fe:	2104      	movs	r1, #4
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff f8cd 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001706:	793b      	ldrb	r3, [r7, #4]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <DMA2_Stream4_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM4][Transfer_Complete_ID]();
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <DMA2_Stream4_IRQHandler+0x74>)
 8001714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001716:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001718:	793b      	ldrb	r3, [r7, #4]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <DMA2_Stream4_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM4][Half_Transfer_ID]();
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <DMA2_Stream4_IRQHandler+0x74>)
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800172a:	793b      	ldrb	r3, [r7, #4]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <DMA2_Stream4_IRQHandler+0x48>
	{
		DMA2_Callback[STREAM4][Direct_Mode_Error_ID]();
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <DMA2_Stream4_IRQHandler+0x74>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800173c:	793b      	ldrb	r3, [r7, #4]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <DMA2_Stream4_IRQHandler+0x5a>
	{
		DMA2_Callback[STREAM4][FIFO_Error_ID]();
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <DMA2_Stream4_IRQHandler+0x74>)
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <DMA2_Stream4_IRQHandler+0x6c>
	{
		DMA2_Callback[STREAM4][Transfer_Error_ID]();
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <DMA2_Stream4_IRQHandler+0x74>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4798      	blx	r3
	}
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200000c0 	.word	0x200000c0

0800176c <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM5, &loc_Flags);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	461a      	mov	r2, r3
 8001776:	2105      	movs	r1, #5
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff f891 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800177e:	793b      	ldrb	r3, [r7, #4]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <DMA2_Stream5_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM5][Transfer_Complete_ID]();
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <DMA2_Stream5_IRQHandler+0x74>)
 800178c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800178e:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001790:	793b      	ldrb	r3, [r7, #4]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <DMA2_Stream5_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM5][Half_Transfer_ID]();
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <DMA2_Stream5_IRQHandler+0x74>)
 800179e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017a0:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80017a2:	793b      	ldrb	r3, [r7, #4]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <DMA2_Stream5_IRQHandler+0x48>
	{
		DMA2_Callback[STREAM5][Direct_Mode_Error_ID]();
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <DMA2_Stream5_IRQHandler+0x74>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <DMA2_Stream5_IRQHandler+0x5a>
	{
		DMA2_Callback[STREAM5][FIFO_Error_ID]();
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <DMA2_Stream5_IRQHandler+0x74>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80017c6:	793b      	ldrb	r3, [r7, #4]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <DMA2_Stream5_IRQHandler+0x6c>
	{
		DMA2_Callback[STREAM5][Transfer_Error_ID]();
 80017d2:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <DMA2_Stream5_IRQHandler+0x74>)
 80017d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017d6:	4798      	blx	r3
	}
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200000c0 	.word	0x200000c0

080017e4 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM6, &loc_Flags);
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	461a      	mov	r2, r3
 80017ee:	2106      	movs	r1, #6
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff f855 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 80017f6:	793b      	ldrb	r3, [r7, #4]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <DMA2_Stream6_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM6][Transfer_Complete_ID]();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <DMA2_Stream6_IRQHandler+0x7c>)
 8001804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001806:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001808:	793b      	ldrb	r3, [r7, #4]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <DMA2_Stream6_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM6][Half_Transfer_ID]();
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <DMA2_Stream6_IRQHandler+0x7c>)
 8001816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001818:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800181a:	793b      	ldrb	r3, [r7, #4]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <DMA2_Stream6_IRQHandler+0x4a>
	{
		DMA2_Callback[STREAM6][Direct_Mode_Error_ID]();
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <DMA2_Stream6_IRQHandler+0x7c>)
 8001828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182c:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800182e:	793b      	ldrb	r3, [r7, #4]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <DMA2_Stream6_IRQHandler+0x5e>
	{
		DMA2_Callback[STREAM6][FIFO_Error_ID]();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <DMA2_Stream6_IRQHandler+0x7c>)
 800183c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001840:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <DMA2_Stream6_IRQHandler+0x72>
	{
		DMA2_Callback[STREAM6][Transfer_Error_ID]();
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <DMA2_Stream6_IRQHandler+0x7c>)
 8001850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001854:	4798      	blx	r3
	}
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000c0 	.word	0x200000c0

08001864 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM7, &loc_Flags);
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	461a      	mov	r2, r3
 800186e:	2107      	movs	r1, #7
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff f815 	bl	80008a0 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001876:	793b      	ldrb	r3, [r7, #4]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <DMA2_Stream7_IRQHandler+0x26>
	{
		DMA2_Callback[STREAM7][Transfer_Complete_ID]();
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <DMA2_Stream7_IRQHandler+0x80>)
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001888:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 800188a:	793b      	ldrb	r3, [r7, #4]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <DMA2_Stream7_IRQHandler+0x3a>
	{
		DMA2_Callback[STREAM7][Half_Transfer_ID]();
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <DMA2_Stream7_IRQHandler+0x80>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800189e:	793b      	ldrb	r3, [r7, #4]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <DMA2_Stream7_IRQHandler+0x4e>
	{
		DMA2_Callback[STREAM7][Direct_Mode_Error_ID]();
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <DMA2_Stream7_IRQHandler+0x80>)
 80018ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018b0:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80018b2:	793b      	ldrb	r3, [r7, #4]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <DMA2_Stream7_IRQHandler+0x62>
	{
		DMA2_Callback[STREAM7][FIFO_Error_ID]();
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <DMA2_Stream7_IRQHandler+0x80>)
 80018c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c4:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80018c6:	793b      	ldrb	r3, [r7, #4]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <DMA2_Stream7_IRQHandler+0x76>
	{
		DMA2_Callback[STREAM7][Transfer_Error_ID]();
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <DMA2_Stream7_IRQHandler+0x80>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d8:	4798      	blx	r3
	}
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000c0 	.word	0x200000c0

080018e8 <EXTI_ClearPendingFlag>:
	}

	return Local_u8_Error_State;
}
uint8_t EXTI_ClearPendingFlag(EN_EXTI_LINE_NUM_t copy_line_num)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]

	if ((copy_line_num >= 0) && (copy_line_num <= NUM_EXTI_LINES))
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b16      	cmp	r3, #22
 80018fa:	d80a      	bhi.n	8001912 <EXTI_ClearPendingFlag+0x2a>
	{
		SET_BIT(EXTI->PR, copy_line_num);    /* clear flag by writing 1 */
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <EXTI_ClearPendingFlag+0x3c>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	4611      	mov	r1, r2
 800190a:	4a06      	ldr	r2, [pc, #24]	; (8001924 <EXTI_ClearPendingFlag+0x3c>)
 800190c:	430b      	orrs	r3, r1
 800190e:	6153      	str	r3, [r2, #20]
 8001910:	e001      	b.n	8001916 <EXTI_ClearPendingFlag+0x2e>
	}
	else
	{
		Local_u8_Error_State = EXTI_LINE_NUM_ERR;
 8001912:	2314      	movs	r3, #20
 8001914:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40013c00 	.word	0x40013c00

08001928 <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE0);
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff ffdb 	bl	80018e8 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE0]();
 8001932:	4b02      	ldr	r3, [pc, #8]	; (800193c <EXTI0_IRQHandler+0x14>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4798      	blx	r3
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000160 	.word	0x20000160

08001940 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE1);
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff ffcf 	bl	80018e8 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE1]();
 800194a:	4b02      	ldr	r3, [pc, #8]	; (8001954 <EXTI1_IRQHandler+0x14>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4798      	blx	r3
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000160 	.word	0x20000160

08001958 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE2);
 800195c:	2002      	movs	r0, #2
 800195e:	f7ff ffc3 	bl	80018e8 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE2]();
 8001962:	4b02      	ldr	r3, [pc, #8]	; (800196c <EXTI2_IRQHandler+0x14>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4798      	blx	r3
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000160 	.word	0x20000160

08001970 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE3);
 8001974:	2003      	movs	r0, #3
 8001976:	f7ff ffb7 	bl	80018e8 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE3]();
 800197a:	4b02      	ldr	r3, [pc, #8]	; (8001984 <EXTI3_IRQHandler+0x14>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4798      	blx	r3
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000160 	.word	0x20000160

08001988 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE4);
 800198c:	2004      	movs	r0, #4
 800198e:	f7ff ffab 	bl	80018e8 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE4]();
 8001992:	4b02      	ldr	r3, [pc, #8]	; (800199c <EXTI4_IRQHandler+0x14>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4798      	blx	r3
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000160 	.word	0x20000160

080019a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	if ((((EXTI->PR) >> EXTI_LINE5) & 1) == 1)
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <EXTI9_5_IRQHandler+0x8c>)
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d105      	bne.n	80019be <EXTI9_5_IRQHandler+0x1e>
	{
		EXTI_ClearPendingFlag(EXTI_LINE5);
 80019b2:	2005      	movs	r0, #5
 80019b4:	f7ff ff98 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE5]();
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <EXTI9_5_IRQHandler+0x90>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE6) & 1) == 1)
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <EXTI9_5_IRQHandler+0x8c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <EXTI9_5_IRQHandler+0x38>
	{
		EXTI_ClearPendingFlag(EXTI_LINE6);
 80019cc:	2006      	movs	r0, #6
 80019ce:	f7ff ff8b 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE6]();
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <EXTI9_5_IRQHandler+0x90>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE7) & 1) == 1)
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <EXTI9_5_IRQHandler+0x8c>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	09db      	lsrs	r3, r3, #7
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d105      	bne.n	80019f2 <EXTI9_5_IRQHandler+0x52>
	{
		EXTI_ClearPendingFlag(EXTI_LINE7);
 80019e6:	2007      	movs	r0, #7
 80019e8:	f7ff ff7e 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE7]();
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <EXTI9_5_IRQHandler+0x90>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE8) & 1) == 1)
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <EXTI9_5_IRQHandler+0x8c>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <EXTI9_5_IRQHandler+0x6c>
	{
		EXTI_ClearPendingFlag(EXTI_LINE8);
 8001a00:	2008      	movs	r0, #8
 8001a02:	f7ff ff71 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE8]();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <EXTI9_5_IRQHandler+0x90>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE9) & 1) == 1)
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <EXTI9_5_IRQHandler+0x8c>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	0a5b      	lsrs	r3, r3, #9
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <EXTI9_5_IRQHandler+0x86>
	{
		EXTI_ClearPendingFlag(EXTI_LINE9);
 8001a1a:	2009      	movs	r0, #9
 8001a1c:	f7ff ff64 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE9]();
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <EXTI9_5_IRQHandler+0x90>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	4798      	blx	r3
	}

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40013c00 	.word	0x40013c00
 8001a30:	20000160 	.word	0x20000160

08001a34 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	if ((((EXTI->PR) >> EXTI_LINE10) & 1) == 1)
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <EXTI15_10_IRQHandler+0xa4>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	0a9b      	lsrs	r3, r3, #10
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <EXTI15_10_IRQHandler+0x1e>
	{
		EXTI_ClearPendingFlag(EXTI_LINE10);
 8001a46:	200a      	movs	r0, #10
 8001a48:	f7ff ff4e 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE10]();
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <EXTI15_10_IRQHandler+0xa8>)
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE11) & 1) == 1)
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <EXTI15_10_IRQHandler+0xa4>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	0adb      	lsrs	r3, r3, #11
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <EXTI15_10_IRQHandler+0x38>
	{
		EXTI_ClearPendingFlag(EXTI_LINE11);
 8001a60:	200b      	movs	r0, #11
 8001a62:	f7ff ff41 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE11]();
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <EXTI15_10_IRQHandler+0xa8>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE12) & 1) == 1)
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <EXTI15_10_IRQHandler+0xa4>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	0b1b      	lsrs	r3, r3, #12
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <EXTI15_10_IRQHandler+0x52>
	{
		EXTI_ClearPendingFlag(EXTI_LINE12);
 8001a7a:	200c      	movs	r0, #12
 8001a7c:	f7ff ff34 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE12]();
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <EXTI15_10_IRQHandler+0xa8>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE13) & 1) == 1)
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <EXTI15_10_IRQHandler+0xa4>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	0b5b      	lsrs	r3, r3, #13
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <EXTI15_10_IRQHandler+0x6c>
	{
		EXTI_ClearPendingFlag(EXTI_LINE13);
 8001a94:	200d      	movs	r0, #13
 8001a96:	f7ff ff27 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE13]();
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <EXTI15_10_IRQHandler+0xa8>)
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE14) & 1) == 1)
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <EXTI15_10_IRQHandler+0xa4>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	0b9b      	lsrs	r3, r3, #14
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <EXTI15_10_IRQHandler+0x86>
	{
		EXTI_ClearPendingFlag(EXTI_LINE14);
 8001aae:	200e      	movs	r0, #14
 8001ab0:	f7ff ff1a 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE14]();
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <EXTI15_10_IRQHandler+0xa8>)
 8001ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab8:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE15) & 1) == 1)
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <EXTI15_10_IRQHandler+0xa4>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	0bdb      	lsrs	r3, r3, #15
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <EXTI15_10_IRQHandler+0xa0>
	{
		EXTI_ClearPendingFlag(EXTI_LINE15);
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f7ff ff0d 	bl	80018e8 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE15]();
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <EXTI15_10_IRQHandler+0xa8>)
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad2:	4798      	blx	r3
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40013c00 	.word	0x40013c00
 8001adc:	20000160 	.word	0x20000160

08001ae0 <GPIO_u8PIN_init>:
  *
  */


uint8_t GPIO_u8PIN_init(const ST_Pin_Config* pin_config)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]

	ST_GPIO_RegDef_t* port_id = (ST_GPIO_RegDef_t*)((uint32_t)GPIOA + (pin_config->Port_X) * 0x400);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	029b      	lsls	r3, r3, #10
 8001af2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001af6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001afa:	60bb      	str	r3, [r7, #8]

	if (pin_config != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80c2 	beq.w	8001c88 <GPIO_u8PIN_init+0x1a8>
	{
		if (pin_config->Port_X <= PORTH && (pin_config->Pin_Num <= 15))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	f200 80ba 	bhi.w	8001c82 <GPIO_u8PIN_init+0x1a2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	78db      	ldrb	r3, [r3, #3]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f200 80b5 	bhi.w	8001c82 <GPIO_u8PIN_init+0x1a2>
		{
			/* switch to Mode*/
			port_id->MODER &= ~(0b11 << (2 * pin_config->Pin_Num));
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	78d2      	ldrb	r2, [r2, #3]
 8001b20:	0052      	lsls	r2, r2, #1
 8001b22:	2103      	movs	r1, #3
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	43d2      	mvns	r2, r2
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	601a      	str	r2, [r3, #0]
			port_id->MODER |= (pin_config->mode << (2 * pin_config->Pin_Num));
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	7852      	ldrb	r2, [r2, #1]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	78d2      	ldrb	r2, [r2, #3]
 8001b3e:	0052      	lsls	r2, r2, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	601a      	str	r2, [r3, #0]
			/* Pull Type */
			port_id->PUPDR &= ~(0b11 << 2 * pin_config->Pin_Num);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	78d2      	ldrb	r2, [r2, #3]
 8001b52:	0052      	lsls	r2, r2, #1
 8001b54:	2103      	movs	r1, #3
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	43d2      	mvns	r2, r2
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	60da      	str	r2, [r3, #12]
			port_id->PUPDR |= (pin_config->PullType << (2 * pin_config->Pin_Num));
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	7992      	ldrb	r2, [r2, #6]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	78d2      	ldrb	r2, [r2, #3]
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	431a      	orrs	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60da      	str	r2, [r3, #12]

			if (pin_config->mode == OUTPUT || pin_config->mode == ALTERNATE_FUNCTION)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d003      	beq.n	8001b8c <GPIO_u8PIN_init+0xac>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d13c      	bne.n	8001c06 <GPIO_u8PIN_init+0x126>
			{
				port_id->PUPDR |= (pin_config->PullType << (2 * pin_config->Pin_Num));
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	7992      	ldrb	r2, [r2, #6]
 8001b94:	4611      	mov	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	78d2      	ldrb	r2, [r2, #3]
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
				/* Output Type Push Pull & Open Drain */
				port_id->OTYPER &= ~(0b1 << (pin_config->Pin_Num));
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	78d2      	ldrb	r2, [r2, #3]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	408a      	lsls	r2, r1
 8001bb4:	43d2      	mvns	r2, r2
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	605a      	str	r2, [r3, #4]
				port_id->OTYPER |= (pin_config->Output_Type << (pin_config->Pin_Num));
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	7912      	ldrb	r2, [r2, #4]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	78d2      	ldrb	r2, [r2, #3]
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	605a      	str	r2, [r3, #4]
				/* Speed */
				port_id->OSPEEDER &= ~(0b11 << (2 * pin_config->Pin_Num));
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	78d2      	ldrb	r2, [r2, #3]
 8001bdc:	0052      	lsls	r2, r2, #1
 8001bde:	2103      	movs	r1, #3
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	43d2      	mvns	r2, r2
 8001be6:	401a      	ands	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	609a      	str	r2, [r3, #8]
				port_id->OSPEEDER |= (pin_config->speed << (2 * pin_config->Pin_Num));
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	7892      	ldrb	r2, [r2, #2]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	78d2      	ldrb	r2, [r2, #3]
 8001bfa:	0052      	lsls	r2, r2, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	431a      	orrs	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	609a      	str	r2, [r3, #8]
			}
			if (pin_config->mode == ALTERNATE_FUNCTION)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d13e      	bne.n	8001c8c <GPIO_u8PIN_init+0x1ac>
			{
				/* Function selection */
				port_id->AFR[pin_config->Pin_Num / 8] &= ~(0b1111 << (4 * (pin_config->Pin_Num % 8)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	78d2      	ldrb	r2, [r2, #3]
 8001c24:	f002 0207 	and.w	r2, r2, #7
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	43d2      	mvns	r2, r2
 8001c32:	4611      	mov	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	78d2      	ldrb	r2, [r2, #3]
 8001c38:	08d2      	lsrs	r2, r2, #3
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	4019      	ands	r1, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3208      	adds	r2, #8
 8001c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				port_id->AFR[pin_config->Pin_Num / 8] |= (pin_config->Alt_Func << (4 * (pin_config->Pin_Num % 8)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	78db      	ldrb	r3, [r3, #3]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3208      	adds	r2, #8
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	7952      	ldrb	r2, [r2, #5]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	78d2      	ldrb	r2, [r2, #3]
 8001c62:	f002 0207 	and.w	r2, r2, #7
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	78d2      	ldrb	r2, [r2, #3]
 8001c72:	08d2      	lsrs	r2, r2, #3
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	4319      	orrs	r1, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (pin_config->mode == ALTERNATE_FUNCTION)
 8001c80:	e004      	b.n	8001c8c <GPIO_u8PIN_init+0x1ac>
			}
		}
		else
		{
			Local_u8_Error_State = PORTS_PINS_ERR;
 8001c82:	230f      	movs	r3, #15
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e001      	b.n	8001c8c <GPIO_u8PIN_init+0x1ac>
		}
	}
	else
	{
		Local_u8_Error_State = NULL_PTR_ERR;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]

}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <I2C_init>:

uint8_t Flag_State = 0;


uint8_t I2C_init(ST_I2C_Config_t* i2c_config)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cb2:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001cb6:	613b      	str	r3, [r7, #16]

	if ((i2c_config->i2c_num >= I2C_NUM_1 && i2c_config->i2c_num <= I2C_NUM_3) &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d87f      	bhi.n	8001dc0 <I2C_init+0x124>
		(i2c_config->PCLK_freq_in_mhz >= 2 && i2c_config->PCLK_freq_in_mhz <= 50))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e1b      	ldrb	r3, [r3, #24]
	if ((i2c_config->i2c_num >= I2C_NUM_1 && i2c_config->i2c_num <= I2C_NUM_3) &&
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d97b      	bls.n	8001dc0 <I2C_init+0x124>
		(i2c_config->PCLK_freq_in_mhz >= 2 && i2c_config->PCLK_freq_in_mhz <= 50))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
 8001ccc:	2b32      	cmp	r3, #50	; 0x32
 8001cce:	d877      	bhi.n	8001dc0 <I2C_init+0x124>


	{
		/* reset I2C */
		SET_BIT(I2C_X->CR1, SWRST);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	601a      	str	r2, [r3, #0]

		/* and again write a ‘0’ to this position to pull the I2C from the reset */
		CLEAR_BIT(I2C_X->CR1, SWRST);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	601a      	str	r2, [r3, #0]


		/* start configs */
		I2C_X->CR1 |= (i2c_config->smbus_mode << SMBUS) | (i2c_config->smbus_type << SMBTYPE) |
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	7952      	ldrb	r2, [r2, #5]
 8001cf0:	0051      	lsls	r1, r2, #1
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	7992      	ldrb	r2, [r2, #6]
 8001cf6:	00d2      	lsls	r2, r2, #3
 8001cf8:	4311      	orrs	r1, r2
			(i2c_config->CLK_stretch << NOSTRETCH) | (i2c_config->gen_call << ENGC) |
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	7892      	ldrb	r2, [r2, #2]
 8001cfe:	01d2      	lsls	r2, r2, #7
		I2C_X->CR1 |= (i2c_config->smbus_mode << SMBUS) | (i2c_config->smbus_type << SMBTYPE) |
 8001d00:	4311      	orrs	r1, r2
			(i2c_config->CLK_stretch << NOSTRETCH) | (i2c_config->gen_call << ENGC) |
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	78d2      	ldrb	r2, [r2, #3]
 8001d06:	0192      	lsls	r2, r2, #6
 8001d08:	4311      	orrs	r1, r2
			(i2c_config->PEC_en_dis << ENPEC);
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	7912      	ldrb	r2, [r2, #4]
 8001d0e:	0152      	lsls	r2, r2, #5
			(i2c_config->CLK_stretch << NOSTRETCH) | (i2c_config->gen_call << ENGC) |
 8001d10:	430a      	orrs	r2, r1
		I2C_X->CR1 |= (i2c_config->smbus_mode << SMBUS) | (i2c_config->smbus_type << SMBTYPE) |
 8001d12:	431a      	orrs	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	601a      	str	r2, [r3, #0]

		I2C_X->CR2 |= (i2c_config->last_transfer << LAST) | (i2c_config->PCLK_freq_in_mhz << FREQ);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	7852      	ldrb	r2, [r2, #1]
 8001d20:	0312      	lsls	r2, r2, #12
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	7e09      	ldrb	r1, [r1, #24]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]

		I2C_X->CCR |= (i2c_config->master_mode << F_S) | (i2c_config->duty << DUTY);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	79d2      	ldrb	r2, [r2, #7]
 8001d36:	03d1      	lsls	r1, r2, #15
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	7a12      	ldrb	r2, [r2, #8]
 8001d3c:	0392      	lsls	r2, r2, #14
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	61da      	str	r2, [r3, #28]

		/* Bit 14 Should always be kept at 1 by software */
		I2C_X->OAR1 |= (1 << 14);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	609a      	str	r2, [r3, #8]

		I2C_X->OAR1 |= (i2c_config->addr_mode << ADDMODE);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	7a52      	ldrb	r2, [r2, #9]
 8001d5a:	03d2      	lsls	r2, r2, #15
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]



		/* PCLK1 must be at least 2 MHz to achieve Sm mode I²C frequencies */
		if (i2c_config->master_mode == SM_MODE && (i2c_config->PCLK_freq_in_mhz >= 2))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	79db      	ldrb	r3, [r3, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d123      	bne.n	8001db2 <I2C_init+0x116>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e1b      	ldrb	r3, [r3, #24]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d91c      	bls.n	8001dac <I2C_init+0x110>
		{
			uint32_t CCR_value = (i2c_config->PCLK_freq_in_mhz * 1000000) / (2 * i2c_config->SCL_freq_in_khz * 1000);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e1b      	ldrb	r3, [r3, #24]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <I2C_init+0x138>)
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7e5b      	ldrb	r3, [r3, #25]
 8001d82:	4619      	mov	r1, r3
 8001d84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d90:	60fb      	str	r3, [r7, #12]

			I2C_X->CCR |= (CCR_value << CCR);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	61da      	str	r2, [r3, #28]

			/* configure rise time */
			I2C_X->TRISE = (i2c_config->PCLK_freq_in_mhz + 1);                                 /*  For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7e1b      	ldrb	r3, [r3, #24]
 8001da2:	3301      	adds	r3, #1
 8001da4:	461a      	mov	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	621a      	str	r2, [r3, #32]
 8001daa:	e002      	b.n	8001db2 <I2C_init+0x116>
																								  therefore the TRISE[5:0] bits must be programmed with 09h.
																								  (1000 ns / 125 ns = 8 + 1)*/
		}

		/*  It must be at least 4 MHz to achieve Fm mode I²C frequencies*/
		else if (i2c_config->master_mode == FM_MODE && (i2c_config->PCLK_freq_in_mhz >= 4))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	79db      	ldrb	r3, [r3, #7]
 8001db0:	2b01      	cmp	r3, #1
			/* do configs */
		}

		/* enable the peripheral */

		I2C_X->CR1 |= (1 << PE);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e001      	b.n	8001dc4 <I2C_init+0x128>

	}
	else
	{
		Local_u8_Error_State = NOK;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	75fb      	strb	r3, [r7, #23]
	}

	return Local_u8_Error_State;
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	000f4240 	.word	0x000f4240

08001dd8 <i2C_Send_Start_Bit>:


uint8_t i2C_Send_Start_Bit(ST_I2C_Config_t* i2c_config)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]

	uint16_t temp_read = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	81bb      	strh	r3, [r7, #12]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001df2:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001df6:	60bb      	str	r3, [r7, #8]

	/* Enable the ACK */
	I2C_X->CR1 |= (1 << ACK);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	601a      	str	r2, [r3, #0]
	/* send start condition to switch to master mode */
	I2C_X->CR1 |= (1 << START);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	601a      	str	r2, [r3, #0]

	/* wait till SB is set */
	while (!READ_BIT(I2C_X->SR1, SB));
 8001e10:	bf00      	nop
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f9      	beq.n	8001e12 <i2C_Send_Start_Bit+0x3a>

	/* Cleared by software by reading the SR1 register followed by writing the DR register*/
	temp_read = I2C_X->SR1;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	81bb      	strh	r3, [r7, #12]
}
 8001e24:	bf00      	nop
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <i2C_Send_7_Bit_Slave_Address_With_Write>:
	/* send Stop Bit */
	I2C_X->CR1 |= (1 << STOP);
}

uint8_t i2C_Send_7_Bit_Slave_Address_With_Write(ST_I2C_Config_t* i2c_config, uint8_t slave_address)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b087      	sub	sp, #28
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
	uint8_t Local_u8_Error_State = OK;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	029b      	lsls	r3, r3, #10
 8001e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e4c:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001e50:	613b      	str	r3, [r7, #16]

	/* Send Address */
	I2C_X->DR |= (slave_address << 1) & (MASTER_WRITE_ADDRESS_MASK);    /* LSB is 0 for write */
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	0052      	lsls	r2, r2, #1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	611a      	str	r2, [r3, #16]

	/* wait for ADDR bit to set */
	while (!(READ_BIT(I2C_X->SR1, ADDR)));
 8001e60:	bf00      	nop
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f9      	beq.n	8001e62 <i2C_Send_7_Bit_Slave_Address_With_Write+0x30>

	/* ADDR Bit cleared by reading SR1 register followed by reading SR2.*/
	uint8_t temp = I2C_X->SR1 | I2C_X->SR2;  // read SR1 and SR2 to clear the ADDR bit
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	73fb      	strb	r3, [r7, #15]
}
 8001e7e:	bf00      	nop
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <i2C_Master_Transmit_DMA>:

uint8_t i2C_Send_Mem_Address(ST_I2C_Config_t* i2c_config, uint8_t mem_address);


uint8_t i2C_Master_Transmit_DMA(ST_I2C_Config_t* i2c_config, uint16_t slave_address, uint32_t Src_Addr, uint32_t data_len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	817b      	strh	r3, [r7, #10]
	uint8_t Local_u8_Error_State = OK;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eaa:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001eae:	61bb      	str	r3, [r7, #24]
	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (i2c_config->dma_used) * 0x400);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	7adb      	ldrb	r3, [r3, #11]
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eba:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 8001ebe:	617b      	str	r3, [r7, #20]


	/* Monitor the BUSY bit of I2C_SR2 (Status 2) register until the bus is idl */
	while (READ_BIT(I2C_X->SR2, BUSY));
 8001ec0:	bf00      	nop
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <i2C_Master_Transmit_DMA+0x36>

	i2C_Send_Start_Bit(i2c_config);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff ff82 	bl	8001dd8 <i2C_Send_Start_Bit>

	/* DMAEN bit must be set in the I2C_CR2 register before the ADDR event. */
	SET_BIT(I2C_X->CR2, DMAEN);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]

	i2C_Send_7_Bit_Slave_Address_With_Write(i2c_config, slave_address);
 8001ee0:	897b      	ldrh	r3, [r7, #10]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff ffa3 	bl	8001e32 <i2C_Send_7_Bit_Slave_Address_With_Write>

	/* Set the I2C_DR register address in the DMA_SxPAR register */
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SPAR = (uint32_t)(&I2C_X->DR);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f103 0210 	add.w	r2, r3, #16
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	6979      	ldr	r1, [r7, #20]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	6018      	str	r0, [r3, #0]

	/* Set the memory address in the DMA_SxMA0R register The data are loaded into I2C_DR from this memory after each TxE event.*/
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SM0AR = Src_Addr;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	7b1b      	ldrb	r3, [r3, #12]
 8001f0c:	6979      	ldr	r1, [r7, #20]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	601a      	str	r2, [r3, #0]

	/* Configure the total number of bytes to be transferred in the DMA_SxNDTR register.After each TxE event, this value is decremented.*/
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SNDTR = data_len;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
 8001f24:	4619      	mov	r1, r3
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	440b      	add	r3, r1
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	3314      	adds	r3, #20
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	601a      	str	r2, [r3, #0]

	/* enable Event interrupt  */
	I2C_X->CR2 |= (1 << ITEVTEN);
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	605a      	str	r2, [r3, #4]

	/* Activate the stream by setting the EN bit in the DMA_SxCR register.*/
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SCR |= (1 << 0);     // EN  bit is zero
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	7b1b      	ldrb	r3, [r3, #12]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	440b      	add	r3, r1
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	3310      	adds	r3, #16
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	7b12      	ldrb	r2, [r2, #12]
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	4603      	mov	r3, r0
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4403      	add	r3, r0
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3310      	adds	r3, #16
 8001f72:	601a      	str	r2, [r3, #0]

	return Local_u8_Error_State;
 8001f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <I2C1_EV_IRQHandler>:


/* ISRs*/

void I2C1_EV_IRQHandler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	if (READ_BIT(I2C->I2C1.SR1, SB))
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <I2C1_EV_IRQHandler+0x16>
	{
		Flag_State = START_SEND;
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <I2C1_EV_IRQHandler+0xac>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, ADDR))
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <I2C1_EV_IRQHandler+0x28>
	{
		Flag_State = ADDRESS_SEND;
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <I2C1_EV_IRQHandler+0xac>)
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, BTF))
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <I2C1_EV_IRQHandler+0x3a>
	{
		Flag_State = BYTE_FINISHED;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <I2C1_EV_IRQHandler+0xac>)
 8001fb6:	2205      	movs	r2, #5
 8001fb8:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, ADD10))
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <I2C1_EV_IRQHandler+0x4c>
	{
		Flag_State = ADDRESS_10_SEND;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <I2C1_EV_IRQHandler+0xac>)
 8001fc8:	2203      	movs	r2, #3
 8001fca:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, STOPF))
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <I2C1_EV_IRQHandler+0x5e>
	{
		Flag_State = STOP_SEND;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <I2C1_EV_IRQHandler+0xac>)
 8001fda:	2204      	movs	r2, #4
 8001fdc:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, RxNE))
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <I2C1_EV_IRQHandler+0x70>
	{
		Flag_State = DATA_REGISTER_NOT_EMPTY;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <I2C1_EV_IRQHandler+0xac>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, TxE))
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <I2C1_EV_IRQHandler+0x9e>
	{
		Flag_State = DATA_REGISTER_EMPTY;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <I2C1_EV_IRQHandler+0xac>)
 8001ffe:	2206      	movs	r2, #6
 8002000:	701a      	strb	r2, [r3, #0]
		DMA->DMA1_Peripheral.DMA_Stream[STREAM6_USED_I2C].DMA_SCR &= ~(1 << 0);
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <I2C1_EV_IRQHandler+0xb0>)
 8002004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002008:	4a09      	ldr	r2, [pc, #36]	; (8002030 <I2C1_EV_IRQHandler+0xb0>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

		I2C->I2C1.CR1 |= (1 << STOP);
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <I2C1_EV_IRQHandler+0xa8>)
 8002018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201c:	6013      	str	r3, [r2, #0]
	}
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40005400 	.word	0x40005400
 800202c:	200001b8 	.word	0x200001b8
 8002030:	40026000 	.word	0x40026000

08002034 <NVIC_EnableIRQ>:
#include "../../../Common/Error_type.h"



uint8_t NVIC_EnableIRQ(EN_IRQn_t IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]

	if (IRQn <= FMPI2C1_error_IRQn)
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b60      	cmp	r3, #96	; 0x60
 8002046:	d80e      	bhi.n	8002066 <NVIC_EnableIRQ+0x32>
	{
		NVIC_ISER[IRQn / 32] = 1 << (IRQn % 32);
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2201      	movs	r2, #1
 8002050:	409a      	lsls	r2, r3
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	b2db      	uxtb	r3, r3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800205e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e001      	b.n	800206a <NVIC_EnableIRQ+0x36>
	}
	else
	{
		Local_u8_Error_State = IRQn_SRC_ERR;
 8002066:	2310      	movs	r3, #16
 8002068:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <RCC_Enable_HSI>:
#include "../inc/RCC_interface.h"



uint8_t RCC_Enable_HSI(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
	uint8_t Local_u8_Error_State = OK;
 800207e:	2301      	movs	r3, #1
 8002080:	71fb      	strb	r3, [r7, #7]
	uint16_t wait = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	80bb      	strh	r3, [r7, #4]
	SET_BIT(RCC->CR, HSION);
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & (1 << HSIRDY)) == 0)
 8002092:	e009      	b.n	80020a8 <RCC_Enable_HSI+0x30>
	{
		if (wait >= 500)
 8002094:	88bb      	ldrh	r3, [r7, #4]
 8002096:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800209a:	d302      	bcc.n	80020a2 <RCC_Enable_HSI+0x2a>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 800209c:	2304      	movs	r3, #4
 800209e:	71fb      	strb	r3, [r7, #7]
			break;
 80020a0:	e008      	b.n	80020b4 <RCC_Enable_HSI+0x3c>
		}
		wait++;
 80020a2:	88bb      	ldrh	r3, [r7, #4]
 80020a4:	3301      	adds	r3, #1
 80020a6:	80bb      	strh	r3, [r7, #4]
	while ((RCC->CR & (1 << HSIRDY)) == 0)
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ef      	beq.n	8002094 <RCC_Enable_HSI+0x1c>
	}
	SET_BIT(RCC->CIR, HSIRDYC); /* clear flag */
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 80020ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020be:	60d3      	str	r3, [r2, #12]

	RCC->CFGR &= ~(CLOCK_SWITCH_MASK << SW0);
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (HSI_system_clock_select << SW0);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <RCC_Enable_HSI+0x6c>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	6093      	str	r3, [r2, #8]

	return Local_u8_Error_State;
 80020d4:	79fb      	ldrb	r3, [r7, #7]

}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <RCC_Enable_HSE>:
uint8_t RCC_Enable_HSE(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
	uint8_t Local_u8_Error_State = OK;
 80020ee:	2301      	movs	r3, #1
 80020f0:	71fb      	strb	r3, [r7, #7]
	uint16_t wait = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	80bb      	strh	r3, [r7, #4]
	SET_BIT(RCC->CR, HSEON);
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <RCC_Enable_HSE+0x70>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <RCC_Enable_HSE+0x70>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & (1 << HSERDY)) == 0)
 8002102:	e009      	b.n	8002118 <RCC_Enable_HSE+0x30>
	{
		if (wait >= 500)
 8002104:	88bb      	ldrh	r3, [r7, #4]
 8002106:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800210a:	d302      	bcc.n	8002112 <RCC_Enable_HSE+0x2a>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 800210c:	2304      	movs	r3, #4
 800210e:	71fb      	strb	r3, [r7, #7]
			break;
 8002110:	e008      	b.n	8002124 <RCC_Enable_HSE+0x3c>
		}
		wait++;
 8002112:	88bb      	ldrh	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	80bb      	strh	r3, [r7, #4]
	while ((RCC->CR & (1 << HSERDY)) == 0)
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <RCC_Enable_HSE+0x70>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <RCC_Enable_HSE+0x1c>
	}
	SET_BIT(RCC->CIR, HSERDYC); /* clear flag */
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <RCC_Enable_HSE+0x70>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <RCC_Enable_HSE+0x70>)
 800212a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800212e:	60d3      	str	r3, [r2, #12]

	RCC->CFGR &= ~(CLOCK_SWITCH_MASK << SW0);
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <RCC_Enable_HSE+0x70>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <RCC_Enable_HSE+0x70>)
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (HSE_system_clock_select << SW0);
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <RCC_Enable_HSE+0x70>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <RCC_Enable_HSE+0x70>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6093      	str	r3, [r2, #8]

	return Local_u8_Error_State;
 8002148:	79fb      	ldrb	r3, [r7, #7]
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <RCC_Enable_PLL>:

uint8_t RCC_Enable_PLL(ST_RCC_Config_t* st_rcc_config)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
	uint16_t wait = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	81bb      	strh	r3, [r7, #12]
	SET_BIT(RCC->CR, PLLON);
 800216c:	4b49      	ldr	r3, [pc, #292]	; (8002294 <RCC_Enable_PLL+0x138>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a48      	ldr	r2, [pc, #288]	; (8002294 <RCC_Enable_PLL+0x138>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & (1 << PLLRDY)) == 0)
 8002178:	e009      	b.n	800218e <RCC_Enable_PLL+0x32>
	{
		if (wait >= 500)
 800217a:	89bb      	ldrh	r3, [r7, #12]
 800217c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002180:	d302      	bcc.n	8002188 <RCC_Enable_PLL+0x2c>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 8002182:	2304      	movs	r3, #4
 8002184:	73fb      	strb	r3, [r7, #15]
			break;
 8002186:	e008      	b.n	800219a <RCC_Enable_PLL+0x3e>
		}
		wait++;
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	81bb      	strh	r3, [r7, #12]
	while ((RCC->CR & (1 << PLLRDY)) == 0)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <RCC_Enable_PLL+0x138>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ef      	beq.n	800217a <RCC_Enable_PLL+0x1e>
	}

	/* Switch to PLL*/
	RCC->CFGR &= ~(CLOCK_SWITCH_MASK << SW0);
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <RCC_Enable_PLL+0x138>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4a3d      	ldr	r2, [pc, #244]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021a0:	f023 0303 	bic.w	r3, r3, #3
 80021a4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (PLL_P_system_clock_select << SW0);
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6093      	str	r3, [r2, #8]

	/* PLL Clock Source */
	if (st_rcc_config->PLL_clk_src == HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7a5b      	ldrb	r3, [r3, #9]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <RCC_Enable_PLL+0x6c>
	{
		CLEAR_BIT(RCC->PLLCFGR, PLLSRC);
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a35      	ldr	r2, [pc, #212]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021c4:	6053      	str	r3, [r2, #4]
 80021c6:	e00c      	b.n	80021e2 <RCC_Enable_PLL+0x86>
	}
	else if (st_rcc_config->PLL_clk_src == HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7a5b      	ldrb	r3, [r3, #9]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <RCC_Enable_PLL+0x82>
	{
		SET_BIT(RCC->PLLCFGR, PLLSRC);
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021da:	6053      	str	r3, [r2, #4]
 80021dc:	e001      	b.n	80021e2 <RCC_Enable_PLL+0x86>
	}
	else
	{
		Local_u8_Error_State = PLL_CLK_SRC_ERR;
 80021de:	2305      	movs	r3, #5
 80021e0:	73fb      	strb	r3, [r7, #15]
	}
	SET_BIT(RCC->CIR, PLLRDYC); /* clear flag */
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <RCC_Enable_PLL+0x138>)
 80021e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ec:	60d3      	str	r3, [r2, #12]

	/* configuration for PLL*/

	if (IS_PLLM_DEVISION_FACTOR_CORRECT(st_rcc_config->PLLM_Pres))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	791b      	ldrb	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d90e      	bls.n	8002214 <RCC_Enable_PLL+0xb8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	791b      	ldrb	r3, [r3, #4]
 80021fa:	2b3f      	cmp	r3, #63	; 0x3f
 80021fc:	d80a      	bhi.n	8002214 <RCC_Enable_PLL+0xb8>
	{
		RCC->PLLCFGR = (RCC->PLLCFGR & (PLLM_DEVISION_FACTOR_MASK)) | (st_rcc_config->PLLM_Pres << PLLM0);
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <RCC_Enable_PLL+0x138>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 031f 	bic.w	r3, r3, #31
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	7912      	ldrb	r2, [r2, #4]
 800220a:	4611      	mov	r1, r2
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <RCC_Enable_PLL+0x138>)
 800220e:	430b      	orrs	r3, r1
 8002210:	6053      	str	r3, [r2, #4]
 8002212:	e001      	b.n	8002218 <RCC_Enable_PLL+0xbc>
	}
	else
	{
		Local_u8_Error_State = PLLM_DEVISION_FACTOR_ERR;
 8002214:	2306      	movs	r3, #6
 8002216:	73fb      	strb	r3, [r7, #15]
	}

	if(IS_PLLN_MULTIPLICATION_FACTOR_CORRECT(st_rcc_config->PLLN_Factor))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	88db      	ldrh	r3, [r3, #6]
 800221c:	2b31      	cmp	r3, #49	; 0x31
 800221e:	d912      	bls.n	8002246 <RCC_Enable_PLL+0xea>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	88db      	ldrh	r3, [r3, #6]
 8002224:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002228:	d80d      	bhi.n	8002246 <RCC_Enable_PLL+0xea>
	{
		RCC->PLLCFGR = (RCC->PLLCFGR & (PLLN_MULTIPLICATION_FACTOR_MASK)) | (st_rcc_config->PLLN_Factor << PLLN0);
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <RCC_Enable_PLL+0x138>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	88d2      	ldrh	r2, [r2, #6]
 800223a:	0192      	lsls	r2, r2, #6
 800223c:	4611      	mov	r1, r2
 800223e:	4a15      	ldr	r2, [pc, #84]	; (8002294 <RCC_Enable_PLL+0x138>)
 8002240:	430b      	orrs	r3, r1
 8002242:	6053      	str	r3, [r2, #4]
 8002244:	e001      	b.n	800224a <RCC_Enable_PLL+0xee>
	}
	else
	{
		Local_u8_Error_State = PLLN_MULTIPLICATION_FACTOR_ERR;
 8002246:	2307      	movs	r3, #7
 8002248:	73fb      	strb	r3, [r7, #15]
	}

	if (IS_PLLP_DEVISION_FACTOR_CORRECT(st_rcc_config->PLLP_Pres))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7a1b      	ldrb	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <RCC_Enable_PLL+0x124>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7a1b      	ldrb	r3, [r3, #8]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d80f      	bhi.n	8002280 <RCC_Enable_PLL+0x124>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7a1b      	ldrb	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00b      	beq.n	8002280 <RCC_Enable_PLL+0x124>
	{
		RCC->PLLCFGR = (RCC->PLLCFGR & (PLLP_DEVISION_FACTOR_MASK)) | (st_rcc_config->PLLP_Pres << PLLP0);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <RCC_Enable_PLL+0x138>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	7a12      	ldrb	r2, [r2, #8]
 8002274:	0412      	lsls	r2, r2, #16
 8002276:	4611      	mov	r1, r2
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <RCC_Enable_PLL+0x138>)
 800227a:	430b      	orrs	r3, r1
 800227c:	6053      	str	r3, [r2, #4]
 800227e:	e001      	b.n	8002284 <RCC_Enable_PLL+0x128>
	}
	else
	{
		Local_u8_Error_State = PLLP_DEVISION_FACTOR_ERR;
 8002280:	2308      	movs	r3, #8
 8002282:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <AHP_Prescaler>:
uint8_t RCC_Enable_LSI(void);
uint8_t RCC_Enable_LSE(void);
uint8_t RCC_MCO_CLK(uint8_t MCO_CLK_source);

uint8_t AHP_Prescaler(EN_AHP_SysClk_Prescaler_t AHP_prescaler_value)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
	if (IS_AHB_PRESCALER_CORRECT(AHP_prescaler_value))
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2b07      	cmp	r3, #7
 80022aa:	d902      	bls.n	80022b2 <AHP_Prescaler+0x1a>
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	d902      	bls.n	80022b8 <AHP_Prescaler+0x20>
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <AHP_Prescaler+0x36>
	{
		RCC->CFGR = (RCC->CFGR & (AHP_PRESCALER_MASK)) | (AHP_prescaler_value << HPRE0);
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <AHP_Prescaler+0x48>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c0:	79fa      	ldrb	r2, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	4611      	mov	r1, r2
 80022c6:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <AHP_Prescaler+0x48>)
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6093      	str	r3, [r2, #8]
 80022cc:	e001      	b.n	80022d2 <AHP_Prescaler+0x3a>
	}
	else
	{
		Local_u8_Error_State = AHB_PRESCALER_ERR;
 80022ce:	2309      	movs	r3, #9
 80022d0:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40023800 	.word	0x40023800

080022e4 <APB1_Prescaler>:
uint8_t APB1_Prescaler(EN_APB1_HClk_Prescaler_t APB1_prescaler_value)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
	if (IS_APB1_PRESCALER_CORRECT(APB1_prescaler_value))
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d902      	bls.n	80022fe <APB1_Prescaler+0x1a>
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2b07      	cmp	r3, #7
 80022fc:	d902      	bls.n	8002304 <APB1_Prescaler+0x20>
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <APB1_Prescaler+0x36>
	{
		RCC->CFGR = (RCC->CFGR & (APB1_PRESCALER_MASK)) | (APB1_prescaler_value << PPRE10);
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <APB1_Prescaler+0x48>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	0292      	lsls	r2, r2, #10
 8002310:	4611      	mov	r1, r2
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <APB1_Prescaler+0x48>)
 8002314:	430b      	orrs	r3, r1
 8002316:	6093      	str	r3, [r2, #8]
 8002318:	e001      	b.n	800231e <APB1_Prescaler+0x3a>
	}
	else
	{
		Local_u8_Error_State = APB1_PRESCALER_ERR;
 800231a:	230a      	movs	r3, #10
 800231c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40023800 	.word	0x40023800

08002330 <APB2_Prescaler>:
uint8_t APB2_Prescaler(EN_APB2_HClk_Prescaler_t APB2_prescaler_value)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
	if (IS_APB2_PRESCALER_CORRECT(APB2_prescaler_value))
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d902      	bls.n	800234a <APB2_Prescaler+0x1a>
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b07      	cmp	r3, #7
 8002348:	d902      	bls.n	8002350 <APB2_Prescaler+0x20>
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <APB2_Prescaler+0x36>
	{
		RCC->CFGR = (RCC->CFGR & (APB2_PRESCALER_MASK)) | (APB2_prescaler_value << PPRE20);
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <APB2_Prescaler+0x48>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002358:	79fa      	ldrb	r2, [r7, #7]
 800235a:	0352      	lsls	r2, r2, #13
 800235c:	4611      	mov	r1, r2
 800235e:	4a06      	ldr	r2, [pc, #24]	; (8002378 <APB2_Prescaler+0x48>)
 8002360:	430b      	orrs	r3, r1
 8002362:	6093      	str	r3, [r2, #8]
 8002364:	e001      	b.n	800236a <APB2_Prescaler+0x3a>
	}
	else
	{
		Local_u8_Error_State = APB2_PRESCALER_ERR;
 8002366:	230b      	movs	r3, #11
 8002368:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 800236a:	7bfb      	ldrb	r3, [r7, #15]

}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40023800 	.word	0x40023800

0800237c <RCC_Enable_Peripheral>:
uint8_t ADC_Prescaler(uint8_t ADC_prescaler_value);
uint8_t USB_Prescaler(uint8_t USB_prescaler_value);

uint8_t RCC_Enable_Peripheral(uint8_t peripheral_idx)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
	if (PERIPHERAL_IN_RCC_AHB1ENR(peripheral_idx))
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b1f      	cmp	r3, #31
 800238e:	d80a      	bhi.n	80023a6 <RCC_Enable_Peripheral+0x2a>
	{
		SET_BIT(RCC->AHB1ENR, peripheral_idx);
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f202 	lsl.w	r2, r1, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4a2f      	ldr	r2, [pc, #188]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	e053      	b.n	800244e <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_AHB2ENR(peripheral_idx))
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b1f      	cmp	r3, #31
 80023aa:	d910      	bls.n	80023ce <RCC_Enable_Peripheral+0x52>
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	2b3f      	cmp	r3, #63	; 0x3f
 80023b0:	d80d      	bhi.n	80023ce <RCC_Enable_Peripheral+0x52>
	{
		peripheral_idx = peripheral_idx - 32;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	3b20      	subs	r3, #32
 80023b6:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB2ENR, peripheral_idx);
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 80023ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023bc:	79fa      	ldrb	r2, [r7, #7]
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	4611      	mov	r1, r2
 80023c6:	4a25      	ldr	r2, [pc, #148]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6353      	str	r3, [r2, #52]	; 0x34
 80023cc:	e03f      	b.n	800244e <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_AHB3ENR(peripheral_idx))
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b3f      	cmp	r3, #63	; 0x3f
 80023d2:	d910      	bls.n	80023f6 <RCC_Enable_Peripheral+0x7a>
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	2b5f      	cmp	r3, #95	; 0x5f
 80023d8:	d80d      	bhi.n	80023f6 <RCC_Enable_Peripheral+0x7a>
	{
		peripheral_idx = peripheral_idx - 64;
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	3b40      	subs	r3, #64	; 0x40
 80023de:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB3ENR, peripheral_idx);
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4a1b      	ldr	r2, [pc, #108]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 80023f0:	430b      	orrs	r3, r1
 80023f2:	6393      	str	r3, [r2, #56]	; 0x38
 80023f4:	e02b      	b.n	800244e <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_APB1ENR(peripheral_idx))
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b5f      	cmp	r3, #95	; 0x5f
 80023fa:	d911      	bls.n	8002420 <RCC_Enable_Peripheral+0xa4>
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0d      	blt.n	8002420 <RCC_Enable_Peripheral+0xa4>
	{
		peripheral_idx = peripheral_idx - 96;
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	3b60      	subs	r3, #96	; 0x60
 8002408:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB1ENR, peripheral_idx);
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	4611      	mov	r1, r2
 8002418:	4a10      	ldr	r2, [pc, #64]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 800241a:	430b      	orrs	r3, r1
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	e016      	b.n	800244e <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_APB2ENR(peripheral_idx))
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	da10      	bge.n	800244a <RCC_Enable_Peripheral+0xce>
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2b9f      	cmp	r3, #159	; 0x9f
 800242c:	d80d      	bhi.n	800244a <RCC_Enable_Peripheral+0xce>
	{
		peripheral_idx = peripheral_idx - 128;
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	3b80      	subs	r3, #128	; 0x80
 8002432:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB2ENR, peripheral_idx);
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	79fa      	ldrb	r2, [r7, #7]
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4611      	mov	r1, r2
 8002442:	4a06      	ldr	r2, [pc, #24]	; (800245c <RCC_Enable_Peripheral+0xe0>)
 8002444:	430b      	orrs	r3, r1
 8002446:	6453      	str	r3, [r2, #68]	; 0x44
 8002448:	e001      	b.n	800244e <RCC_Enable_Peripheral+0xd2>
	}
	else
	{
		Local_u8_Error_State = PERIPHERAL_NOT_FOUND_ERR;
 800244a:	230c      	movs	r3, #12
 800244c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40023800 	.word	0x40023800

08002460 <RCC_Config>:
	return Local_u8_Error_State;
}


uint8_t RCC_Config(ST_RCC_Config_t* st_rcc_config)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]

	if (st_rcc_config->Sys_Clk_Select == HSI_system_clock_select)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <RCC_Config+0x1e>
	{
		Local_u8_Error_State = RCC_Enable_HSI();
 8002474:	f7ff fe00 	bl	8002078 <RCC_Enable_HSI>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e014      	b.n	80024a8 <RCC_Config+0x48>
	}
	else if (st_rcc_config->Sys_Clk_Select == HSE_system_clock_select)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d104      	bne.n	8002490 <RCC_Config+0x30>
	{
		Local_u8_Error_State = RCC_Enable_HSE();
 8002486:	f7ff fe2f 	bl	80020e8 <RCC_Enable_HSE>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e00b      	b.n	80024a8 <RCC_Config+0x48>
	}
	else if(st_rcc_config->Sys_Clk_Select == PLL_P_system_clock_select)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d105      	bne.n	80024a4 <RCC_Config+0x44>
	{
		Local_u8_Error_State = RCC_Enable_PLL(st_rcc_config);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fe5f 	bl	800215c <RCC_Enable_PLL>
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e001      	b.n	80024a8 <RCC_Config+0x48>
	}
	else
	{
		Local_u8_Error_State = CLK_SRC_ERR;
 80024a4:	230d      	movs	r3, #13
 80024a6:	73fb      	strb	r3, [r7, #15]
	}

	Local_u8_Error_State = AHP_Prescaler(st_rcc_config->AHP_Pres);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fef3 	bl	8002298 <AHP_Prescaler>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
	Local_u8_Error_State = APB1_Prescaler(st_rcc_config->APB1_Pres);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	789b      	ldrb	r3, [r3, #2]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff12 	bl	80022e4 <APB1_Prescaler>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
	Local_u8_Error_State = APB2_Prescaler(st_rcc_config->APB2_Pres);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <APB2_Prescaler>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]

	return Local_u8_Error_State;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_GPIO_init>:

/* I2C using DMA Transmit Receive ( worked ) */


void I2C_GPIO_init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
	ST_Pin_Config butt1_pin =
 80024e2:	4a11      	ldr	r2, [pc, #68]	; (8002528 <I2C_GPIO_init+0x4c>)
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ec:	6018      	str	r0, [r3, #0]
 80024ee:	3304      	adds	r3, #4
 80024f0:	8019      	strh	r1, [r3, #0]
 80024f2:	3302      	adds	r3, #2
 80024f4:	0c0a      	lsrs	r2, r1, #16
 80024f6:	701a      	strb	r2, [r3, #0]
			.speed = HIGH ,
			.Output_Type = OPEN_DRAIN,
			.PullType = PULL_UP ,
	};

	ST_Pin_Config butt2_pin =
 80024f8:	4a0c      	ldr	r2, [pc, #48]	; (800252c <I2C_GPIO_init+0x50>)
 80024fa:	463b      	mov	r3, r7
 80024fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002500:	6018      	str	r0, [r3, #0]
 8002502:	3304      	adds	r3, #4
 8002504:	8019      	strh	r1, [r3, #0]
 8002506:	3302      	adds	r3, #2
 8002508:	0c0a      	lsrs	r2, r1, #16
 800250a:	701a      	strb	r2, [r3, #0]
			.speed = HIGH ,
			.Output_Type = OPEN_DRAIN,
			.PullType = PULL_UP,
	};

	GPIO_u8PIN_init(&butt1_pin);
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fae5 	bl	8001ae0 <GPIO_u8PIN_init>
	GPIO_u8PIN_init(&butt2_pin);
 8002516:	463b      	mov	r3, r7
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fae1 	bl	8001ae0 <GPIO_u8PIN_init>

}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	0800271c 	.word	0x0800271c
 800252c:	08002724 	.word	0x08002724

08002530 <call_func>:


int i2x = 20;
void call_func(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	i2x = 60;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <call_func+0x14>)
 8002536:	223c      	movs	r2, #60	; 0x3c
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	20000000 	.word	0x20000000

08002548 <main>:
uint8_t src[20] = { 0 };

uint8_t dest[20] = { 0 };

int main()
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b09e      	sub	sp, #120	; 0x78
 800254c:	af00      	add	r7, sp, #0
	ST_RCC_Config_t rcc_user_specs =
 800254e:	4a42      	ldr	r2, [pc, #264]	; (8002658 <main+0x110>)
 8002550:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002554:	ca07      	ldmia	r2, {r0, r1, r2}
 8002556:	c303      	stmia	r3!, {r0, r1}
 8002558:	801a      	strh	r2, [r3, #0]
		.AHP_Pres = AHB_SYSCLK_not_devided,
		.APB1_Pres = APB1_HCLK_not_divided,
		.APB2_Pres = APB2_HCLK_not_divided
	};

	RCC_Config(&rcc_user_specs);
 800255a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff7e 	bl	8002460 <RCC_Config>

	RCC_Enable_Peripheral(GPIOBEN);
 8002564:	2001      	movs	r0, #1
 8002566:	f7ff ff09 	bl	800237c <RCC_Enable_Peripheral>

	RCC_Enable_Peripheral(I2C1EN);
 800256a:	2075      	movs	r0, #117	; 0x75
 800256c:	f7ff ff06 	bl	800237c <RCC_Enable_Peripheral>

	I2C_GPIO_init();
 8002570:	f7ff ffb4 	bl	80024dc <I2C_GPIO_init>

	ST_I2C_Config_t i2c1_config =
 8002574:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	619a      	str	r2, [r3, #24]
 8002588:	2301      	movs	r3, #1
 800258a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800258e:	2306      	movs	r3, #6
 8002590:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002594:	2305      	movs	r3, #5
 8002596:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800259a:	2310      	movs	r3, #16
 800259c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80025a0:	2364      	movs	r3, #100	; 0x64
 80025a2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		.SCL_freq_in_khz = 100,
		.smbus_mode = I2C_MODE,
		.smbus_type = SMBUS_DEVICE,
	};

	I2C_init(&i2c1_config);
 80025a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fb76 	bl	8001c9c <I2C_init>

	RCC_Enable_Peripheral(DMA1EN);
 80025b0:	2015      	movs	r0, #21
 80025b2:	f7ff fee3 	bl	800237c <RCC_Enable_Peripheral>


	ST_DMA_config_t dma_config_Rx =
 80025b6:	4b29      	ldr	r3, [pc, #164]	; (800265c <main+0x114>)
 80025b8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025bc:	461d      	mov	r5, r3
 80025be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025ca:	e884 0003 	stmia.w	r4, {r0, r1}
		.DMA_p_allign = BYTE ,
		.DMA_mem_allign = BYTE,
		.DMA_str_priority = HIGH_PRIORITY ,
	};

	DMA_Init(&dma_config_Rx);
 80025ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd fe16 	bl	8000204 <DMA_Init>

	ST_DMA_config_t dma_config_Tx =
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <main+0x118>)
 80025da:	463c      	mov	r4, r7
 80025dc:	461d      	mov	r5, r3
 80025de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025ea:	e884 0003 	stmia.w	r4, {r0, r1}
		.DMA_p_allign = BYTE ,
		.DMA_mem_allign = BYTE,
		.DMA_str_priority = HIGH_PRIORITY ,
	};

	DMA_Init(&dma_config_Tx);
 80025ee:	463b      	mov	r3, r7
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd fe07 	bl	8000204 <DMA_Init>

	DMA_Set_Callback(&dma_config_Rx, Transfer_Complete_ID);
 80025f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe f907 	bl	8000810 <DMA_Set_Callback>
	DMA_Set_Callback(&dma_config_Tx, Transfer_Complete_ID);
 8002602:	463b      	mov	r3, r7
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe f902 	bl	8000810 <DMA_Set_Callback>

	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800260c:	2010      	movs	r0, #16
 800260e:	f7ff fd11 	bl	8002034 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002612:	2011      	movs	r0, #17
 8002614:	f7ff fd0e 	bl	8002034 <NVIC_EnableIRQ>

	uint8_t slave_add = 0x68;
 8002618:	2368      	movs	r3, #104	; 0x68
 800261a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	for (uint8_t i = 0; i < 20; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002624:	e00a      	b.n	800263c <main+0xf4>
	{
		src[i] = i;
 8002626:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <main+0x11c>)
 800262c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8002630:	54ca      	strb	r2, [r1, r3]
	for (uint8_t i = 0; i < 20; i++)
 8002632:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002636:	3301      	adds	r3, #1
 8002638:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800263c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002640:	2b13      	cmp	r3, #19
 8002642:	d9f0      	bls.n	8002626 <main+0xde>
	}

	i2C_Master_Transmit_DMA(&i2c1_config, slave_add , (uint32_t)&src , 8);
 8002644:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002648:	b299      	uxth	r1, r3
 800264a:	4a06      	ldr	r2, [pc, #24]	; (8002664 <main+0x11c>)
 800264c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002650:	2308      	movs	r3, #8
 8002652:	f7ff fc1b 	bl	8001e8c <i2C_Master_Transmit_DMA>
	while (1)
 8002656:	e7fe      	b.n	8002656 <main+0x10e>
 8002658:	0800272c 	.word	0x0800272c
 800265c:	08002738 	.word	0x08002738
 8002660:	08002760 	.word	0x08002760
 8002664:	200001bc 	.word	0x200001bc

08002668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002668:	480d      	ldr	r0, [pc, #52]	; (80026a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800266a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800266c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002672:	490d      	ldr	r1, [pc, #52]	; (80026a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <LoopForever+0xe>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002678:	e002      	b.n	8002680 <LoopCopyDataInit>

0800267a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800267c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267e:	3304      	adds	r3, #4

08002680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002684:	d3f9      	bcc.n	800267a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002688:	4c0a      	ldr	r4, [pc, #40]	; (80026b4 <LoopForever+0x16>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800268c:	e001      	b.n	8002692 <LoopFillZerobss>

0800268e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002690:	3204      	adds	r2, #4

08002692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002696:	f000 f811 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800269a:	f7ff ff55 	bl	8002548 <main>

0800269e <LoopForever>:

LoopForever:
  b LoopForever
 800269e:	e7fe      	b.n	800269e <LoopForever>
  ldr   r0, =_estack
 80026a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80026ac:	08002790 	.word	0x08002790
  ldr r2, =_sbss
 80026b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80026b4:	200001d0 	.word	0x200001d0

080026b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC_IRQHandler>
	...

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	4d0d      	ldr	r5, [pc, #52]	; (80026f4 <__libc_init_array+0x38>)
 80026c0:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c2:	1b64      	subs	r4, r4, r5
 80026c4:	10a4      	asrs	r4, r4, #2
 80026c6:	2600      	movs	r6, #0
 80026c8:	42a6      	cmp	r6, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	4d0b      	ldr	r5, [pc, #44]	; (80026fc <__libc_init_array+0x40>)
 80026ce:	4c0c      	ldr	r4, [pc, #48]	; (8002700 <__libc_init_array+0x44>)
 80026d0:	f000 f818 	bl	8002704 <_init>
 80026d4:	1b64      	subs	r4, r4, r5
 80026d6:	10a4      	asrs	r4, r4, #2
 80026d8:	2600      	movs	r6, #0
 80026da:	42a6      	cmp	r6, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e4:	4798      	blx	r3
 80026e6:	3601      	adds	r6, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ee:	4798      	blx	r3
 80026f0:	3601      	adds	r6, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	08002788 	.word	0x08002788
 80026f8:	08002788 	.word	0x08002788
 80026fc:	08002788 	.word	0x08002788
 8002700:	0800278c 	.word	0x0800278c

08002704 <_init>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr

08002710 <_fini>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr
