
STM32F446_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080028b4  080028b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002920  08002920  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002920  08002920  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002920  08002920  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08002934  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002934  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004593  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b09  00000000  00000000  000245cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000310  00000000  00000000  000250d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000288  00000000  00000000  000253e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001785  00000000  00000000  00025670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000465e  00000000  00000000  00026df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000746c  00000000  00000000  0002b453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000328bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000aac  00000000  00000000  00032910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800289c 	.word	0x0800289c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800289c 	.word	0x0800289c

08000204 <Convert_to_BCD>:
#include "../inc/RTC_DS1307_private.h"



void Convert_to_BCD(ST_RTC_DS1307_Date_t* date)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	/*** Bit 7 of register 0 (seconds register ) is the clock halt (CH) bit. When this bit is set to a 1,
	the oscillator is disabled. When cleared to a 0, the oscillator is enabled */
	date->seconds = ((date->seconds % 10) | ((date->seconds / 10) << 4)) & (0x01111111); //
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	785a      	ldrb	r2, [r3, #1]
 8000210:	4b56      	ldr	r3, [pc, #344]	; (800036c <Convert_to_BCD+0x168>)
 8000212:	fba3 1302 	umull	r1, r3, r3, r2
 8000216:	08d9      	lsrs	r1, r3, #3
 8000218:	460b      	mov	r3, r1
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	440b      	add	r3, r1
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	b2db      	uxtb	r3, r3
 8000224:	b25a      	sxtb	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	4950      	ldr	r1, [pc, #320]	; (800036c <Convert_to_BCD+0x168>)
 800022c:	fba1 1303 	umull	r1, r3, r1, r3
 8000230:	08db      	lsrs	r3, r3, #3
 8000232:	b2db      	uxtb	r3, r3
 8000234:	011b      	lsls	r3, r3, #4
 8000236:	b25b      	sxtb	r3, r3
 8000238:	4313      	orrs	r3, r2
 800023a:	b25b      	sxtb	r3, r3
 800023c:	b2db      	uxtb	r3, r3
 800023e:	f003 0311 	and.w	r3, r3, #17
 8000242:	b2da      	uxtb	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	705a      	strb	r2, [r3, #1]
	date->min = (date->min % 10) | ((date->min / 10) << 4);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	789a      	ldrb	r2, [r3, #2]
 800024c:	4b47      	ldr	r3, [pc, #284]	; (800036c <Convert_to_BCD+0x168>)
 800024e:	fba3 1302 	umull	r1, r3, r3, r2
 8000252:	08d9      	lsrs	r1, r3, #3
 8000254:	460b      	mov	r3, r1
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	440b      	add	r3, r1
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	1ad3      	subs	r3, r2, r3
 800025e:	b2db      	uxtb	r3, r3
 8000260:	b25a      	sxtb	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	789b      	ldrb	r3, [r3, #2]
 8000266:	4941      	ldr	r1, [pc, #260]	; (800036c <Convert_to_BCD+0x168>)
 8000268:	fba1 1303 	umull	r1, r3, r1, r3
 800026c:	08db      	lsrs	r3, r3, #3
 800026e:	b2db      	uxtb	r3, r3
 8000270:	011b      	lsls	r3, r3, #4
 8000272:	b25b      	sxtb	r3, r3
 8000274:	4313      	orrs	r3, r2
 8000276:	b25b      	sxtb	r3, r3
 8000278:	b2da      	uxtb	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	709a      	strb	r2, [r3, #2]
	date->hours = (date->hours % 10) | ((date->hours / 10) << 4);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	78da      	ldrb	r2, [r3, #3]
 8000282:	4b3a      	ldr	r3, [pc, #232]	; (800036c <Convert_to_BCD+0x168>)
 8000284:	fba3 1302 	umull	r1, r3, r3, r2
 8000288:	08d9      	lsrs	r1, r3, #3
 800028a:	460b      	mov	r3, r1
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	440b      	add	r3, r1
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	b2db      	uxtb	r3, r3
 8000296:	b25a      	sxtb	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	4933      	ldr	r1, [pc, #204]	; (800036c <Convert_to_BCD+0x168>)
 800029e:	fba1 1303 	umull	r1, r3, r1, r3
 80002a2:	08db      	lsrs	r3, r3, #3
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	011b      	lsls	r3, r3, #4
 80002a8:	b25b      	sxtb	r3, r3
 80002aa:	4313      	orrs	r3, r2
 80002ac:	b25b      	sxtb	r3, r3
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	70da      	strb	r2, [r3, #3]
	date->day = date->day;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791a      	ldrb	r2, [r3, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	711a      	strb	r2, [r3, #4]
	date->date = (date->date % 10) | ((date->date / 10) << 4);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	795a      	ldrb	r2, [r3, #5]
 80002c0:	4b2a      	ldr	r3, [pc, #168]	; (800036c <Convert_to_BCD+0x168>)
 80002c2:	fba3 1302 	umull	r1, r3, r3, r2
 80002c6:	08d9      	lsrs	r1, r3, #3
 80002c8:	460b      	mov	r3, r1
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	440b      	add	r3, r1
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	b25a      	sxtb	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	795b      	ldrb	r3, [r3, #5]
 80002da:	4924      	ldr	r1, [pc, #144]	; (800036c <Convert_to_BCD+0x168>)
 80002dc:	fba1 1303 	umull	r1, r3, r1, r3
 80002e0:	08db      	lsrs	r3, r3, #3
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	b25b      	sxtb	r3, r3
 80002e8:	4313      	orrs	r3, r2
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	715a      	strb	r2, [r3, #5]
	date->month = (date->month % 10) | ((date->month / 10) << 4);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	799a      	ldrb	r2, [r3, #6]
 80002f6:	4b1d      	ldr	r3, [pc, #116]	; (800036c <Convert_to_BCD+0x168>)
 80002f8:	fba3 1302 	umull	r1, r3, r3, r2
 80002fc:	08d9      	lsrs	r1, r3, #3
 80002fe:	460b      	mov	r3, r1
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	440b      	add	r3, r1
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	1ad3      	subs	r3, r2, r3
 8000308:	b2db      	uxtb	r3, r3
 800030a:	b25a      	sxtb	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	799b      	ldrb	r3, [r3, #6]
 8000310:	4916      	ldr	r1, [pc, #88]	; (800036c <Convert_to_BCD+0x168>)
 8000312:	fba1 1303 	umull	r1, r3, r1, r3
 8000316:	08db      	lsrs	r3, r3, #3
 8000318:	b2db      	uxtb	r3, r3
 800031a:	011b      	lsls	r3, r3, #4
 800031c:	b25b      	sxtb	r3, r3
 800031e:	4313      	orrs	r3, r2
 8000320:	b25b      	sxtb	r3, r3
 8000322:	b2da      	uxtb	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	719a      	strb	r2, [r3, #6]
	date->year = (date->year % 10) | ((date->year / 10) << 4);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	79da      	ldrb	r2, [r3, #7]
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <Convert_to_BCD+0x168>)
 800032e:	fba3 1302 	umull	r1, r3, r3, r2
 8000332:	08d9      	lsrs	r1, r3, #3
 8000334:	460b      	mov	r3, r1
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	440b      	add	r3, r1
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	b25a      	sxtb	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	79db      	ldrb	r3, [r3, #7]
 8000346:	4909      	ldr	r1, [pc, #36]	; (800036c <Convert_to_BCD+0x168>)
 8000348:	fba1 1303 	umull	r1, r3, r1, r3
 800034c:	08db      	lsrs	r3, r3, #3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	b25b      	sxtb	r3, r3
 8000354:	4313      	orrs	r3, r2
 8000356:	b25b      	sxtb	r3, r3
 8000358:	b2da      	uxtb	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	71da      	strb	r2, [r3, #7]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	cccccccd 	.word	0xcccccccd

08000370 <RTC_DS1307_Set_Date>:
	date->month = (date->month >> 4) * 10 + ((date->month << 4) >> 4);
	date->year = (date->year >> 4) * 10 + ((date->year << 4) >> 4);
}

uint8_t RTC_DS1307_Set_Date(ST_I2C_Config_t* i2c_config, ST_RTC_DS1307_Date_t* date)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	Convert_to_BCD(date);
 800037a:	6838      	ldr	r0, [r7, #0]
 800037c:	f7ff ff42 	bl	8000204 <Convert_to_BCD>

	/* set pointer register in RTC_DS1307 to first reg */
	date->RTC_Reg_Pointer = SECONDS_REG_ADDRESS;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	i2C_Master_Transmit_DMA(i2c_config, RTC_DS1307_ADDRESS, date, 8); // 8 because of the rtc_reg_pointer
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	2308      	movs	r3, #8
 800038a:	2168      	movs	r1, #104	; 0x68
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f001 fe49 	bl	8002024 <i2C_Master_Transmit_DMA>
}
 8000392:	bf00      	nop
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <DMA_Init>:

void(*DMA1_Callback[NUMBERS_OF_STREAMS][DMA_IT_FLAGS])(void) = { NULL };
void(*DMA2_Callback[NUMBERS_OF_STREAMS][DMA_IT_FLAGS])(void) = { NULL };

uint8_t DMA_Init(ST_DMA_config_t* DMA_config)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 80003a4:	2301      	movs	r3, #1
 80003a6:	73fb      	strb	r3, [r7, #15]
	uint16_t wait_time_out = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	81bb      	strh	r3, [r7, #12]

	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (DMA_config->DMA_controller) * 0x400);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	029b      	lsls	r3, r3, #10
 80003b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80003b6:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 80003ba:	60bb      	str	r3, [r7, #8]

	/* clear all flags , reset some configs */
	if (DMA_config->DMA_controller == DMA1 || DMA_config->DMA_controller == DMA2)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d003      	beq.n	80003cc <DMA_Init+0x30>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d112      	bne.n	80003f2 <DMA_Init+0x56>
	{
		/* clear flags */
		DMA_X->DMA_IFCR[0] = 0;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
		DMA_X->DMA_IFCR[1] = 0;
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
		/* reset SFCR register */
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR = 0;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	789b      	ldrb	r3, [r3, #2]
 80003dc:	4619      	mov	r1, r3
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	460b      	mov	r3, r1
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	440b      	add	r3, r1
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	4413      	add	r3, r2
 80003ea:	3324      	adds	r3, #36	; 0x24
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	e001      	b.n	80003f6 <DMA_Init+0x5a>
	}
	else
	{
		Local_u8_Error_State = DMA_SELECT_ERR;
 80003f2:	2316      	movs	r3, #22
 80003f4:	73fb      	strb	r3, [r7, #15]
	}

	/* disable the stream by clear EN , not allowd for config the stream when this bit is 1 */
	if (DMA_config->DMA_str_num < NUMBERS_OF_STREAMS)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	789b      	ldrb	r3, [r3, #2]
 80003fa:	2b07      	cmp	r3, #7
 80003fc:	d818      	bhi.n	8000430 <DMA_Init+0x94>
	{
		CLEAR_BIT(DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR, EN);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	4619      	mov	r1, r3
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	460b      	mov	r3, r1
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	440b      	add	r3, r1
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	4413      	add	r3, r2
 8000410:	3310      	adds	r3, #16
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	7892      	ldrb	r2, [r2, #2]
 8000418:	4610      	mov	r0, r2
 800041a:	f023 0201 	bic.w	r2, r3, #1
 800041e:	68b9      	ldr	r1, [r7, #8]
 8000420:	4603      	mov	r3, r0
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	4403      	add	r3, r0
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	440b      	add	r3, r1
 800042a:	3310      	adds	r3, #16
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	e00c      	b.n	800044a <DMA_Init+0xae>
	}
	else
	{
		Local_u8_Error_State = DMA_NUM_STREAM_ERR;
 8000430:	2317      	movs	r3, #23
 8000432:	73fb      	strb	r3, [r7, #15]
	}

	/*  Writing this bit to 0 is not immediately effective , wait for the EN bit to be cleared
	**  before starting any stream configuration ********************************************/
	while (CLEAR_BIT(DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR, EN) == 1)
 8000434:	e009      	b.n	800044a <DMA_Init+0xae>
	{
		if (wait_time_out >= STREAM_EN_TIMEOUT)
 8000436:	89bb      	ldrh	r3, [r7, #12]
 8000438:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800043c:	d302      	bcc.n	8000444 <DMA_Init+0xa8>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 800043e:	2304      	movs	r3, #4
 8000440:	73fb      	strb	r3, [r7, #15]
			break;
 8000442:	e01c      	b.n	800047e <DMA_Init+0xe2>
		}

		wait_time_out++;
 8000444:	89bb      	ldrh	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	81bb      	strh	r3, [r7, #12]
	while (CLEAR_BIT(DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR, EN) == 1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	4619      	mov	r1, r3
 8000450:	68ba      	ldr	r2, [r7, #8]
 8000452:	460b      	mov	r3, r1
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	440b      	add	r3, r1
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	4413      	add	r3, r2
 800045c:	3310      	adds	r3, #16
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7892      	ldrb	r2, [r2, #2]
 8000464:	4610      	mov	r0, r2
 8000466:	f023 0201 	bic.w	r2, r3, #1
 800046a:	68b9      	ldr	r1, [r7, #8]
 800046c:	4603      	mov	r3, r0
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4403      	add	r3, r0
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	440b      	add	r3, r1
 8000476:	3310      	adds	r3, #16
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	2a01      	cmp	r2, #1
 800047c:	d0db      	beq.n	8000436 <DMA_Init+0x9a>
	}

	/* set DMA channel */
	if ((DMA_config->DMA_ch_num >= CHANNEL0) && (DMA_config->DMA_ch_num <= CHANNEL7))
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	785b      	ldrb	r3, [r3, #1]
 8000482:	2b07      	cmp	r3, #7
 8000484:	d834      	bhi.n	80004f0 <DMA_Init+0x154>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_CHANNEL_MASK;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	789b      	ldrb	r3, [r3, #2]
 800048a:	4619      	mov	r1, r3
 800048c:	68ba      	ldr	r2, [r7, #8]
 800048e:	460b      	mov	r3, r1
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	440b      	add	r3, r1
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	4413      	add	r3, r2
 8000498:	3310      	adds	r3, #16
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7892      	ldrb	r2, [r2, #2]
 80004a0:	4610      	mov	r0, r2
 80004a2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80004a6:	68b9      	ldr	r1, [r7, #8]
 80004a8:	4603      	mov	r3, r0
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4403      	add	r3, r0
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	440b      	add	r3, r1
 80004b2:	3310      	adds	r3, #16
 80004b4:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_ch_num << CHSEL;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	789b      	ldrb	r3, [r3, #2]
 80004ba:	4619      	mov	r1, r3
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	460b      	mov	r3, r1
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	440b      	add	r3, r1
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	4413      	add	r3, r2
 80004c8:	3310      	adds	r3, #16
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7852      	ldrb	r2, [r2, #1]
 80004d0:	0652      	lsls	r2, r2, #25
 80004d2:	4611      	mov	r1, r2
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7892      	ldrb	r2, [r2, #2]
 80004d8:	4610      	mov	r0, r2
 80004da:	ea43 0201 	orr.w	r2, r3, r1
 80004de:	68b9      	ldr	r1, [r7, #8]
 80004e0:	4603      	mov	r3, r0
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4403      	add	r3, r0
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	440b      	add	r3, r1
 80004ea:	3310      	adds	r3, #16
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	e001      	b.n	80004f4 <DMA_Init+0x158>
	}
	else
	{
		Local_u8_Error_State = DMA_CHANNEL_ERR;
 80004f0:	231b      	movs	r3, #27
 80004f2:	73fb      	strb	r3, [r7, #15]
	}

	/* set stream priority */
	if (DMA_config->DMA_str_priority >= LOW_PRIORITY && DMA_config->DMA_str_priority <= VERY_HIGH_PRIORITY)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7a1b      	ldrb	r3, [r3, #8]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d834      	bhi.n	8000566 <DMA_Init+0x1ca>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_PL_MASK;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	789b      	ldrb	r3, [r3, #2]
 8000500:	4619      	mov	r1, r3
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	460b      	mov	r3, r1
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	440b      	add	r3, r1
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	4413      	add	r3, r2
 800050e:	3310      	adds	r3, #16
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	7892      	ldrb	r2, [r2, #2]
 8000516:	4610      	mov	r0, r2
 8000518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800051c:	68b9      	ldr	r1, [r7, #8]
 800051e:	4603      	mov	r3, r0
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	4403      	add	r3, r0
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	440b      	add	r3, r1
 8000528:	3310      	adds	r3, #16
 800052a:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_str_priority << PL;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	789b      	ldrb	r3, [r3, #2]
 8000530:	4619      	mov	r1, r3
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	460b      	mov	r3, r1
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	440b      	add	r3, r1
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	4413      	add	r3, r2
 800053e:	3310      	adds	r3, #16
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7a12      	ldrb	r2, [r2, #8]
 8000546:	0412      	lsls	r2, r2, #16
 8000548:	4611      	mov	r1, r2
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7892      	ldrb	r2, [r2, #2]
 800054e:	4610      	mov	r0, r2
 8000550:	ea43 0201 	orr.w	r2, r3, r1
 8000554:	68b9      	ldr	r1, [r7, #8]
 8000556:	4603      	mov	r3, r0
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4403      	add	r3, r0
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	440b      	add	r3, r1
 8000560:	3310      	adds	r3, #16
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	e001      	b.n	800056a <DMA_Init+0x1ce>
	}
	else
	{
		Local_u8_Error_State = DMA_STREAM_PRIORITY_ERR;
 8000566:	2319      	movs	r3, #25
 8000568:	73fb      	strb	r3, [r7, #15]
	}

	/* set DMA mode  direct & fifo */

	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR &= DMA_MODE_MASK;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	789b      	ldrb	r3, [r3, #2]
 800056e:	4619      	mov	r1, r3
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	460b      	mov	r3, r1
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	440b      	add	r3, r1
 8000578:	00db      	lsls	r3, r3, #3
 800057a:	4413      	add	r3, r2
 800057c:	3324      	adds	r3, #36	; 0x24
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7892      	ldrb	r2, [r2, #2]
 8000584:	4610      	mov	r0, r2
 8000586:	f023 0204 	bic.w	r2, r3, #4
 800058a:	68b9      	ldr	r1, [r7, #8]
 800058c:	4603      	mov	r3, r0
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4403      	add	r3, r0
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	440b      	add	r3, r1
 8000596:	3324      	adds	r3, #36	; 0x24
 8000598:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR |= DMA_config->DMA_mode << DMDIS;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	4619      	mov	r1, r3
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	460b      	mov	r3, r1
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	440b      	add	r3, r1
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	4413      	add	r3, r2
 80005ac:	3324      	adds	r3, #36	; 0x24
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7a52      	ldrb	r2, [r2, #9]
 80005b4:	0092      	lsls	r2, r2, #2
 80005b6:	4611      	mov	r1, r2
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	7892      	ldrb	r2, [r2, #2]
 80005bc:	4610      	mov	r0, r2
 80005be:	ea43 0201 	orr.w	r2, r3, r1
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4603      	mov	r3, r0
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4403      	add	r3, r0
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	440b      	add	r3, r1
 80005ce:	3324      	adds	r3, #36	; 0x24
 80005d0:	601a      	str	r2, [r3, #0]

	if (DMA_config->DMA_mode == FIFO_MODE)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7a5b      	ldrb	r3, [r3, #9]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d139      	bne.n	800064e <DMA_Init+0x2b2>
	{
		if (DMA_config->DMA_fifo_select >= QUARTER_FULL_FIFO && DMA_config->DMA_fifo_select <= FULL_FIFO)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7adb      	ldrb	r3, [r3, #11]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d833      	bhi.n	800064a <DMA_Init+0x2ae>
		{
			DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR &= DMA_FIFO_THRESHOLD_MASK;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	4619      	mov	r1, r3
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	460b      	mov	r3, r1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	440b      	add	r3, r1
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	4413      	add	r3, r2
 80005f4:	3324      	adds	r3, #36	; 0x24
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7892      	ldrb	r2, [r2, #2]
 80005fc:	4610      	mov	r0, r2
 80005fe:	f023 0203 	bic.w	r2, r3, #3
 8000602:	68b9      	ldr	r1, [r7, #8]
 8000604:	4603      	mov	r3, r0
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4403      	add	r3, r0
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	440b      	add	r3, r1
 800060e:	3324      	adds	r3, #36	; 0x24
 8000610:	601a      	str	r2, [r3, #0]
			DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SFCR |= DMA_config->DMA_fifo_select << FTH;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	4619      	mov	r1, r3
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	460b      	mov	r3, r1
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	440b      	add	r3, r1
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	4413      	add	r3, r2
 8000624:	3324      	adds	r3, #36	; 0x24
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7ad2      	ldrb	r2, [r2, #11]
 800062c:	4611      	mov	r1, r2
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	7892      	ldrb	r2, [r2, #2]
 8000632:	4610      	mov	r0, r2
 8000634:	ea43 0201 	orr.w	r2, r3, r1
 8000638:	68b9      	ldr	r1, [r7, #8]
 800063a:	4603      	mov	r3, r0
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4403      	add	r3, r0
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	440b      	add	r3, r1
 8000644:	3324      	adds	r3, #36	; 0x24
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	e001      	b.n	800064e <DMA_Init+0x2b2>
		}
		else
		{
			Local_u8_Error_State = DMA_FIFO_THRESHOLD_ERR;
 800064a:	231a      	movs	r3, #26
 800064c:	73fb      	strb	r3, [r7, #15]
		}
	}

	/* set DMA Direction */
	if (DMA_config->DMA_dir == P2M || DMA_config->DMA_dir == M2P || DMA_config->DMA_dir == M2M)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d007      	beq.n	8000666 <DMA_Init+0x2ca>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	78db      	ldrb	r3, [r3, #3]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d003      	beq.n	8000666 <DMA_Init+0x2ca>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	78db      	ldrb	r3, [r3, #3]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d134      	bne.n	80006d0 <DMA_Init+0x334>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_DIR_MASK;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	4619      	mov	r1, r3
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	460b      	mov	r3, r1
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	440b      	add	r3, r1
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	3310      	adds	r3, #16
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7892      	ldrb	r2, [r2, #2]
 8000680:	4610      	mov	r0, r2
 8000682:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000686:	68b9      	ldr	r1, [r7, #8]
 8000688:	4603      	mov	r3, r0
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4403      	add	r3, r0
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	440b      	add	r3, r1
 8000692:	3310      	adds	r3, #16
 8000694:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_dir << DIR;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	789b      	ldrb	r3, [r3, #2]
 800069a:	4619      	mov	r1, r3
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	460b      	mov	r3, r1
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	440b      	add	r3, r1
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4413      	add	r3, r2
 80006a8:	3310      	adds	r3, #16
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	78d2      	ldrb	r2, [r2, #3]
 80006b0:	0192      	lsls	r2, r2, #6
 80006b2:	4611      	mov	r1, r2
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	7892      	ldrb	r2, [r2, #2]
 80006b8:	4610      	mov	r0, r2
 80006ba:	ea43 0201 	orr.w	r2, r3, r1
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	4603      	mov	r3, r0
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4403      	add	r3, r0
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	440b      	add	r3, r1
 80006ca:	3310      	adds	r3, #16
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e001      	b.n	80006d4 <DMA_Init+0x338>
	}
	else
	{
		Local_u8_Error_State = DMA_DIR_ERR;
 80006d0:	231c      	movs	r3, #28
 80006d2:	73fb      	strb	r3, [r7, #15]
	}

	/* set memmory increment */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_MEM_INC_MASK;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	4619      	mov	r1, r3
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	460b      	mov	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	440b      	add	r3, r1
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	3310      	adds	r3, #16
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	7892      	ldrb	r2, [r2, #2]
 80006ee:	4610      	mov	r0, r2
 80006f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	4603      	mov	r3, r0
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4403      	add	r3, r0
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	440b      	add	r3, r1
 8000700:	3310      	adds	r3, #16
 8000702:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_mem_inc << MINC;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	4619      	mov	r1, r3
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	460b      	mov	r3, r1
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	440b      	add	r3, r1
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	4413      	add	r3, r2
 8000716:	3310      	adds	r3, #16
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	7992      	ldrb	r2, [r2, #6]
 800071e:	0292      	lsls	r2, r2, #10
 8000720:	4611      	mov	r1, r2
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7892      	ldrb	r2, [r2, #2]
 8000726:	4610      	mov	r0, r2
 8000728:	ea43 0201 	orr.w	r2, r3, r1
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	4603      	mov	r3, r0
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4403      	add	r3, r0
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3310      	adds	r3, #16
 800073a:	601a      	str	r2, [r3, #0]

	/* set peripheral increment */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_PERIPH_INC_MASK;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	4619      	mov	r1, r3
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	460b      	mov	r3, r1
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	440b      	add	r3, r1
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	4413      	add	r3, r2
 800074e:	3310      	adds	r3, #16
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7892      	ldrb	r2, [r2, #2]
 8000756:	4610      	mov	r0, r2
 8000758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	4603      	mov	r3, r0
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4403      	add	r3, r0
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	440b      	add	r3, r1
 8000768:	3310      	adds	r3, #16
 800076a:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_p_inc << PINC;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	789b      	ldrb	r3, [r3, #2]
 8000770:	4619      	mov	r1, r3
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	460b      	mov	r3, r1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	440b      	add	r3, r1
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	4413      	add	r3, r2
 800077e:	3310      	adds	r3, #16
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	79d2      	ldrb	r2, [r2, #7]
 8000786:	0252      	lsls	r2, r2, #9
 8000788:	4611      	mov	r1, r2
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	7892      	ldrb	r2, [r2, #2]
 800078e:	4610      	mov	r0, r2
 8000790:	ea43 0201 	orr.w	r2, r3, r1
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	4603      	mov	r3, r0
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4403      	add	r3, r0
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3310      	adds	r3, #16
 80007a2:	601a      	str	r2, [r3, #0]


	/* set memmory allignment */
	if (DMA_config->DMA_mem_allign == BYTE || DMA_config->DMA_mem_allign == HALF_WORD || DMA_config->DMA_mem_allign == WORD)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d007      	beq.n	80007bc <DMA_Init+0x420>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d003      	beq.n	80007bc <DMA_Init+0x420>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d134      	bne.n	8000826 <DMA_Init+0x48a>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_MEM_SIZE_MASK;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	4619      	mov	r1, r3
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	460b      	mov	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	440b      	add	r3, r1
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	4413      	add	r3, r2
 80007ce:	3310      	adds	r3, #16
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7892      	ldrb	r2, [r2, #2]
 80007d6:	4610      	mov	r0, r2
 80007d8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	4603      	mov	r3, r0
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4403      	add	r3, r0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	3310      	adds	r3, #16
 80007ea:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_mem_allign << MSIZE;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	789b      	ldrb	r3, [r3, #2]
 80007f0:	4619      	mov	r1, r3
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	460b      	mov	r3, r1
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	440b      	add	r3, r1
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	4413      	add	r3, r2
 80007fe:	3310      	adds	r3, #16
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	7912      	ldrb	r2, [r2, #4]
 8000806:	0352      	lsls	r2, r2, #13
 8000808:	4611      	mov	r1, r2
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	7892      	ldrb	r2, [r2, #2]
 800080e:	4610      	mov	r0, r2
 8000810:	ea43 0201 	orr.w	r2, r3, r1
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	4603      	mov	r3, r0
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4403      	add	r3, r0
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3310      	adds	r3, #16
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e001      	b.n	800082a <DMA_Init+0x48e>
	}
	else
	{
		Local_u8_Error_State = DMA_MEM_ALLIGN_ERR;
 8000826:	231d      	movs	r3, #29
 8000828:	73fb      	strb	r3, [r7, #15]
	}

	/* set peripheral allignment */
	if (DMA_config->DMA_mem_allign == BYTE || DMA_config->DMA_mem_allign == HALF_WORD || DMA_config->DMA_mem_allign == WORD)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d007      	beq.n	8000842 <DMA_Init+0x4a6>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d003      	beq.n	8000842 <DMA_Init+0x4a6>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d134      	bne.n	80008ac <DMA_Init+0x510>
	{
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_PERIPH_SIZE_MASK;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	4619      	mov	r1, r3
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	460b      	mov	r3, r1
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	440b      	add	r3, r1
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4413      	add	r3, r2
 8000854:	3310      	adds	r3, #16
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	7892      	ldrb	r2, [r2, #2]
 800085c:	4610      	mov	r0, r2
 800085e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	4603      	mov	r3, r0
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4403      	add	r3, r0
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	440b      	add	r3, r1
 800086e:	3310      	adds	r3, #16
 8000870:	601a      	str	r2, [r3, #0]
		DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_p_allign << PSIZE;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	4619      	mov	r1, r3
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	460b      	mov	r3, r1
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	440b      	add	r3, r1
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	4413      	add	r3, r2
 8000884:	3310      	adds	r3, #16
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7952      	ldrb	r2, [r2, #5]
 800088c:	02d2      	lsls	r2, r2, #11
 800088e:	4611      	mov	r1, r2
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	7892      	ldrb	r2, [r2, #2]
 8000894:	4610      	mov	r0, r2
 8000896:	ea43 0201 	orr.w	r2, r3, r1
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	4603      	mov	r3, r0
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4403      	add	r3, r0
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	440b      	add	r3, r1
 80008a6:	3310      	adds	r3, #16
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e001      	b.n	80008b0 <DMA_Init+0x514>
	}
	else
	{
		Local_u8_Error_State = DMA_PERIPH_ALLIGN_ERR;
 80008ac:	231e      	movs	r3, #30
 80008ae:	73fb      	strb	r3, [r7, #15]
	}


	/* set enable & disable circular mode */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_CIRCULAR_MODE_MASK;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	789b      	ldrb	r3, [r3, #2]
 80008b4:	4619      	mov	r1, r3
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	4413      	add	r3, r2
 80008c2:	3310      	adds	r3, #16
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	7892      	ldrb	r2, [r2, #2]
 80008ca:	4610      	mov	r0, r2
 80008cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	4603      	mov	r3, r0
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4403      	add	r3, r0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3310      	adds	r3, #16
 80008de:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= DMA_config->DMA_Circular_mode << CIRC;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	4619      	mov	r1, r3
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	460b      	mov	r3, r1
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	440b      	add	r3, r1
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	3310      	adds	r3, #16
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	7a92      	ldrb	r2, [r2, #10]
 80008fa:	0212      	lsls	r2, r2, #8
 80008fc:	4611      	mov	r1, r2
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	7892      	ldrb	r2, [r2, #2]
 8000902:	4610      	mov	r0, r2
 8000904:	ea43 0201 	orr.w	r2, r3, r1
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	4603      	mov	r3, r0
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4403      	add	r3, r0
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	440b      	add	r3, r1
 8000914:	3310      	adds	r3, #16
 8000916:	601a      	str	r2, [r3, #0]

	/* enable & disable interrupts */
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR &= DMA_IT_TYPES_MASK;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	4619      	mov	r1, r3
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	460b      	mov	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	440b      	add	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4413      	add	r3, r2
 800092a:	3310      	adds	r3, #16
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	7892      	ldrb	r2, [r2, #2]
 8000932:	4610      	mov	r0, r2
 8000934:	f023 021e 	bic.w	r2, r3, #30
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	4603      	mov	r3, r0
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4403      	add	r3, r0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	440b      	add	r3, r1
 8000944:	3310      	adds	r3, #16
 8000946:	601a      	str	r2, [r3, #0]
	DMA_X->DMA_Stream[DMA_config->DMA_str_num].DMA_SCR |= (DMA_config->DMA_IT_State.Direct_Mode_Error_IT << DMEIE) | (DMA_config->DMA_IT_State.Transfer_Error_IT << TEIE) | (DMA_config->DMA_IT_State.Half_Transfer_IT << HTIE) | (DMA_config->DMA_IT_State.Transfer_Complete_IT << TCIE);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	4619      	mov	r1, r3
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	460b      	mov	r3, r1
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	440b      	add	r3, r1
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	3310      	adds	r3, #16
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	7c12      	ldrb	r2, [r2, #16]
 8000962:	0051      	lsls	r1, r2, #1
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7b92      	ldrb	r2, [r2, #14]
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	4311      	orrs	r1, r2
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7b52      	ldrb	r2, [r2, #13]
 8000970:	00d2      	lsls	r2, r2, #3
 8000972:	4311      	orrs	r1, r2
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7b12      	ldrb	r2, [r2, #12]
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	430a      	orrs	r2, r1
 800097c:	4611      	mov	r1, r2
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	7892      	ldrb	r2, [r2, #2]
 8000982:	4610      	mov	r0, r2
 8000984:	ea43 0201 	orr.w	r2, r3, r1
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	4603      	mov	r3, r0
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4403      	add	r3, r0
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	3310      	adds	r3, #16
 8000996:	601a      	str	r2, [r3, #0]




	return Local_u8_Error_State;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <DMA_Set_Callback>:

	return Local_u8_Error_State;
}

uint8_t DMA_Set_Callback(ST_DMA_config_t* DMA_config, EN_DMA_IT_Type_t DMA_IT_type)
{
 80009a8:	b490      	push	{r4, r7}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t Local_u8_Error_State = OK;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]

	if (DMA_config->DMA_CallBackFun != NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3314      	adds	r3, #20
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d02e      	beq.n	8000a1e <DMA_Set_Callback+0x76>
	{
		if (DMA_config->DMA_controller == DMA1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d111      	bne.n	80009ec <DMA_Set_Callback+0x44>
		{
			DMA1_Callback[DMA_config->DMA_str_num][DMA_IT_type] = DMA_config->DMA_CallBackFun[DMA_IT_type];
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	7892      	ldrb	r2, [r2, #2]
 80009ce:	4614      	mov	r4, r2
 80009d0:	78f9      	ldrb	r1, [r7, #3]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	3304      	adds	r3, #4
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	4814      	ldr	r0, [pc, #80]	; (8000a30 <DMA_Set_Callback+0x88>)
 80009de:	4623      	mov	r3, r4
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4423      	add	r3, r4
 80009e4:	440b      	add	r3, r1
 80009e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80009ea:	e01a      	b.n	8000a22 <DMA_Set_Callback+0x7a>
		}
		else if (DMA_config->DMA_controller == DMA2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d111      	bne.n	8000a18 <DMA_Set_Callback+0x70>
		{
			DMA2_Callback[DMA_config->DMA_str_num][DMA_IT_type] = DMA_config->DMA_CallBackFun[DMA_IT_type];
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	7892      	ldrb	r2, [r2, #2]
 80009fa:	4614      	mov	r4, r2
 80009fc:	78f9      	ldrb	r1, [r7, #3]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	3304      	adds	r3, #4
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	480a      	ldr	r0, [pc, #40]	; (8000a34 <DMA_Set_Callback+0x8c>)
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4423      	add	r3, r4
 8000a10:	440b      	add	r3, r1
 8000a12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8000a16:	e004      	b.n	8000a22 <DMA_Set_Callback+0x7a>
		}
		else
		{
			Local_u8_Error_State = DMA_SELECT_ERR;
 8000a18:	2316      	movs	r3, #22
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e001      	b.n	8000a22 <DMA_Set_Callback+0x7a>
		}

	}
	else
	{
		Local_u8_Error_State = NULL_PTR_ERR;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc90      	pop	{r4, r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000028 	.word	0x20000028
 8000a34:	200000c8 	.word	0x200000c8

08000a38 <DMA_Get_Flags_State>:

static uint8_t DMA_Get_Flags_State(EN_DMA_Controller_t DMA_type, EN_DMA_Stream_t stram_num, ST_DMA_IT_FLAGS_State_t* Flags_state)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	603a      	str	r2, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	460b      	mov	r3, r1
 8000a46:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8_Error_State = OK;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	75fb      	strb	r3, [r7, #23]

	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (DMA_type) * 0x400);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	029b      	lsls	r3, r3, #10
 8000a50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a54:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 8000a58:	613b      	str	r3, [r7, #16]

	uint8_t loc_stream_num = stram_num % 4;
 8000a5a:	79bb      	ldrb	r3, [r7, #6]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	73fb      	strb	r3, [r7, #15]
	if ((loc_stream_num == 0) || (loc_stream_num == 1))
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <DMA_Get_Flags_State+0x38>
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	f040 80fe 	bne.w	8000c6c <DMA_Get_Flags_State+0x234>
	{
		Flags_state->FIFO_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (FEIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SFCR, FEIE);
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a7e:	7bfa      	ldrb	r2, [r7, #15]
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	4019      	ands	r1, r3
 8000a90:	7bfa      	ldrb	r2, [r7, #15]
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00e      	beq.n	8000ac0 <DMA_Get_Flags_State+0x88>
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	6939      	ldr	r1, [r7, #16]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	440b      	add	r3, r1
 8000ab0:	3324      	adds	r3, #36	; 0x24
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <DMA_Get_Flags_State+0x88>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <DMA_Get_Flags_State+0x8a>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	b2d9      	uxtb	r1, r3
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	7813      	ldrb	r3, [r2, #0]
 8000acc:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ad0:	7013      	strb	r3, [r2, #0]
		Flags_state->Direct_Mode_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (DMEIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, DMEIE);
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ae0:	7bfa      	ldrb	r2, [r7, #15]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	3302      	adds	r3, #2
 8000aec:	2201      	movs	r2, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	4019      	ands	r1, r3
 8000af4:	7bfa      	ldrb	r2, [r7, #15]
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	3302      	adds	r3, #2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00e      	beq.n	8000b26 <DMA_Get_Flags_State+0xee>
 8000b08:	79ba      	ldrb	r2, [r7, #6]
 8000b0a:	6939      	ldr	r1, [r7, #16]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	440b      	add	r3, r1
 8000b16:	3310      	adds	r3, #16
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <DMA_Get_Flags_State+0xee>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <DMA_Get_Flags_State+0xf0>
 8000b26:	2300      	movs	r3, #0
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	b2d9      	uxtb	r1, r3
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	7813      	ldrb	r3, [r2, #0]
 8000b32:	f361 1304 	bfi	r3, r1, #4, #1
 8000b36:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TEIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TEIE);
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	3303      	adds	r3, #3
 8000b52:	2201      	movs	r2, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	4019      	ands	r1, r3
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	3303      	adds	r3, #3
 8000b66:	fa21 f303 	lsr.w	r3, r1, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00e      	beq.n	8000b8c <DMA_Get_Flags_State+0x154>
 8000b6e:	79ba      	ldrb	r2, [r7, #6]
 8000b70:	6939      	ldr	r1, [r7, #16]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3310      	adds	r3, #16
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <DMA_Get_Flags_State+0x154>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <DMA_Get_Flags_State+0x156>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	b2d9      	uxtb	r1, r3
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	7813      	ldrb	r3, [r2, #0]
 8000b98:	f361 0382 	bfi	r3, r1, #2, #1
 8000b9c:	7013      	strb	r3, [r2, #0]
		Flags_state->Half_Transfer_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (HTIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, HTIE);
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	4019      	ands	r1, r3
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	3304      	adds	r3, #4
 8000bcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00e      	beq.n	8000bf2 <DMA_Get_Flags_State+0x1ba>
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	6939      	ldr	r1, [r7, #16]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	440b      	add	r3, r1
 8000be2:	3310      	adds	r3, #16
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <DMA_Get_Flags_State+0x1ba>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <DMA_Get_Flags_State+0x1bc>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	b2d9      	uxtb	r1, r3
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	7813      	ldrb	r3, [r2, #0]
 8000bfe:	f361 0341 	bfi	r3, r1, #1, #1
 8000c02:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Complete_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TCIF0 + loc_stream_num * 6)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TCIE);
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c12:	7bfa      	ldrb	r2, [r7, #15]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	3305      	adds	r3, #5
 8000c1e:	2201      	movs	r2, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	4019      	ands	r1, r3
 8000c26:	7bfa      	ldrb	r2, [r7, #15]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	3305      	adds	r3, #5
 8000c32:	fa21 f303 	lsr.w	r3, r1, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00e      	beq.n	8000c58 <DMA_Get_Flags_State+0x220>
 8000c3a:	79ba      	ldrb	r2, [r7, #6]
 8000c3c:	6939      	ldr	r1, [r7, #16]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3310      	adds	r3, #16
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <DMA_Get_Flags_State+0x220>
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <DMA_Get_Flags_State+0x222>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b2d9      	uxtb	r1, r3
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	7813      	ldrb	r3, [r2, #0]
 8000c64:	f361 0300 	bfi	r3, r1, #0, #1
 8000c68:	7013      	strb	r3, [r2, #0]
 8000c6a:	e109      	b.n	8000e80 <DMA_Get_Flags_State+0x448>
	}
	else if (loc_stream_num == 2)
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	f040 80b0 	bne.w	8000dd4 <DMA_Get_Flags_State+0x39c>
	{
		Flags_state->FIFO_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (FEIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SFCR, FEIE);
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00e      	beq.n	8000ca8 <DMA_Get_Flags_State+0x270>
 8000c8a:	79ba      	ldrb	r2, [r7, #6]
 8000c8c:	6939      	ldr	r1, [r7, #16]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	440b      	add	r3, r1
 8000c98:	3324      	adds	r3, #36	; 0x24
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <DMA_Get_Flags_State+0x270>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <DMA_Get_Flags_State+0x272>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	b2d9      	uxtb	r1, r3
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	7813      	ldrb	r3, [r2, #0]
 8000cb4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cb8:	7013      	strb	r3, [r2, #0]
		Flags_state->Direct_Mode_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (DMEIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, DMEIE);
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00e      	beq.n	8000cee <DMA_Get_Flags_State+0x2b6>
 8000cd0:	79ba      	ldrb	r2, [r7, #6]
 8000cd2:	6939      	ldr	r1, [r7, #16]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3310      	adds	r3, #16
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <DMA_Get_Flags_State+0x2b6>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <DMA_Get_Flags_State+0x2b8>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	b2d9      	uxtb	r1, r3
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	7813      	ldrb	r3, [r2, #0]
 8000cfa:	f361 1304 	bfi	r3, r1, #4, #1
 8000cfe:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TEIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TEIE);
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00e      	beq.n	8000d34 <DMA_Get_Flags_State+0x2fc>
 8000d16:	79ba      	ldrb	r2, [r7, #6]
 8000d18:	6939      	ldr	r1, [r7, #16]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <DMA_Get_Flags_State+0x2fc>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <DMA_Get_Flags_State+0x2fe>
 8000d34:	2300      	movs	r3, #0
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	b2d9      	uxtb	r1, r3
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	7813      	ldrb	r3, [r2, #0]
 8000d40:	f361 0382 	bfi	r3, r1, #2, #1
 8000d44:	7013      	strb	r3, [r2, #0]
		Flags_state->Half_Transfer_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (HTIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, HTIE);
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00e      	beq.n	8000d7a <DMA_Get_Flags_State+0x342>
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	6939      	ldr	r1, [r7, #16]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	3310      	adds	r3, #16
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <DMA_Get_Flags_State+0x342>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <DMA_Get_Flags_State+0x344>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2d9      	uxtb	r1, r3
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	7813      	ldrb	r3, [r2, #0]
 8000d86:	f361 0341 	bfi	r3, r1, #1, #1
 8000d8a:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Complete_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TCIF0 + 16)) && READ_BIT(DMA_X->DMA_Stream[stram_num].DMA_SCR, TCIE);
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00e      	beq.n	8000dc0 <DMA_Get_Flags_State+0x388>
 8000da2:	79ba      	ldrb	r2, [r7, #6]
 8000da4:	6939      	ldr	r1, [r7, #16]
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	3310      	adds	r3, #16
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0310 	and.w	r3, r3, #16
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <DMA_Get_Flags_State+0x388>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <DMA_Get_Flags_State+0x38a>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	b2d9      	uxtb	r1, r3
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	7813      	ldrb	r3, [r2, #0]
 8000dcc:	f361 0300 	bfi	r3, r1, #0, #1
 8000dd0:	7013      	strb	r3, [r2, #0]
 8000dd2:	e055      	b.n	8000e80 <DMA_Get_Flags_State+0x448>
	}
	else if (loc_stream_num == 3)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d150      	bne.n	8000e7c <DMA_Get_Flags_State+0x444>
	{
		Flags_state->FIFO_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (FEIF0 + 22));
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	0d9b      	lsrs	r3, r3, #22
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b2d9      	uxtb	r1, r3
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	7813      	ldrb	r3, [r2, #0]
 8000df4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000df8:	7013      	strb	r3, [r2, #0]
		Flags_state->Direct_Mode_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (DMEIF0 + 22));
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	0e1b      	lsrs	r3, r3, #24
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	b2d9      	uxtb	r1, r3
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	7813      	ldrb	r3, [r2, #0]
 8000e14:	f361 1304 	bfi	r3, r1, #4, #1
 8000e18:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Error_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TEIF0 + 22));
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	0e5b      	lsrs	r3, r3, #25
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2d9      	uxtb	r1, r3
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	7813      	ldrb	r3, [r2, #0]
 8000e34:	f361 0382 	bfi	r3, r1, #2, #1
 8000e38:	7013      	strb	r3, [r2, #0]
		Flags_state->Half_Transfer_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (HTIF0 + 22));
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	0e9b      	lsrs	r3, r3, #26
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	b2d9      	uxtb	r1, r3
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	7813      	ldrb	r3, [r2, #0]
 8000e54:	f361 0341 	bfi	r3, r1, #1, #1
 8000e58:	7013      	strb	r3, [r2, #0]
		Flags_state->Transfer_Complete_Flag = READ_BIT(DMA_X->DMA_ISR[stram_num / 4], (TCIF0 + 22));
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e68:	0edb      	lsrs	r3, r3, #27
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	b2d9      	uxtb	r1, r3
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	7813      	ldrb	r3, [r2, #0]
 8000e74:	f361 0300 	bfi	r3, r1, #0, #1
 8000e78:	7013      	strb	r3, [r2, #0]
 8000e7a:	e001      	b.n	8000e80 <DMA_Get_Flags_State+0x448>
	}
	else
	{
		Local_u8_Error_State = DMA_NUM_STREAM_ERR;
 8000e7c:	2317      	movs	r3, #23
 8000e7e:	75fb      	strb	r3, [r7, #23]
	}

	return Local_u8_Error_State;
 8000e80:	7dfb      	ldrb	r3, [r7, #23]


}
 8000e82:	4618      	mov	r0, r3
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <DMA_Clear_IT_Flag>:


uint8_t DMA_Clear_IT_Flag(EN_DMA_Controller_t DMA_type, EN_DMA_Stream_t stram_num, EN_DMA_IT_Type_t IT_type)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	71bb      	strb	r3, [r7, #6]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8_Error_State = OK;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]

	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (DMA_type) * 0x400);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	029b      	lsls	r3, r3, #10
 8000eaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eae:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 8000eb2:	613b      	str	r3, [r7, #16]

	uint8_t loc_stream_num_div = stram_num / 4;
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	73fb      	strb	r3, [r7, #15]
	uint8_t loc_stream_num_rem = stram_num % 4;
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	73bb      	strb	r3, [r7, #14]

	if ((loc_stream_num_rem == 0) || (loc_stream_num_rem == 1))
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <DMA_Clear_IT_Flag+0x3e>
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d167      	bne.n	8000f9e <DMA_Clear_IT_Flag+0x10e>
	{
		switch (IT_type)
 8000ece:	797b      	ldrb	r3, [r7, #5]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d861      	bhi.n	8000f98 <DMA_Clear_IT_Flag+0x108>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <DMA_Clear_IT_Flag+0x4c>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000f1b 	.word	0x08000f1b
 8000ee4:	08000f45 	.word	0x08000f45
 8000ee8:	08000f99 	.word	0x08000f99
 8000eec:	08000f6f 	.word	0x08000f6f
		{
		case Transfer_Complete_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTCIF0 + loc_stream_num_rem * 6));
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	3202      	adds	r2, #2
 8000ef6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000efa:	7bba      	ldrb	r2, [r7, #14]
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	3305      	adds	r3, #5
 8000f06:	2201      	movs	r2, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	4319      	orrs	r1, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	3202      	adds	r2, #2
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f18:	e042      	b.n	8000fa0 <DMA_Clear_IT_Flag+0x110>
		case Half_Transfer_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CHTIF0 + loc_stream_num_rem * 6));
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	3202      	adds	r2, #2
 8000f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f24:	7bba      	ldrb	r2, [r7, #14]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	3304      	adds	r3, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	4319      	orrs	r1, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	3202      	adds	r2, #2
 8000f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f42:	e02d      	b.n	8000fa0 <DMA_Clear_IT_Flag+0x110>
		case Transfer_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTEIF0 + loc_stream_num_rem * 6));
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3202      	adds	r2, #2
 8000f4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f4e:	7bba      	ldrb	r2, [r7, #14]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	3303      	adds	r3, #3
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	4319      	orrs	r1, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3202      	adds	r2, #2
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f6c:	e018      	b.n	8000fa0 <DMA_Clear_IT_Flag+0x110>
		case Direct_Mode_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CDMEIF0 + loc_stream_num_rem * 6));
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	3202      	adds	r2, #2
 8000f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f78:	7bba      	ldrb	r2, [r7, #14]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	3302      	adds	r3, #2
 8000f84:	2201      	movs	r2, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3202      	adds	r2, #2
 8000f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000f96:	e003      	b.n	8000fa0 <DMA_Clear_IT_Flag+0x110>
		default:
			Local_u8_Error_State = DMA_IT_TYPES_ERR;
 8000f98:	231f      	movs	r3, #31
 8000f9a:	75fb      	strb	r3, [r7, #23]
 8000f9c:	e000      	b.n	8000fa0 <DMA_Clear_IT_Flag+0x110>
		}
	}
 8000f9e:	bf00      	nop

	if (loc_stream_num_rem == 2)
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d15f      	bne.n	8001066 <DMA_Clear_IT_Flag+0x1d6>
	{
		switch (IT_type)
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d859      	bhi.n	8001060 <DMA_Clear_IT_Flag+0x1d0>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <DMA_Clear_IT_Flag+0x124>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc9 	.word	0x08000fc9
 8000fb8:	08000fef 	.word	0x08000fef
 8000fbc:	08001015 	.word	0x08001015
 8000fc0:	08001061 	.word	0x08001061
 8000fc4:	0800103b 	.word	0x0800103b
		{
		case Transfer_Complete_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTCIF0 + loc_stream_num_rem * 16));
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3202      	adds	r2, #2
 8000fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd2:	7bba      	ldrb	r2, [r7, #14]
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	3205      	adds	r2, #5
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	4611      	mov	r1, r2
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4319      	orrs	r1, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3202      	adds	r2, #2
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8000fec:	e03c      	b.n	8001068 <DMA_Clear_IT_Flag+0x1d8>
		case Half_Transfer_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CHTIF0 + loc_stream_num_rem * 16));
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3202      	adds	r2, #2
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	7bba      	ldrb	r2, [r7, #14]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	3204      	adds	r2, #4
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	4611      	mov	r1, r2
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	4319      	orrs	r1, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3202      	adds	r2, #2
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8001012:	e029      	b.n	8001068 <DMA_Clear_IT_Flag+0x1d8>
		case Transfer_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTEIF0 + loc_stream_num_rem * 16));
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	3202      	adds	r2, #2
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	7bba      	ldrb	r2, [r7, #14]
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	3203      	adds	r2, #3
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	4611      	mov	r1, r2
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	4319      	orrs	r1, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	3202      	adds	r2, #2
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8001038:	e016      	b.n	8001068 <DMA_Clear_IT_Flag+0x1d8>
		case Direct_Mode_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CDMEIF0 + loc_stream_num_rem * 16));
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	3202      	adds	r2, #2
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	7bba      	ldrb	r2, [r7, #14]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	3202      	adds	r2, #2
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	4611      	mov	r1, r2
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	4319      	orrs	r1, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	3202      	adds	r2, #2
 800105a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 800105e:	e003      	b.n	8001068 <DMA_Clear_IT_Flag+0x1d8>
		default:
			Local_u8_Error_State = DMA_IT_TYPES_ERR;
 8001060:	231f      	movs	r3, #31
 8001062:	75fb      	strb	r3, [r7, #23]
 8001064:	e000      	b.n	8001068 <DMA_Clear_IT_Flag+0x1d8>
		}
	}
 8001066:	bf00      	nop

	if (loc_stream_num_rem == 3)
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d167      	bne.n	800113e <DMA_Clear_IT_Flag+0x2ae>
	{
		switch (IT_type)
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	2b04      	cmp	r3, #4
 8001072:	d861      	bhi.n	8001138 <DMA_Clear_IT_Flag+0x2a8>
 8001074:	a201      	add	r2, pc, #4	; (adr r2, 800107c <DMA_Clear_IT_Flag+0x1ec>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	08001091 	.word	0x08001091
 8001080:	080010bb 	.word	0x080010bb
 8001084:	080010e5 	.word	0x080010e5
 8001088:	08001139 	.word	0x08001139
 800108c:	0800110f 	.word	0x0800110f
		{
		case Transfer_Complete_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTCIF0 + loc_stream_num_rem * 22));
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	3202      	adds	r2, #2
 8001096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109a:	7bba      	ldrb	r2, [r7, #14]
 800109c:	2116      	movs	r1, #22
 800109e:	fb01 f202 	mul.w	r2, r1, r2
 80010a2:	3205      	adds	r2, #5
 80010a4:	2101      	movs	r1, #1
 80010a6:	fa01 f202 	lsl.w	r2, r1, r2
 80010aa:	4611      	mov	r1, r2
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	4319      	orrs	r1, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	3202      	adds	r2, #2
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 80010b8:	e042      	b.n	8001140 <DMA_Clear_IT_Flag+0x2b0>
		case Half_Transfer_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CHTIF0 + loc_stream_num_rem * 22));
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3202      	adds	r2, #2
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	7bba      	ldrb	r2, [r7, #14]
 80010c6:	2116      	movs	r1, #22
 80010c8:	fb01 f202 	mul.w	r2, r1, r2
 80010cc:	3204      	adds	r2, #4
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	4611      	mov	r1, r2
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	4319      	orrs	r1, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3202      	adds	r2, #2
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 80010e2:	e02d      	b.n	8001140 <DMA_Clear_IT_Flag+0x2b0>
		case Transfer_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CTEIF0 + loc_stream_num_rem * 22));
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	3202      	adds	r2, #2
 80010ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ee:	7bba      	ldrb	r2, [r7, #14]
 80010f0:	2116      	movs	r1, #22
 80010f2:	fb01 f202 	mul.w	r2, r1, r2
 80010f6:	3203      	adds	r2, #3
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	4611      	mov	r1, r2
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	4319      	orrs	r1, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	3202      	adds	r2, #2
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 800110c:	e018      	b.n	8001140 <DMA_Clear_IT_Flag+0x2b0>
		case Direct_Mode_Error_ID:
			SET_BIT(DMA_X->DMA_IFCR[loc_stream_num_div], (CDMEIF0 + loc_stream_num_rem * 22));
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	3202      	adds	r2, #2
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	7bba      	ldrb	r2, [r7, #14]
 800111a:	2116      	movs	r1, #22
 800111c:	fb01 f202 	mul.w	r2, r1, r2
 8001120:	3202      	adds	r2, #2
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	4611      	mov	r1, r2
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	4319      	orrs	r1, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	3202      	adds	r2, #2
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8001136:	e003      	b.n	8001140 <DMA_Clear_IT_Flag+0x2b0>
		default:
			Local_u8_Error_State = DMA_IT_TYPES_ERR;
 8001138:	231f      	movs	r3, #31
 800113a:	75fb      	strb	r3, [r7, #23]
 800113c:	e000      	b.n	8001140 <DMA_Clear_IT_Flag+0x2b0>
		}
	}
 800113e:	bf00      	nop

	return Local_u8_Error_State;
 8001140:	7dfb      	ldrb	r3, [r7, #23]
}
 8001142:	4618      	mov	r0, r3
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <DMA1_Stream0_IRQHandler>:


void DMA1_Stream0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM0, &loc_Flags);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	461a      	mov	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fc6b 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001162:	793b      	ldrb	r3, [r7, #4]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <DMA1_Stream0_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Transfer_Complete_ID);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fe8c 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Transfer_Complete_ID]();
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <DMA1_Stream0_IRQHandler+0xa8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <DMA1_Stream0_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Half_Transfer_ID);
 800118a:	2201      	movs	r2, #1
 800118c:	2100      	movs	r1, #0
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fe7e 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Half_Transfer_ID]();
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <DMA1_Stream0_IRQHandler+0xa8>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800119a:	793b      	ldrb	r3, [r7, #4]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <DMA1_Stream0_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Direct_Mode_Error_ID);
 80011a6:	2204      	movs	r2, #4
 80011a8:	2100      	movs	r1, #0
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fe70 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Direct_Mode_Error_ID]();
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <DMA1_Stream0_IRQHandler+0xa8>)
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80011b6:	793b      	ldrb	r3, [r7, #4]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <DMA1_Stream0_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, FIFO_Error_ID);
 80011c2:	2203      	movs	r2, #3
 80011c4:	2100      	movs	r1, #0
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff fe62 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][FIFO_Error_ID]();
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <DMA1_Stream0_IRQHandler+0xa8>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <DMA1_Stream0_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM0, Transfer_Error_ID);
 80011de:	2202      	movs	r2, #2
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fe54 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM0][Transfer_Error_ID]();
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <DMA1_Stream0_IRQHandler+0xa8>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4798      	blx	r3
	}
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000028 	.word	0x20000028

080011fc <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM1, &loc_Flags);
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	461a      	mov	r2, r3
 8001206:	2101      	movs	r1, #1
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fc15 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800120e:	793b      	ldrb	r3, [r7, #4]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <DMA1_Stream1_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM1, Transfer_Complete_ID);
 800121a:	2200      	movs	r2, #0
 800121c:	2101      	movs	r1, #1
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fe36 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM1][Transfer_Complete_ID]();
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <DMA1_Stream1_IRQHandler+0x80>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <DMA1_Stream1_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM1][Half_Transfer_ID]();
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <DMA1_Stream1_IRQHandler+0x80>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <DMA1_Stream1_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM1][Direct_Mode_Error_ID]();
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <DMA1_Stream1_IRQHandler+0x80>)
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800124e:	793b      	ldrb	r3, [r7, #4]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <DMA1_Stream1_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM1][FIFO_Error_ID]();
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <DMA1_Stream1_IRQHandler+0x80>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001260:	793b      	ldrb	r3, [r7, #4]
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <DMA1_Stream1_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM1][Transfer_Error_ID]();
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <DMA1_Stream1_IRQHandler+0x80>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	4798      	blx	r3
	}
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000028 	.word	0x20000028

08001280 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM2, &loc_Flags);
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	461a      	mov	r2, r3
 800128a:	2102      	movs	r1, #2
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fbd3 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001292:	793b      	ldrb	r3, [r7, #4]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <DMA1_Stream2_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM2, Transfer_Complete_ID);
 800129e:	2200      	movs	r2, #0
 80012a0:	2102      	movs	r1, #2
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fdf4 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM2][Transfer_Complete_ID]();
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <DMA1_Stream2_IRQHandler+0x80>)
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80012ae:	793b      	ldrb	r3, [r7, #4]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <DMA1_Stream2_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM2][Half_Transfer_ID]();
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <DMA1_Stream2_IRQHandler+0x80>)
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <DMA1_Stream2_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM2][Direct_Mode_Error_ID]();
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <DMA1_Stream2_IRQHandler+0x80>)
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80012d2:	793b      	ldrb	r3, [r7, #4]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <DMA1_Stream2_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM2][FIFO_Error_ID]();
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <DMA1_Stream2_IRQHandler+0x80>)
 80012e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e2:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80012e4:	793b      	ldrb	r3, [r7, #4]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <DMA1_Stream2_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM2][Transfer_Error_ID]();
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <DMA1_Stream2_IRQHandler+0x80>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4798      	blx	r3
	}
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000028 	.word	0x20000028

08001304 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM3, &loc_Flags);
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	461a      	mov	r2, r3
 800130e:	2103      	movs	r1, #3
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fb91 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001316:	793b      	ldrb	r3, [r7, #4]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <DMA1_Stream3_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM3, Transfer_Complete_ID);
 8001322:	2200      	movs	r2, #0
 8001324:	2103      	movs	r1, #3
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fdb2 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM3][Transfer_Complete_ID]();
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <DMA1_Stream3_IRQHandler+0x80>)
 800132e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001330:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001332:	793b      	ldrb	r3, [r7, #4]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <DMA1_Stream3_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM3][Half_Transfer_ID]();
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <DMA1_Stream3_IRQHandler+0x80>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <DMA1_Stream3_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM3][Direct_Mode_Error_ID]();
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <DMA1_Stream3_IRQHandler+0x80>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001354:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001356:	793b      	ldrb	r3, [r7, #4]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <DMA1_Stream3_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM3][FIFO_Error_ID]();
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <DMA1_Stream3_IRQHandler+0x80>)
 8001364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001366:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001368:	793b      	ldrb	r3, [r7, #4]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <DMA1_Stream3_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM3][Transfer_Error_ID]();
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <DMA1_Stream3_IRQHandler+0x80>)
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	4798      	blx	r3
	}
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000028 	.word	0x20000028

08001388 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM4, &loc_Flags);
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	461a      	mov	r2, r3
 8001392:	2104      	movs	r1, #4
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fb4f 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800139a:	793b      	ldrb	r3, [r7, #4]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <DMA1_Stream4_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM4, Transfer_Complete_ID);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2104      	movs	r1, #4
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fd70 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM4][Transfer_Complete_ID]();
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <DMA1_Stream4_IRQHandler+0x80>)
 80013b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b4:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80013b6:	793b      	ldrb	r3, [r7, #4]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <DMA1_Stream4_IRQHandler+0x40>
	{
		DMA1_Callback[STREAM4][Half_Transfer_ID]();
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <DMA1_Stream4_IRQHandler+0x80>)
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80013c8:	793b      	ldrb	r3, [r7, #4]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <DMA1_Stream4_IRQHandler+0x52>
	{
		DMA1_Callback[STREAM4][Direct_Mode_Error_ID]();
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <DMA1_Stream4_IRQHandler+0x80>)
 80013d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d8:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80013da:	793b      	ldrb	r3, [r7, #4]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <DMA1_Stream4_IRQHandler+0x64>
	{
		DMA1_Callback[STREAM4][FIFO_Error_ID]();
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <DMA1_Stream4_IRQHandler+0x80>)
 80013e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ea:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80013ec:	793b      	ldrb	r3, [r7, #4]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <DMA1_Stream4_IRQHandler+0x76>
	{
		DMA1_Callback[STREAM4][Transfer_Error_ID]();
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <DMA1_Stream4_IRQHandler+0x80>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	4798      	blx	r3
	}
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000028 	.word	0x20000028

0800140c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM5, &loc_Flags);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	461a      	mov	r2, r3
 8001416:	2105      	movs	r1, #5
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fb0d 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800141e:	793b      	ldrb	r3, [r7, #4]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01c      	beq.n	8001464 <DMA1_Stream5_IRQHandler+0x58>
	{
		/*  disable DMA requests then wait for a BTF event before programming the Stop condition */
		DMA->DMA1_Peripheral.DMA_Stream[6].DMA_SCR &= ~(1 << EN);
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <DMA1_Stream5_IRQHandler+0xa8>)
 800142c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001430:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <DMA1_Stream5_IRQHandler+0xa8>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

		while (!READ_BIT(I2C->I2C1.SR1, 2));
 800143a:	bf00      	nop
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <DMA1_Stream5_IRQHandler+0xac>)
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f9      	beq.n	800143c <DMA1_Stream5_IRQHandler+0x30>
		SET_BIT(I2C->I2C1.CR1, 9);
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <DMA1_Stream5_IRQHandler+0xac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <DMA1_Stream5_IRQHandler+0xac>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001452:	6013      	str	r3, [r2, #0]

		DMA_Clear_IT_Flag(DMA1, STREAM6, Transfer_Complete_ID);
 8001454:	2200      	movs	r2, #0
 8001456:	2106      	movs	r1, #6
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fd19 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM6][Transfer_Complete_ID]();
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <DMA1_Stream5_IRQHandler+0xb0>)
 8001460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001462:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001464:	793b      	ldrb	r3, [r7, #4]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <DMA1_Stream5_IRQHandler+0x6a>
	{
		DMA1_Callback[STREAM5][Half_Transfer_ID]();
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <DMA1_Stream5_IRQHandler+0xb0>)
 8001472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001474:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001476:	793b      	ldrb	r3, [r7, #4]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <DMA1_Stream5_IRQHandler+0x7c>
	{
		DMA1_Callback[STREAM5][Direct_Mode_Error_ID]();
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <DMA1_Stream5_IRQHandler+0xb0>)
 8001484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001486:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001488:	793b      	ldrb	r3, [r7, #4]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <DMA1_Stream5_IRQHandler+0x8e>
	{
		DMA1_Callback[STREAM5][FIFO_Error_ID]();
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <DMA1_Stream5_IRQHandler+0xb0>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800149a:	793b      	ldrb	r3, [r7, #4]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <DMA1_Stream5_IRQHandler+0xa0>
	{
		DMA1_Callback[STREAM5][Transfer_Error_ID]();
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <DMA1_Stream5_IRQHandler+0xb0>)
 80014a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014aa:	4798      	blx	r3
	}
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40026000 	.word	0x40026000
 80014b8:	40005400 	.word	0x40005400
 80014bc:	20000028 	.word	0x20000028

080014c0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM6, &loc_Flags);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	461a      	mov	r2, r3
 80014ca:	2106      	movs	r1, #6
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fab3 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 80014d2:	793b      	ldrb	r3, [r7, #4]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01c      	beq.n	8001518 <DMA1_Stream6_IRQHandler+0x58>
	{
		/*  disable DMA requests then wait for a BTF event before programming the Stop condition */
		DMA->DMA1_Peripheral.DMA_Stream[6].DMA_SCR &= ~(1 << EN);
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <DMA1_Stream6_IRQHandler+0xb8>)
 80014e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014e4:	4a24      	ldr	r2, [pc, #144]	; (8001578 <DMA1_Stream6_IRQHandler+0xb8>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

		while (!READ_BIT(I2C->I2C1.SR1, 2));
 80014ee:	bf00      	nop
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <DMA1_Stream6_IRQHandler+0xbc>)
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f9      	beq.n	80014f0 <DMA1_Stream6_IRQHandler+0x30>
		SET_BIT(I2C->I2C1.CR1, 9);
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <DMA1_Stream6_IRQHandler+0xbc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <DMA1_Stream6_IRQHandler+0xbc>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001506:	6013      	str	r3, [r2, #0]

		DMA_Clear_IT_Flag(DMA1, STREAM6, Transfer_Complete_ID);
 8001508:	2200      	movs	r2, #0
 800150a:	2106      	movs	r1, #6
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fcbf 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM6][Transfer_Complete_ID]();
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <DMA1_Stream6_IRQHandler+0xc0>)
 8001514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001516:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001518:	793b      	ldrb	r3, [r7, #4]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <DMA1_Stream6_IRQHandler+0x74>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM6, Half_Transfer_ID);
 8001524:	2201      	movs	r2, #1
 8001526:	2106      	movs	r1, #6
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fcb1 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM6][Half_Transfer_ID]();
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <DMA1_Stream6_IRQHandler+0xc0>)
 8001530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001532:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001534:	793b      	ldrb	r3, [r7, #4]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <DMA1_Stream6_IRQHandler+0x88>
	{
		DMA1_Callback[STREAM6][Direct_Mode_Error_ID]();
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <DMA1_Stream6_IRQHandler+0xc0>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001548:	793b      	ldrb	r3, [r7, #4]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <DMA1_Stream6_IRQHandler+0x9c>
	{
		DMA1_Callback[STREAM6][FIFO_Error_ID]();
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <DMA1_Stream6_IRQHandler+0xc0>)
 8001556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800155a:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <DMA1_Stream6_IRQHandler+0xb0>
	{
		DMA1_Callback[STREAM6][Transfer_Error_ID]();
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <DMA1_Stream6_IRQHandler+0xc0>)
 800156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800156e:	4798      	blx	r3
	}
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40026000 	.word	0x40026000
 800157c:	40005400 	.word	0x40005400
 8001580:	20000028 	.word	0x20000028

08001584 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA1, STREAM7, &loc_Flags);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	461a      	mov	r2, r3
 800158e:	2107      	movs	r1, #7
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff fa51 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <DMA1_Stream7_IRQHandler+0x30>
	{
		DMA_Clear_IT_Flag(DMA1, STREAM7, Transfer_Complete_ID);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2107      	movs	r1, #7
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff fc72 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA1_Callback[STREAM7][Transfer_Complete_ID]();
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <DMA1_Stream7_IRQHandler+0x88>)
 80015ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b2:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80015b4:	793b      	ldrb	r3, [r7, #4]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <DMA1_Stream7_IRQHandler+0x44>
	{
		DMA1_Callback[STREAM7][Half_Transfer_ID]();
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <DMA1_Stream7_IRQHandler+0x88>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80015c8:	793b      	ldrb	r3, [r7, #4]
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <DMA1_Stream7_IRQHandler+0x58>
	{
		DMA1_Callback[STREAM7][Direct_Mode_Error_ID]();
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <DMA1_Stream7_IRQHandler+0x88>)
 80015d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015da:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80015dc:	793b      	ldrb	r3, [r7, #4]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <DMA1_Stream7_IRQHandler+0x6c>
	{
		DMA1_Callback[STREAM7][FIFO_Error_ID]();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <DMA1_Stream7_IRQHandler+0x88>)
 80015ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ee:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80015f0:	793b      	ldrb	r3, [r7, #4]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <DMA1_Stream7_IRQHandler+0x80>
	{
		DMA1_Callback[STREAM7][Transfer_Error_ID]();
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <DMA1_Stream7_IRQHandler+0x88>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001602:	4798      	blx	r3
	}
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000028 	.word	0x20000028

08001610 <DMA2_Stream0_IRQHandler>:




void DMA2_Stream0_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM0, &loc_Flags);
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	461a      	mov	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fa0b 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <DMA2_Stream0_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Transfer_Complete_ID);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff fc2c 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Transfer_Complete_ID]();
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <DMA2_Stream0_IRQHandler+0xa8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 800163e:	793b      	ldrb	r3, [r7, #4]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <DMA2_Stream0_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Half_Transfer_ID);
 800164a:	2201      	movs	r2, #1
 800164c:	2100      	movs	r1, #0
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff fc1e 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Half_Transfer_ID]();
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <DMA2_Stream0_IRQHandler+0xa8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800165a:	793b      	ldrb	r3, [r7, #4]
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <DMA2_Stream0_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Direct_Mode_Error_ID);
 8001666:	2204      	movs	r2, #4
 8001668:	2100      	movs	r1, #0
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff fc10 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Direct_Mode_Error_ID]();
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <DMA2_Stream0_IRQHandler+0xa8>)
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <DMA2_Stream0_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, FIFO_Error_ID);
 8001682:	2203      	movs	r2, #3
 8001684:	2100      	movs	r1, #0
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff fc02 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][FIFO_Error_ID]();
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <DMA2_Stream0_IRQHandler+0xa8>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001692:	793b      	ldrb	r3, [r7, #4]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <DMA2_Stream0_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Transfer_Error_ID);
 800169e:	2202      	movs	r2, #2
 80016a0:	2100      	movs	r1, #0
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fbf4 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM0][Transfer_Error_ID]();
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <DMA2_Stream0_IRQHandler+0xa8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4798      	blx	r3
	}
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000c8 	.word	0x200000c8

080016bc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM1, &loc_Flags);
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	461a      	mov	r2, r3
 80016c6:	2101      	movs	r1, #1
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff f9b5 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 80016ce:	793b      	ldrb	r3, [r7, #4]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <DMA2_Stream1_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM0, Transfer_Complete_ID);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fbd6 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Transfer_Complete_ID]();
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <DMA2_Stream1_IRQHandler+0xa8>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80016ea:	793b      	ldrb	r3, [r7, #4]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <DMA2_Stream1_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, Half_Transfer_ID);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2101      	movs	r1, #1
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff fbc8 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Half_Transfer_ID]();
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <DMA2_Stream1_IRQHandler+0xa8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001706:	793b      	ldrb	r3, [r7, #4]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <DMA2_Stream1_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, Direct_Mode_Error_ID);
 8001712:	2204      	movs	r2, #4
 8001714:	2101      	movs	r1, #1
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fbba 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Direct_Mode_Error_ID]();
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <DMA2_Stream1_IRQHandler+0xa8>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001722:	793b      	ldrb	r3, [r7, #4]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <DMA2_Stream1_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, FIFO_Error_ID);
 800172e:	2203      	movs	r2, #3
 8001730:	2101      	movs	r1, #1
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fbac 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][FIFO_Error_ID]();
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <DMA2_Stream1_IRQHandler+0xa8>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800173e:	793b      	ldrb	r3, [r7, #4]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <DMA2_Stream1_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM1, Transfer_Error_ID);
 800174a:	2202      	movs	r2, #2
 800174c:	2101      	movs	r1, #1
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff fb9e 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM1][Transfer_Error_ID]();
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <DMA2_Stream1_IRQHandler+0xa8>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4798      	blx	r3
	}
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200000c8 	.word	0x200000c8

08001768 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM2, &loc_Flags);
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	461a      	mov	r2, r3
 8001772:	2102      	movs	r1, #2
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff f95f 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800177a:	793b      	ldrb	r3, [r7, #4]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <DMA2_Stream2_IRQHandler+0x2e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Transfer_Complete_ID);
 8001786:	2200      	movs	r2, #0
 8001788:	2102      	movs	r1, #2
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff fb80 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Transfer_Complete_ID]();
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <DMA2_Stream2_IRQHandler+0xa8>)
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001796:	793b      	ldrb	r3, [r7, #4]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <DMA2_Stream2_IRQHandler+0x4a>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Half_Transfer_ID);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2102      	movs	r1, #2
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff fb72 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Half_Transfer_ID]();
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <DMA2_Stream2_IRQHandler+0xa8>)
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80017b2:	793b      	ldrb	r3, [r7, #4]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <DMA2_Stream2_IRQHandler+0x66>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Direct_Mode_Error_ID);
 80017be:	2204      	movs	r2, #4
 80017c0:	2102      	movs	r1, #2
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff fb64 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Direct_Mode_Error_ID]();
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <DMA2_Stream2_IRQHandler+0xa8>)
 80017ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017cc:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80017ce:	793b      	ldrb	r3, [r7, #4]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <DMA2_Stream2_IRQHandler+0x82>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, FIFO_Error_ID);
 80017da:	2203      	movs	r2, #3
 80017dc:	2102      	movs	r1, #2
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fb56 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][FIFO_Error_ID]();
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <DMA2_Stream2_IRQHandler+0xa8>)
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80017ea:	793b      	ldrb	r3, [r7, #4]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <DMA2_Stream2_IRQHandler+0x9e>
	{
		DMA_Clear_IT_Flag(DMA2, STREAM2, Transfer_Error_ID);
 80017f6:	2202      	movs	r2, #2
 80017f8:	2102      	movs	r1, #2
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff fb48 	bl	8000e90 <DMA_Clear_IT_Flag>
		DMA2_Callback[STREAM2][Transfer_Error_ID]();
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <DMA2_Stream2_IRQHandler+0xa8>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4798      	blx	r3
	}
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200000c8 	.word	0x200000c8

08001814 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM3, &loc_Flags);
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	461a      	mov	r2, r3
 800181e:	2103      	movs	r1, #3
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff f909 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001826:	793b      	ldrb	r3, [r7, #4]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <DMA2_Stream3_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM3][Transfer_Complete_ID]();
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <DMA2_Stream3_IRQHandler+0x74>)
 8001834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001836:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001838:	793b      	ldrb	r3, [r7, #4]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <DMA2_Stream3_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM3][Half_Transfer_ID]();
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <DMA2_Stream3_IRQHandler+0x74>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800184a:	793b      	ldrb	r3, [r7, #4]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <DMA2_Stream3_IRQHandler+0x48>
	{
		DMA2_Callback[STREAM3][Direct_Mode_Error_ID]();
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <DMA2_Stream3_IRQHandler+0x74>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800185c:	793b      	ldrb	r3, [r7, #4]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <DMA2_Stream3_IRQHandler+0x5a>
	{
		DMA2_Callback[STREAM3][FIFO_Error_ID]();
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <DMA2_Stream3_IRQHandler+0x74>)
 800186a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186c:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800186e:	793b      	ldrb	r3, [r7, #4]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <DMA2_Stream3_IRQHandler+0x6c>
	{
		DMA2_Callback[STREAM3][Transfer_Error_ID]();
 800187a:	4b03      	ldr	r3, [pc, #12]	; (8001888 <DMA2_Stream3_IRQHandler+0x74>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4798      	blx	r3
	}
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200000c8 	.word	0x200000c8

0800188c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM4, &loc_Flags);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	461a      	mov	r2, r3
 8001896:	2104      	movs	r1, #4
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff f8cd 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800189e:	793b      	ldrb	r3, [r7, #4]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <DMA2_Stream4_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM4][Transfer_Complete_ID]();
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <DMA2_Stream4_IRQHandler+0x74>)
 80018ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ae:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80018b0:	793b      	ldrb	r3, [r7, #4]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <DMA2_Stream4_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM4][Half_Transfer_ID]();
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <DMA2_Stream4_IRQHandler+0x74>)
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80018c2:	793b      	ldrb	r3, [r7, #4]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <DMA2_Stream4_IRQHandler+0x48>
	{
		DMA2_Callback[STREAM4][Direct_Mode_Error_ID]();
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <DMA2_Stream4_IRQHandler+0x74>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80018d4:	793b      	ldrb	r3, [r7, #4]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <DMA2_Stream4_IRQHandler+0x5a>
	{
		DMA2_Callback[STREAM4][FIFO_Error_ID]();
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <DMA2_Stream4_IRQHandler+0x74>)
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80018e6:	793b      	ldrb	r3, [r7, #4]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <DMA2_Stream4_IRQHandler+0x6c>
	{
		DMA2_Callback[STREAM4][Transfer_Error_ID]();
 80018f2:	4b03      	ldr	r3, [pc, #12]	; (8001900 <DMA2_Stream4_IRQHandler+0x74>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	4798      	blx	r3
	}
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200000c8 	.word	0x200000c8

08001904 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM5, &loc_Flags);
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	461a      	mov	r2, r3
 800190e:	2105      	movs	r1, #5
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff f891 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001916:	793b      	ldrb	r3, [r7, #4]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <DMA2_Stream5_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM5][Transfer_Complete_ID]();
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <DMA2_Stream5_IRQHandler+0x74>)
 8001924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001926:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001928:	793b      	ldrb	r3, [r7, #4]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <DMA2_Stream5_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM5][Half_Transfer_ID]();
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <DMA2_Stream5_IRQHandler+0x74>)
 8001936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001938:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <DMA2_Stream5_IRQHandler+0x48>
	{
		DMA2_Callback[STREAM5][Direct_Mode_Error_ID]();
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <DMA2_Stream5_IRQHandler+0x74>)
 8001948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194a:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 800194c:	793b      	ldrb	r3, [r7, #4]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <DMA2_Stream5_IRQHandler+0x5a>
	{
		DMA2_Callback[STREAM5][FIFO_Error_ID]();
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <DMA2_Stream5_IRQHandler+0x74>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 800195e:	793b      	ldrb	r3, [r7, #4]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <DMA2_Stream5_IRQHandler+0x6c>
	{
		DMA2_Callback[STREAM5][Transfer_Error_ID]();
 800196a:	4b03      	ldr	r3, [pc, #12]	; (8001978 <DMA2_Stream5_IRQHandler+0x74>)
 800196c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800196e:	4798      	blx	r3
	}
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000c8 	.word	0x200000c8

0800197c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM6, &loc_Flags);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	461a      	mov	r2, r3
 8001986:	2106      	movs	r1, #6
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff f855 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 800198e:	793b      	ldrb	r3, [r7, #4]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <DMA2_Stream6_IRQHandler+0x24>
	{
		DMA2_Callback[STREAM6][Transfer_Complete_ID]();
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <DMA2_Stream6_IRQHandler+0x7c>)
 800199c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800199e:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 80019a0:	793b      	ldrb	r3, [r7, #4]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <DMA2_Stream6_IRQHandler+0x36>
	{
		DMA2_Callback[STREAM6][Half_Transfer_ID]();
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <DMA2_Stream6_IRQHandler+0x7c>)
 80019ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019b0:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 80019b2:	793b      	ldrb	r3, [r7, #4]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <DMA2_Stream6_IRQHandler+0x4a>
	{
		DMA2_Callback[STREAM6][Direct_Mode_Error_ID]();
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <DMA2_Stream6_IRQHandler+0x7c>)
 80019c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c4:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 80019c6:	793b      	ldrb	r3, [r7, #4]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <DMA2_Stream6_IRQHandler+0x5e>
	{
		DMA2_Callback[STREAM6][FIFO_Error_ID]();
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <DMA2_Stream6_IRQHandler+0x7c>)
 80019d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d8:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 80019da:	793b      	ldrb	r3, [r7, #4]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <DMA2_Stream6_IRQHandler+0x72>
	{
		DMA2_Callback[STREAM6][Transfer_Error_ID]();
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <DMA2_Stream6_IRQHandler+0x7c>)
 80019e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ec:	4798      	blx	r3
	}
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000c8 	.word	0x200000c8

080019fc <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
	ST_DMA_IT_FLAGS_State_t loc_Flags;
	DMA_Get_Flags_State(DMA2, STREAM7, &loc_Flags);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	461a      	mov	r2, r3
 8001a06:	2107      	movs	r1, #7
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff f815 	bl	8000a38 <DMA_Get_Flags_State>

	/* check which IT Flag is set */
	if (loc_Flags.Transfer_Complete_Flag == 1)
 8001a0e:	793b      	ldrb	r3, [r7, #4]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <DMA2_Stream7_IRQHandler+0x26>
	{
		DMA2_Callback[STREAM7][Transfer_Complete_ID]();
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <DMA2_Stream7_IRQHandler+0x80>)
 8001a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a20:	4798      	blx	r3
	}
	if (loc_Flags.Half_Transfer_Flag == 1)
 8001a22:	793b      	ldrb	r3, [r7, #4]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <DMA2_Stream7_IRQHandler+0x3a>
	{
		DMA2_Callback[STREAM7][Half_Transfer_ID]();
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <DMA2_Stream7_IRQHandler+0x80>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	4798      	blx	r3
	}
	if (loc_Flags.Direct_Mode_Error_Flag == 1)
 8001a36:	793b      	ldrb	r3, [r7, #4]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <DMA2_Stream7_IRQHandler+0x4e>
	{
		DMA2_Callback[STREAM7][Direct_Mode_Error_ID]();
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <DMA2_Stream7_IRQHandler+0x80>)
 8001a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a48:	4798      	blx	r3
	}
	if (loc_Flags.FIFO_Error_Flag == 1)
 8001a4a:	793b      	ldrb	r3, [r7, #4]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <DMA2_Stream7_IRQHandler+0x62>
	{
		DMA2_Callback[STREAM7][FIFO_Error_ID]();
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <DMA2_Stream7_IRQHandler+0x80>)
 8001a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5c:	4798      	blx	r3
	}
	if (loc_Flags.Transfer_Error_Flag == 1)
 8001a5e:	793b      	ldrb	r3, [r7, #4]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <DMA2_Stream7_IRQHandler+0x76>
	{
		DMA2_Callback[STREAM7][Transfer_Error_ID]();
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <DMA2_Stream7_IRQHandler+0x80>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	4798      	blx	r3
	}
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000c8 	.word	0x200000c8

08001a80 <EXTI_ClearPendingFlag>:
	}

	return Local_u8_Error_State;
}
uint8_t EXTI_ClearPendingFlag(EN_EXTI_LINE_NUM_t copy_line_num)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]

	if ((copy_line_num >= 0) && (copy_line_num <= NUM_EXTI_LINES))
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b16      	cmp	r3, #22
 8001a92:	d80a      	bhi.n	8001aaa <EXTI_ClearPendingFlag+0x2a>
	{
		SET_BIT(EXTI->PR, copy_line_num);    /* clear flag by writing 1 */
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <EXTI_ClearPendingFlag+0x3c>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	79fa      	ldrb	r2, [r7, #7]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <EXTI_ClearPendingFlag+0x3c>)
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6153      	str	r3, [r2, #20]
 8001aa8:	e001      	b.n	8001aae <EXTI_ClearPendingFlag+0x2e>
	}
	else
	{
		Local_u8_Error_State = EXTI_LINE_NUM_ERR;
 8001aaa:	2314      	movs	r3, #20
 8001aac:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE0);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff ffdb 	bl	8001a80 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE0]();
 8001aca:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <EXTI0_IRQHandler+0x14>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4798      	blx	r3
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000168 	.word	0x20000168

08001ad8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff ffcf 	bl	8001a80 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE1]();
 8001ae2:	4b02      	ldr	r3, [pc, #8]	; (8001aec <EXTI1_IRQHandler+0x14>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4798      	blx	r3
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000168 	.word	0x20000168

08001af0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE2);
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7ff ffc3 	bl	8001a80 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE2]();
 8001afa:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <EXTI2_IRQHandler+0x14>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4798      	blx	r3
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000168 	.word	0x20000168

08001b08 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE3);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f7ff ffb7 	bl	8001a80 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE3]();
 8001b12:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <EXTI3_IRQHandler+0x14>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4798      	blx	r3
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000168 	.word	0x20000168

08001b20 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	EXTI_ClearPendingFlag(EXTI_LINE4);
 8001b24:	2004      	movs	r0, #4
 8001b26:	f7ff ffab 	bl	8001a80 <EXTI_ClearPendingFlag>
	EXTI_Callback[EXTI_LINE4]();
 8001b2a:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <EXTI4_IRQHandler+0x14>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4798      	blx	r3
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000168 	.word	0x20000168

08001b38 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	if ((((EXTI->PR) >> EXTI_LINE5) & 1) == 1)
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <EXTI9_5_IRQHandler+0x8c>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d105      	bne.n	8001b56 <EXTI9_5_IRQHandler+0x1e>
	{
		EXTI_ClearPendingFlag(EXTI_LINE5);
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	f7ff ff98 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE5]();
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <EXTI9_5_IRQHandler+0x90>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE6) & 1) == 1)
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <EXTI9_5_IRQHandler+0x8c>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <EXTI9_5_IRQHandler+0x38>
	{
		EXTI_ClearPendingFlag(EXTI_LINE6);
 8001b64:	2006      	movs	r0, #6
 8001b66:	f7ff ff8b 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE6]();
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <EXTI9_5_IRQHandler+0x90>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE7) & 1) == 1)
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <EXTI9_5_IRQHandler+0x8c>)
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	09db      	lsrs	r3, r3, #7
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d105      	bne.n	8001b8a <EXTI9_5_IRQHandler+0x52>
	{
		EXTI_ClearPendingFlag(EXTI_LINE7);
 8001b7e:	2007      	movs	r0, #7
 8001b80:	f7ff ff7e 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE7]();
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <EXTI9_5_IRQHandler+0x90>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE8) & 1) == 1)
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <EXTI9_5_IRQHandler+0x8c>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <EXTI9_5_IRQHandler+0x6c>
	{
		EXTI_ClearPendingFlag(EXTI_LINE8);
 8001b98:	2008      	movs	r0, #8
 8001b9a:	f7ff ff71 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE8]();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <EXTI9_5_IRQHandler+0x90>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE9) & 1) == 1)
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <EXTI9_5_IRQHandler+0x8c>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	0a5b      	lsrs	r3, r3, #9
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <EXTI9_5_IRQHandler+0x86>
	{
		EXTI_ClearPendingFlag(EXTI_LINE9);
 8001bb2:	2009      	movs	r0, #9
 8001bb4:	f7ff ff64 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE9]();
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <EXTI9_5_IRQHandler+0x90>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	4798      	blx	r3
	}

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40013c00 	.word	0x40013c00
 8001bc8:	20000168 	.word	0x20000168

08001bcc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	if ((((EXTI->PR) >> EXTI_LINE10) & 1) == 1)
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <EXTI15_10_IRQHandler+0xa4>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	0a9b      	lsrs	r3, r3, #10
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <EXTI15_10_IRQHandler+0x1e>
	{
		EXTI_ClearPendingFlag(EXTI_LINE10);
 8001bde:	200a      	movs	r0, #10
 8001be0:	f7ff ff4e 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE10]();
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <EXTI15_10_IRQHandler+0xa8>)
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE11) & 1) == 1)
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <EXTI15_10_IRQHandler+0xa4>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	0adb      	lsrs	r3, r3, #11
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <EXTI15_10_IRQHandler+0x38>
	{
		EXTI_ClearPendingFlag(EXTI_LINE11);
 8001bf8:	200b      	movs	r0, #11
 8001bfa:	f7ff ff41 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE11]();
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <EXTI15_10_IRQHandler+0xa8>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE12) & 1) == 1)
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <EXTI15_10_IRQHandler+0xa4>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	0b1b      	lsrs	r3, r3, #12
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <EXTI15_10_IRQHandler+0x52>
	{
		EXTI_ClearPendingFlag(EXTI_LINE12);
 8001c12:	200c      	movs	r0, #12
 8001c14:	f7ff ff34 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE12]();
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <EXTI15_10_IRQHandler+0xa8>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE13) & 1) == 1)
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <EXTI15_10_IRQHandler+0xa4>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	0b5b      	lsrs	r3, r3, #13
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <EXTI15_10_IRQHandler+0x6c>
	{
		EXTI_ClearPendingFlag(EXTI_LINE13);
 8001c2c:	200d      	movs	r0, #13
 8001c2e:	f7ff ff27 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE13]();
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <EXTI15_10_IRQHandler+0xa8>)
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c36:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE14) & 1) == 1)
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <EXTI15_10_IRQHandler+0xa4>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	0b9b      	lsrs	r3, r3, #14
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <EXTI15_10_IRQHandler+0x86>
	{
		EXTI_ClearPendingFlag(EXTI_LINE14);
 8001c46:	200e      	movs	r0, #14
 8001c48:	f7ff ff1a 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE14]();
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <EXTI15_10_IRQHandler+0xa8>)
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	4798      	blx	r3
	}
	if ((((EXTI->PR) >> EXTI_LINE15) & 1) == 1)
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <EXTI15_10_IRQHandler+0xa4>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	0bdb      	lsrs	r3, r3, #15
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <EXTI15_10_IRQHandler+0xa0>
	{
		EXTI_ClearPendingFlag(EXTI_LINE15);
 8001c60:	200f      	movs	r0, #15
 8001c62:	f7ff ff0d 	bl	8001a80 <EXTI_ClearPendingFlag>
		EXTI_Callback[EXTI_LINE15]();
 8001c66:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <EXTI15_10_IRQHandler+0xa8>)
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	4798      	blx	r3
	}
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40013c00 	.word	0x40013c00
 8001c74:	20000168 	.word	0x20000168

08001c78 <GPIO_u8PIN_init>:
  *
  */


uint8_t GPIO_u8PIN_init(const ST_Pin_Config* pin_config)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]

	ST_GPIO_RegDef_t* port_id = (ST_GPIO_RegDef_t*)((uint32_t)GPIOA + (pin_config->Port_X) * 0x400);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c8e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001c92:	60bb      	str	r3, [r7, #8]

	if (pin_config != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80c2 	beq.w	8001e20 <GPIO_u8PIN_init+0x1a8>
	{
		if (pin_config->Port_X <= PORTH && (pin_config->Pin_Num <= 15))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b07      	cmp	r3, #7
 8001ca2:	f200 80ba 	bhi.w	8001e1a <GPIO_u8PIN_init+0x1a2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f200 80b5 	bhi.w	8001e1a <GPIO_u8PIN_init+0x1a2>
		{
			/* switch to Mode*/
			port_id->MODER &= ~(0b11 << (2 * pin_config->Pin_Num));
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	78d2      	ldrb	r2, [r2, #3]
 8001cb8:	0052      	lsls	r2, r2, #1
 8001cba:	2103      	movs	r1, #3
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	43d2      	mvns	r2, r2
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	601a      	str	r2, [r3, #0]
			port_id->MODER |= (pin_config->mode << (2 * pin_config->Pin_Num));
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	7852      	ldrb	r2, [r2, #1]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	78d2      	ldrb	r2, [r2, #3]
 8001cd6:	0052      	lsls	r2, r2, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	601a      	str	r2, [r3, #0]
			/* Pull Type */
			port_id->PUPDR &= ~(0b11 << 2 * pin_config->Pin_Num);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	78d2      	ldrb	r2, [r2, #3]
 8001cea:	0052      	lsls	r2, r2, #1
 8001cec:	2103      	movs	r1, #3
 8001cee:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf2:	43d2      	mvns	r2, r2
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
			port_id->PUPDR |= (pin_config->PullType << (2 * pin_config->Pin_Num));
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	7992      	ldrb	r2, [r2, #6]
 8001d02:	4611      	mov	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	78d2      	ldrb	r2, [r2, #3]
 8001d08:	0052      	lsls	r2, r2, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60da      	str	r2, [r3, #12]

			if (pin_config->mode == OUTPUT || pin_config->mode == ALTERNATE_FUNCTION)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d003      	beq.n	8001d24 <GPIO_u8PIN_init+0xac>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d13c      	bne.n	8001d9e <GPIO_u8PIN_init+0x126>
			{
				port_id->PUPDR |= (pin_config->PullType << (2 * pin_config->Pin_Num));
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	7992      	ldrb	r2, [r2, #6]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	78d2      	ldrb	r2, [r2, #3]
 8001d32:	0052      	lsls	r2, r2, #1
 8001d34:	fa01 f202 	lsl.w	r2, r1, r2
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
				/* Output Type Push Pull & Open Drain */
				port_id->OTYPER &= ~(0b1 << (pin_config->Pin_Num));
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	78d2      	ldrb	r2, [r2, #3]
 8001d46:	4611      	mov	r1, r2
 8001d48:	2201      	movs	r2, #1
 8001d4a:	408a      	lsls	r2, r1
 8001d4c:	43d2      	mvns	r2, r2
 8001d4e:	401a      	ands	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	605a      	str	r2, [r3, #4]
				port_id->OTYPER |= (pin_config->Output_Type << (pin_config->Pin_Num));
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	7912      	ldrb	r2, [r2, #4]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	78d2      	ldrb	r2, [r2, #3]
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	605a      	str	r2, [r3, #4]
				/* Speed */
				port_id->OSPEEDER &= ~(0b11 << (2 * pin_config->Pin_Num));
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	78d2      	ldrb	r2, [r2, #3]
 8001d74:	0052      	lsls	r2, r2, #1
 8001d76:	2103      	movs	r1, #3
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	43d2      	mvns	r2, r2
 8001d7e:	401a      	ands	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	609a      	str	r2, [r3, #8]
				port_id->OSPEEDER |= (pin_config->speed << (2 * pin_config->Pin_Num));
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	7892      	ldrb	r2, [r2, #2]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	78d2      	ldrb	r2, [r2, #3]
 8001d92:	0052      	lsls	r2, r2, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	609a      	str	r2, [r3, #8]
			}
			if (pin_config->mode == ALTERNATE_FUNCTION)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d13e      	bne.n	8001e24 <GPIO_u8PIN_init+0x1ac>
			{
				/* Function selection */
				port_id->AFR[pin_config->Pin_Num / 8] &= ~(0b1111 << (4 * (pin_config->Pin_Num % 8)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	78d2      	ldrb	r2, [r2, #3]
 8001dbc:	f002 0207 	and.w	r2, r2, #7
 8001dc0:	0092      	lsls	r2, r2, #2
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	43d2      	mvns	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	78d2      	ldrb	r2, [r2, #3]
 8001dd0:	08d2      	lsrs	r2, r2, #3
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	4019      	ands	r1, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				port_id->AFR[pin_config->Pin_Num / 8] |= (pin_config->Alt_Func << (4 * (pin_config->Pin_Num % 8)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	78db      	ldrb	r3, [r3, #3]
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	3208      	adds	r2, #8
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	7952      	ldrb	r2, [r2, #5]
 8001df4:	4611      	mov	r1, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	78d2      	ldrb	r2, [r2, #3]
 8001dfa:	f002 0207 	and.w	r2, r2, #7
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	fa01 f202 	lsl.w	r2, r1, r2
 8001e04:	4611      	mov	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	78d2      	ldrb	r2, [r2, #3]
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	4319      	orrs	r1, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (pin_config->mode == ALTERNATE_FUNCTION)
 8001e18:	e004      	b.n	8001e24 <GPIO_u8PIN_init+0x1ac>
			}
		}
		else
		{
			Local_u8_Error_State = PORTS_PINS_ERR;
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e001      	b.n	8001e24 <GPIO_u8PIN_init+0x1ac>
		}
	}
	else
	{
		Local_u8_Error_State = NULL_PTR_ERR;
 8001e20:	2303      	movs	r3, #3
 8001e22:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]

}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <I2C_init>:

uint8_t Flag_State = 0;


uint8_t I2C_init(ST_I2C_Config_t* i2c_config)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	75fb      	strb	r3, [r7, #23]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e4a:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001e4e:	613b      	str	r3, [r7, #16]

	if ((i2c_config->i2c_num >= I2C_NUM_1 && i2c_config->i2c_num <= I2C_NUM_3) &&
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d87f      	bhi.n	8001f58 <I2C_init+0x124>
		(i2c_config->PCLK_freq_in_mhz >= 2 && i2c_config->PCLK_freq_in_mhz <= 50))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7e1b      	ldrb	r3, [r3, #24]
	if ((i2c_config->i2c_num >= I2C_NUM_1 && i2c_config->i2c_num <= I2C_NUM_3) &&
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d97b      	bls.n	8001f58 <I2C_init+0x124>
		(i2c_config->PCLK_freq_in_mhz >= 2 && i2c_config->PCLK_freq_in_mhz <= 50))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	2b32      	cmp	r3, #50	; 0x32
 8001e66:	d877      	bhi.n	8001f58 <I2C_init+0x124>


	{
		/* reset I2C */
		SET_BIT(I2C_X->CR1, SWRST);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	601a      	str	r2, [r3, #0]

		/* and again write a ‘0’ to this position to pull the I2C from the reset */
		CLEAR_BIT(I2C_X->CR1, SWRST);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	601a      	str	r2, [r3, #0]


		/* start configs */
		I2C_X->CR1 |= (i2c_config->smbus_mode << SMBUS) | (i2c_config->smbus_type << SMBTYPE) |
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	7952      	ldrb	r2, [r2, #5]
 8001e88:	0051      	lsls	r1, r2, #1
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	7992      	ldrb	r2, [r2, #6]
 8001e8e:	00d2      	lsls	r2, r2, #3
 8001e90:	4311      	orrs	r1, r2
			(i2c_config->CLK_stretch << NOSTRETCH) | (i2c_config->gen_call << ENGC) |
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	7892      	ldrb	r2, [r2, #2]
 8001e96:	01d2      	lsls	r2, r2, #7
		I2C_X->CR1 |= (i2c_config->smbus_mode << SMBUS) | (i2c_config->smbus_type << SMBTYPE) |
 8001e98:	4311      	orrs	r1, r2
			(i2c_config->CLK_stretch << NOSTRETCH) | (i2c_config->gen_call << ENGC) |
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	78d2      	ldrb	r2, [r2, #3]
 8001e9e:	0192      	lsls	r2, r2, #6
 8001ea0:	4311      	orrs	r1, r2
			(i2c_config->PEC_en_dis << ENPEC);
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	7912      	ldrb	r2, [r2, #4]
 8001ea6:	0152      	lsls	r2, r2, #5
			(i2c_config->CLK_stretch << NOSTRETCH) | (i2c_config->gen_call << ENGC) |
 8001ea8:	430a      	orrs	r2, r1
		I2C_X->CR1 |= (i2c_config->smbus_mode << SMBUS) | (i2c_config->smbus_type << SMBTYPE) |
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	601a      	str	r2, [r3, #0]

		I2C_X->CR2 |= (i2c_config->last_transfer << LAST) | (i2c_config->PCLK_freq_in_mhz << FREQ);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	7852      	ldrb	r2, [r2, #1]
 8001eb8:	0312      	lsls	r2, r2, #12
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	7e09      	ldrb	r1, [r1, #24]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]

		I2C_X->CCR |= (i2c_config->master_mode << F_S) | (i2c_config->duty << DUTY);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	79d2      	ldrb	r2, [r2, #7]
 8001ece:	03d1      	lsls	r1, r2, #15
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	7a12      	ldrb	r2, [r2, #8]
 8001ed4:	0392      	lsls	r2, r2, #14
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	61da      	str	r2, [r3, #28]

		/* Bit 14 Should always be kept at 1 by software */
		I2C_X->OAR1 |= (1 << 14);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]

		I2C_X->OAR1 |= (i2c_config->addr_mode << ADDMODE);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	7a52      	ldrb	r2, [r2, #9]
 8001ef2:	03d2      	lsls	r2, r2, #15
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]



		/* PCLK1 must be at least 2 MHz to achieve Sm mode I²C frequencies */
		if (i2c_config->master_mode == SM_MODE && (i2c_config->PCLK_freq_in_mhz >= 2))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	79db      	ldrb	r3, [r3, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d123      	bne.n	8001f4a <I2C_init+0x116>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7e1b      	ldrb	r3, [r3, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d91c      	bls.n	8001f44 <I2C_init+0x110>
		{
			uint32_t CCR_value = (i2c_config->PCLK_freq_in_mhz * 1000000) / (2 * i2c_config->SCL_freq_in_khz * 1000);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7e1b      	ldrb	r3, [r3, #24]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <I2C_init+0x138>)
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7e5b      	ldrb	r3, [r3, #25]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f28:	60fb      	str	r3, [r7, #12]

			I2C_X->CCR |= (CCR_value << CCR);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	61da      	str	r2, [r3, #28]

			/* configure rise time */
			I2C_X->TRISE = (i2c_config->PCLK_freq_in_mhz + 1);                                 /*  For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7e1b      	ldrb	r3, [r3, #24]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	621a      	str	r2, [r3, #32]
 8001f42:	e002      	b.n	8001f4a <I2C_init+0x116>
																								  therefore the TRISE[5:0] bits must be programmed with 09h.
																								  (1000 ns / 125 ns = 8 + 1)*/
		}

		/*  It must be at least 4 MHz to achieve Fm mode I²C frequencies*/
		else if (i2c_config->master_mode == FM_MODE && (i2c_config->PCLK_freq_in_mhz >= 4))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	79db      	ldrb	r3, [r3, #7]
 8001f48:	2b01      	cmp	r3, #1
			/* do configs */
		}

		/* enable the peripheral */

		I2C_X->CR1 |= (1 << PE);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e001      	b.n	8001f5c <I2C_init+0x128>

	}
	else
	{
		Local_u8_Error_State = NOK;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	75fb      	strb	r3, [r7, #23]
	}

	return Local_u8_Error_State;
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	000f4240 	.word	0x000f4240

08001f70 <i2C_Send_Start_Bit>:


uint8_t i2C_Send_Start_Bit(ST_I2C_Config_t* i2c_config)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]

	uint16_t temp_read = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	81bb      	strh	r3, [r7, #12]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f8a:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001f8e:	60bb      	str	r3, [r7, #8]

	/* Enable the ACK */
	I2C_X->CR1 |= (1 << ACK);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	601a      	str	r2, [r3, #0]
	/* send start condition to switch to master mode */
	I2C_X->CR1 |= (1 << START);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	601a      	str	r2, [r3, #0]

	/* wait till SB is set */
	while (!READ_BIT(I2C_X->SR1, SB));
 8001fa8:	bf00      	nop
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f9      	beq.n	8001faa <i2C_Send_Start_Bit+0x3a>

	/* Cleared by software by reading the SR1 register followed by writing the DR register*/
	temp_read = I2C_X->SR1;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	81bb      	strh	r3, [r7, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <i2C_Send_7_Bit_Slave_Address_With_Write>:
	/* send Stop Bit */
	I2C_X->CR1 |= (1 << STOP);
}

uint8_t i2C_Send_7_Bit_Slave_Address_With_Write(ST_I2C_Config_t* i2c_config, uint8_t slave_address)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
	uint8_t Local_u8_Error_State = OK;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fe4:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8001fe8:	613b      	str	r3, [r7, #16]

	/* Send Address */
	I2C_X->DR |= (slave_address << 1) & (MASTER_WRITE_ADDRESS_MASK);    /* LSB is 0 for write */
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	0052      	lsls	r2, r2, #1
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	611a      	str	r2, [r3, #16]

	/* wait for ADDR bit to set */
	while (!(READ_BIT(I2C_X->SR1, ADDR)));
 8001ff8:	bf00      	nop
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f9      	beq.n	8001ffa <i2C_Send_7_Bit_Slave_Address_With_Write+0x30>

	/* ADDR Bit cleared by reading SR1 register followed by reading SR2.*/
	uint8_t temp = I2C_X->SR1 | I2C_X->SR2;  // read SR1 and SR2 to clear the ADDR bit
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	73fb      	strb	r3, [r7, #15]
}
 8002016:	bf00      	nop
 8002018:	4618      	mov	r0, r3
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <i2C_Master_Transmit_DMA>:

uint8_t i2C_Send_Mem_Address(ST_I2C_Config_t* i2c_config, uint8_t mem_address);


uint8_t i2C_Master_Transmit_DMA(ST_I2C_Config_t* i2c_config, uint16_t slave_address, uint32_t Src_Addr, uint32_t data_len)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	460b      	mov	r3, r1
 8002032:	817b      	strh	r3, [r7, #10]
	uint8_t Local_u8_Error_State = OK;
 8002034:	2301      	movs	r3, #1
 8002036:	77fb      	strb	r3, [r7, #31]

	ST_I2C_RegDef_t* I2C_X = (ST_I2C_RegDef_t*)((uint32_t)&I2C->I2C1.CR1 + (i2c_config->i2c_num) * 0x400);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002042:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8002046:	61bb      	str	r3, [r7, #24]
	ST_DMA_RegDef_t* DMA_X = (ST_DMA_RegDef_t*)((uint32_t)DMA->DMA1_Peripheral.DMA_ISR + (i2c_config->dma_used) * 0x400);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	7adb      	ldrb	r3, [r3, #11]
 800204c:	029b      	lsls	r3, r3, #10
 800204e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002052:	f503 3318 	add.w	r3, r3, #155648	; 0x26000
 8002056:	617b      	str	r3, [r7, #20]


	/* Monitor the BUSY bit of I2C_SR2 (Status 2) register until the bus is idl */
	while (READ_BIT(I2C_X->SR2, BUSY));
 8002058:	bf00      	nop
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <i2C_Master_Transmit_DMA+0x36>

	i2C_Send_Start_Bit(i2c_config);
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff ff82 	bl	8001f70 <i2C_Send_Start_Bit>

	/* DMAEN bit must be set in the I2C_CR2 register before the ADDR event. */
	SET_BIT(I2C_X->CR2, DMAEN);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	605a      	str	r2, [r3, #4]

	i2C_Send_7_Bit_Slave_Address_With_Write(i2c_config, slave_address);
 8002078:	897b      	ldrh	r3, [r7, #10]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4619      	mov	r1, r3
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff ffa3 	bl	8001fca <i2C_Send_7_Bit_Slave_Address_With_Write>

	/* Set the I2C_DR register address in the DMA_SxPAR register */
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SPAR = (uint32_t)(&I2C_X->DR);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f103 0210 	add.w	r2, r3, #16
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	7b1b      	ldrb	r3, [r3, #12]
 800208e:	4610      	mov	r0, r2
 8002090:	6979      	ldr	r1, [r7, #20]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	6018      	str	r0, [r3, #0]

	/* Set the memory address in the DMA_SxMA0R register The data are loaded into I2C_DR from this memory after each TxE event.*/
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SM0AR = Src_Addr;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	7b1b      	ldrb	r3, [r3, #12]
 80020a4:	6979      	ldr	r1, [r7, #20]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3304      	adds	r3, #4
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	601a      	str	r2, [r3, #0]

	/* Configure the total number of bytes to be transferred in the DMA_SxNDTR register.After each TxE event, this value is decremented.*/
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SNDTR = data_len;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	7b1b      	ldrb	r3, [r3, #12]
 80020bc:	4619      	mov	r1, r3
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	460b      	mov	r3, r1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	3314      	adds	r3, #20
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	601a      	str	r2, [r3, #0]

	/* enable Event interrupt  */
	I2C_X->CR2 |= (1 << ITEVTEN);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]

	/* Activate the stream by setting the EN bit in the DMA_SxCR register.*/
	DMA_X->DMA_Stream[i2c_config->dma_stream_used_Tx].DMA_SCR |= (1 << 0);     // EN  bit is zero
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	7b1b      	ldrb	r3, [r3, #12]
 80020e0:	4619      	mov	r1, r3
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	460b      	mov	r3, r1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	440b      	add	r3, r1
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	3310      	adds	r3, #16
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	7b12      	ldrb	r2, [r2, #12]
 80020f6:	4610      	mov	r0, r2
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	6979      	ldr	r1, [r7, #20]
 80020fe:	4603      	mov	r3, r0
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4403      	add	r3, r0
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	3310      	adds	r3, #16
 800210a:	601a      	str	r2, [r3, #0]

	return Local_u8_Error_State;
 800210c:	7ffb      	ldrb	r3, [r7, #31]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <I2C1_EV_IRQHandler>:


/* ISRs*/

void I2C1_EV_IRQHandler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
	if (READ_BIT(I2C->I2C1.SR1, SB))
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <I2C1_EV_IRQHandler+0x16>
	{
		Flag_State = START_SEND;
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <I2C1_EV_IRQHandler+0xac>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, ADDR))
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <I2C1_EV_IRQHandler+0x28>
	{
		Flag_State = ADDRESS_SEND;
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <I2C1_EV_IRQHandler+0xac>)
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, BTF))
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <I2C1_EV_IRQHandler+0x3a>
	{
		Flag_State = BYTE_FINISHED;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <I2C1_EV_IRQHandler+0xac>)
 800214e:	2205      	movs	r2, #5
 8002150:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, ADD10))
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <I2C1_EV_IRQHandler+0x4c>
	{
		Flag_State = ADDRESS_10_SEND;
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <I2C1_EV_IRQHandler+0xac>)
 8002160:	2203      	movs	r2, #3
 8002162:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, STOPF))
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <I2C1_EV_IRQHandler+0x5e>
	{
		Flag_State = STOP_SEND;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <I2C1_EV_IRQHandler+0xac>)
 8002172:	2204      	movs	r2, #4
 8002174:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, RxNE))
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <I2C1_EV_IRQHandler+0x70>
	{
		Flag_State = DATA_REGISTER_NOT_EMPTY;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <I2C1_EV_IRQHandler+0xac>)
 8002184:	2207      	movs	r2, #7
 8002186:	701a      	strb	r2, [r3, #0]
	}
	if (READ_BIT(I2C->I2C1.SR1, TxE))
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	2b00      	cmp	r3, #0
 8002192:	d010      	beq.n	80021b6 <I2C1_EV_IRQHandler+0x9e>
	{
		Flag_State = DATA_REGISTER_EMPTY;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <I2C1_EV_IRQHandler+0xac>)
 8002196:	2206      	movs	r2, #6
 8002198:	701a      	strb	r2, [r3, #0]
		DMA->DMA1_Peripheral.DMA_Stream[STREAM6_USED_I2C].DMA_SCR &= ~(1 << 0);
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <I2C1_EV_IRQHandler+0xb0>)
 800219c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021a0:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <I2C1_EV_IRQHandler+0xb0>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

		I2C->I2C1.CR1 |= (1 << STOP);
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <I2C1_EV_IRQHandler+0xa8>)
 80021b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b4:	6013      	str	r3, [r2, #0]
	}
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40005400 	.word	0x40005400
 80021c4:	200001c0 	.word	0x200001c0
 80021c8:	40026000 	.word	0x40026000

080021cc <NVIC_EnableIRQ>:
#include "../../../Common/Error_type.h"



uint8_t NVIC_EnableIRQ(EN_IRQn_t IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]

	if (IRQn <= FMPI2C1_error_IRQn)
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b60      	cmp	r3, #96	; 0x60
 80021de:	d80e      	bhi.n	80021fe <NVIC_EnableIRQ+0x32>
	{
		NVIC_ISER[IRQn / 32] = 1 << (IRQn % 32);
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2201      	movs	r2, #1
 80021e8:	409a      	lsls	r2, r3
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80021f6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e001      	b.n	8002202 <NVIC_EnableIRQ+0x36>
	}
	else
	{
		Local_u8_Error_State = IRQn_SRC_ERR;
 80021fe:	2310      	movs	r3, #16
 8002200:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <RCC_Enable_HSI>:
#include "../inc/RCC_interface.h"



uint8_t RCC_Enable_HSI(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
	uint8_t Local_u8_Error_State = OK;
 8002216:	2301      	movs	r3, #1
 8002218:	71fb      	strb	r3, [r7, #7]
	uint16_t wait = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	80bb      	strh	r3, [r7, #4]
	SET_BIT(RCC->CR, HSION);
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <RCC_Enable_HSI+0x6c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <RCC_Enable_HSI+0x6c>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & (1 << HSIRDY)) == 0)
 800222a:	e009      	b.n	8002240 <RCC_Enable_HSI+0x30>
	{
		if (wait >= 500)
 800222c:	88bb      	ldrh	r3, [r7, #4]
 800222e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002232:	d302      	bcc.n	800223a <RCC_Enable_HSI+0x2a>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 8002234:	2304      	movs	r3, #4
 8002236:	71fb      	strb	r3, [r7, #7]
			break;
 8002238:	e008      	b.n	800224c <RCC_Enable_HSI+0x3c>
		}
		wait++;
 800223a:	88bb      	ldrh	r3, [r7, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	80bb      	strh	r3, [r7, #4]
	while ((RCC->CR & (1 << HSIRDY)) == 0)
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <RCC_Enable_HSI+0x6c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ef      	beq.n	800222c <RCC_Enable_HSI+0x1c>
	}
	SET_BIT(RCC->CIR, HSIRDYC); /* clear flag */
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <RCC_Enable_HSI+0x6c>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <RCC_Enable_HSI+0x6c>)
 8002252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002256:	60d3      	str	r3, [r2, #12]

	RCC->CFGR &= ~(CLOCK_SWITCH_MASK << SW0);
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <RCC_Enable_HSI+0x6c>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <RCC_Enable_HSI+0x6c>)
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (HSI_system_clock_select << SW0);
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <RCC_Enable_HSI+0x6c>)
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <RCC_Enable_HSI+0x6c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	6093      	str	r3, [r2, #8]

	return Local_u8_Error_State;
 800226c:	79fb      	ldrb	r3, [r7, #7]

}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <RCC_Enable_HSE>:
uint8_t RCC_Enable_HSE(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
	uint8_t Local_u8_Error_State = OK;
 8002286:	2301      	movs	r3, #1
 8002288:	71fb      	strb	r3, [r7, #7]
	uint16_t wait = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	80bb      	strh	r3, [r7, #4]
	SET_BIT(RCC->CR, HSEON);
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <RCC_Enable_HSE+0x70>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <RCC_Enable_HSE+0x70>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & (1 << HSERDY)) == 0)
 800229a:	e009      	b.n	80022b0 <RCC_Enable_HSE+0x30>
	{
		if (wait >= 500)
 800229c:	88bb      	ldrh	r3, [r7, #4]
 800229e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022a2:	d302      	bcc.n	80022aa <RCC_Enable_HSE+0x2a>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 80022a4:	2304      	movs	r3, #4
 80022a6:	71fb      	strb	r3, [r7, #7]
			break;
 80022a8:	e008      	b.n	80022bc <RCC_Enable_HSE+0x3c>
		}
		wait++;
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	3301      	adds	r3, #1
 80022ae:	80bb      	strh	r3, [r7, #4]
	while ((RCC->CR & (1 << HSERDY)) == 0)
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <RCC_Enable_HSE+0x70>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ef      	beq.n	800229c <RCC_Enable_HSE+0x1c>
	}
	SET_BIT(RCC->CIR, HSERDYC); /* clear flag */
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <RCC_Enable_HSE+0x70>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <RCC_Enable_HSE+0x70>)
 80022c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022c6:	60d3      	str	r3, [r2, #12]

	RCC->CFGR &= ~(CLOCK_SWITCH_MASK << SW0);
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <RCC_Enable_HSE+0x70>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <RCC_Enable_HSE+0x70>)
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (HSE_system_clock_select << SW0);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <RCC_Enable_HSE+0x70>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <RCC_Enable_HSE+0x70>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6093      	str	r3, [r2, #8]

	return Local_u8_Error_State;
 80022e0:	79fb      	ldrb	r3, [r7, #7]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <RCC_Enable_PLL>:

uint8_t RCC_Enable_PLL(ST_RCC_Config_t* st_rcc_config)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
	uint16_t wait = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	81bb      	strh	r3, [r7, #12]
	SET_BIT(RCC->CR, PLLON);
 8002304:	4b49      	ldr	r3, [pc, #292]	; (800242c <RCC_Enable_PLL+0x138>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a48      	ldr	r2, [pc, #288]	; (800242c <RCC_Enable_PLL+0x138>)
 800230a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230e:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & (1 << PLLRDY)) == 0)
 8002310:	e009      	b.n	8002326 <RCC_Enable_PLL+0x32>
	{
		if (wait >= 500)
 8002312:	89bb      	ldrh	r3, [r7, #12]
 8002314:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002318:	d302      	bcc.n	8002320 <RCC_Enable_PLL+0x2c>
		{
			Local_u8_Error_State = TIMEOUT_ERR;
 800231a:	2304      	movs	r3, #4
 800231c:	73fb      	strb	r3, [r7, #15]
			break;
 800231e:	e008      	b.n	8002332 <RCC_Enable_PLL+0x3e>
		}
		wait++;
 8002320:	89bb      	ldrh	r3, [r7, #12]
 8002322:	3301      	adds	r3, #1
 8002324:	81bb      	strh	r3, [r7, #12]
	while ((RCC->CR & (1 << PLLRDY)) == 0)
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <RCC_Enable_PLL+0x138>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ef      	beq.n	8002312 <RCC_Enable_PLL+0x1e>
	}

	/* Switch to PLL*/
	RCC->CFGR &= ~(CLOCK_SWITCH_MASK << SW0);
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <RCC_Enable_PLL+0x138>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4a3d      	ldr	r2, [pc, #244]	; (800242c <RCC_Enable_PLL+0x138>)
 8002338:	f023 0303 	bic.w	r3, r3, #3
 800233c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (PLL_P_system_clock_select << SW0);
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <RCC_Enable_PLL+0x138>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4a3a      	ldr	r2, [pc, #232]	; (800242c <RCC_Enable_PLL+0x138>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6093      	str	r3, [r2, #8]

	/* PLL Clock Source */
	if (st_rcc_config->PLL_clk_src == HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7a5b      	ldrb	r3, [r3, #9]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <RCC_Enable_PLL+0x6c>
	{
		CLEAR_BIT(RCC->PLLCFGR, PLLSRC);
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <RCC_Enable_PLL+0x138>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a35      	ldr	r2, [pc, #212]	; (800242c <RCC_Enable_PLL+0x138>)
 8002358:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800235c:	6053      	str	r3, [r2, #4]
 800235e:	e00c      	b.n	800237a <RCC_Enable_PLL+0x86>
	}
	else if (st_rcc_config->PLL_clk_src == HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7a5b      	ldrb	r3, [r3, #9]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <RCC_Enable_PLL+0x82>
	{
		SET_BIT(RCC->PLLCFGR, PLLSRC);
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <RCC_Enable_PLL+0x138>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a2f      	ldr	r2, [pc, #188]	; (800242c <RCC_Enable_PLL+0x138>)
 800236e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002372:	6053      	str	r3, [r2, #4]
 8002374:	e001      	b.n	800237a <RCC_Enable_PLL+0x86>
	}
	else
	{
		Local_u8_Error_State = PLL_CLK_SRC_ERR;
 8002376:	2305      	movs	r3, #5
 8002378:	73fb      	strb	r3, [r7, #15]
	}
	SET_BIT(RCC->CIR, PLLRDYC); /* clear flag */
 800237a:	4b2c      	ldr	r3, [pc, #176]	; (800242c <RCC_Enable_PLL+0x138>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4a2b      	ldr	r2, [pc, #172]	; (800242c <RCC_Enable_PLL+0x138>)
 8002380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002384:	60d3      	str	r3, [r2, #12]

	/* configuration for PLL*/

	if (IS_PLLM_DEVISION_FACTOR_CORRECT(st_rcc_config->PLLM_Pres))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	791b      	ldrb	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d90e      	bls.n	80023ac <RCC_Enable_PLL+0xb8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	791b      	ldrb	r3, [r3, #4]
 8002392:	2b3f      	cmp	r3, #63	; 0x3f
 8002394:	d80a      	bhi.n	80023ac <RCC_Enable_PLL+0xb8>
	{
		RCC->PLLCFGR = (RCC->PLLCFGR & (PLLM_DEVISION_FACTOR_MASK)) | (st_rcc_config->PLLM_Pres << PLLM0);
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <RCC_Enable_PLL+0x138>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f023 031f 	bic.w	r3, r3, #31
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	7912      	ldrb	r2, [r2, #4]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4a21      	ldr	r2, [pc, #132]	; (800242c <RCC_Enable_PLL+0x138>)
 80023a6:	430b      	orrs	r3, r1
 80023a8:	6053      	str	r3, [r2, #4]
 80023aa:	e001      	b.n	80023b0 <RCC_Enable_PLL+0xbc>
	}
	else
	{
		Local_u8_Error_State = PLLM_DEVISION_FACTOR_ERR;
 80023ac:	2306      	movs	r3, #6
 80023ae:	73fb      	strb	r3, [r7, #15]
	}

	if(IS_PLLN_MULTIPLICATION_FACTOR_CORRECT(st_rcc_config->PLLN_Factor))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	88db      	ldrh	r3, [r3, #6]
 80023b4:	2b31      	cmp	r3, #49	; 0x31
 80023b6:	d912      	bls.n	80023de <RCC_Enable_PLL+0xea>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	88db      	ldrh	r3, [r3, #6]
 80023bc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80023c0:	d80d      	bhi.n	80023de <RCC_Enable_PLL+0xea>
	{
		RCC->PLLCFGR = (RCC->PLLCFGR & (PLLN_MULTIPLICATION_FACTOR_MASK)) | (st_rcc_config->PLLN_Factor << PLLN0);
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <RCC_Enable_PLL+0x138>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	88d2      	ldrh	r2, [r2, #6]
 80023d2:	0192      	lsls	r2, r2, #6
 80023d4:	4611      	mov	r1, r2
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <RCC_Enable_PLL+0x138>)
 80023d8:	430b      	orrs	r3, r1
 80023da:	6053      	str	r3, [r2, #4]
 80023dc:	e001      	b.n	80023e2 <RCC_Enable_PLL+0xee>
	}
	else
	{
		Local_u8_Error_State = PLLN_MULTIPLICATION_FACTOR_ERR;
 80023de:	2307      	movs	r3, #7
 80023e0:	73fb      	strb	r3, [r7, #15]
	}

	if (IS_PLLP_DEVISION_FACTOR_CORRECT(st_rcc_config->PLLP_Pres))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7a1b      	ldrb	r3, [r3, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d113      	bne.n	8002418 <RCC_Enable_PLL+0x124>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7a1b      	ldrb	r3, [r3, #8]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d80f      	bhi.n	8002418 <RCC_Enable_PLL+0x124>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7a1b      	ldrb	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <RCC_Enable_PLL+0x124>
	{
		RCC->PLLCFGR = (RCC->PLLCFGR & (PLLP_DEVISION_FACTOR_MASK)) | (st_rcc_config->PLLP_Pres << PLLP0);
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <RCC_Enable_PLL+0x138>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	7a12      	ldrb	r2, [r2, #8]
 800240c:	0412      	lsls	r2, r2, #16
 800240e:	4611      	mov	r1, r2
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <RCC_Enable_PLL+0x138>)
 8002412:	430b      	orrs	r3, r1
 8002414:	6053      	str	r3, [r2, #4]
 8002416:	e001      	b.n	800241c <RCC_Enable_PLL+0x128>
	}
	else
	{
		Local_u8_Error_State = PLLP_DEVISION_FACTOR_ERR;
 8002418:	2308      	movs	r3, #8
 800241a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8_Error_State;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <AHP_Prescaler>:
uint8_t RCC_Enable_LSI(void);
uint8_t RCC_Enable_LSE(void);
uint8_t RCC_MCO_CLK(uint8_t MCO_CLK_source);

uint8_t AHP_Prescaler(EN_AHP_SysClk_Prescaler_t AHP_prescaler_value)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
	if (IS_AHB_PRESCALER_CORRECT(AHP_prescaler_value))
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d902      	bls.n	800244a <AHP_Prescaler+0x1a>
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b0f      	cmp	r3, #15
 8002448:	d902      	bls.n	8002450 <AHP_Prescaler+0x20>
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <AHP_Prescaler+0x36>
	{
		RCC->CFGR = (RCC->CFGR & (AHP_PRESCALER_MASK)) | (AHP_prescaler_value << HPRE0);
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <AHP_Prescaler+0x48>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	4611      	mov	r1, r2
 800245e:	4a06      	ldr	r2, [pc, #24]	; (8002478 <AHP_Prescaler+0x48>)
 8002460:	430b      	orrs	r3, r1
 8002462:	6093      	str	r3, [r2, #8]
 8002464:	e001      	b.n	800246a <AHP_Prescaler+0x3a>
	}
	else
	{
		Local_u8_Error_State = AHB_PRESCALER_ERR;
 8002466:	2309      	movs	r3, #9
 8002468:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023800 	.word	0x40023800

0800247c <APB1_Prescaler>:
uint8_t APB1_Prescaler(EN_APB1_HClk_Prescaler_t APB1_prescaler_value)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
	if (IS_APB1_PRESCALER_CORRECT(APB1_prescaler_value))
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d902      	bls.n	8002496 <APB1_Prescaler+0x1a>
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b07      	cmp	r3, #7
 8002494:	d902      	bls.n	800249c <APB1_Prescaler+0x20>
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <APB1_Prescaler+0x36>
	{
		RCC->CFGR = (RCC->CFGR & (APB1_PRESCALER_MASK)) | (APB1_prescaler_value << PPRE10);
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <APB1_Prescaler+0x48>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	0292      	lsls	r2, r2, #10
 80024a8:	4611      	mov	r1, r2
 80024aa:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <APB1_Prescaler+0x48>)
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	e001      	b.n	80024b6 <APB1_Prescaler+0x3a>
	}
	else
	{
		Local_u8_Error_State = APB1_PRESCALER_ERR;
 80024b2:	230a      	movs	r3, #10
 80024b4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40023800 	.word	0x40023800

080024c8 <APB2_Prescaler>:
uint8_t APB2_Prescaler(EN_APB2_HClk_Prescaler_t APB2_prescaler_value)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
	if (IS_APB2_PRESCALER_CORRECT(APB2_prescaler_value))
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d902      	bls.n	80024e2 <APB2_Prescaler+0x1a>
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	d902      	bls.n	80024e8 <APB2_Prescaler+0x20>
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <APB2_Prescaler+0x36>
	{
		RCC->CFGR = (RCC->CFGR & (APB2_PRESCALER_MASK)) | (APB2_prescaler_value << PPRE20);
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <APB2_Prescaler+0x48>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	0352      	lsls	r2, r2, #13
 80024f4:	4611      	mov	r1, r2
 80024f6:	4a06      	ldr	r2, [pc, #24]	; (8002510 <APB2_Prescaler+0x48>)
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6093      	str	r3, [r2, #8]
 80024fc:	e001      	b.n	8002502 <APB2_Prescaler+0x3a>
	}
	else
	{
		Local_u8_Error_State = APB2_PRESCALER_ERR;
 80024fe:	230b      	movs	r3, #11
 8002500:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 8002502:	7bfb      	ldrb	r3, [r7, #15]

}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40023800 	.word	0x40023800

08002514 <RCC_Enable_Peripheral>:
uint8_t ADC_Prescaler(uint8_t ADC_prescaler_value);
uint8_t USB_Prescaler(uint8_t USB_prescaler_value);

uint8_t RCC_Enable_Peripheral(uint8_t peripheral_idx)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8_Error_State = OK;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
	if (PERIPHERAL_IN_RCC_AHB1ENR(peripheral_idx))
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	2b1f      	cmp	r3, #31
 8002526:	d80a      	bhi.n	800253e <RCC_Enable_Peripheral+0x2a>
	{
		SET_BIT(RCC->AHB1ENR, peripheral_idx);
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4611      	mov	r1, r2
 8002536:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 8002538:	430b      	orrs	r3, r1
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	e053      	b.n	80025e6 <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_AHB2ENR(peripheral_idx))
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b1f      	cmp	r3, #31
 8002542:	d910      	bls.n	8002566 <RCC_Enable_Peripheral+0x52>
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b3f      	cmp	r3, #63	; 0x3f
 8002548:	d80d      	bhi.n	8002566 <RCC_Enable_Peripheral+0x52>
	{
		peripheral_idx = peripheral_idx - 32;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	3b20      	subs	r3, #32
 800254e:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB2ENR, peripheral_idx);
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4611      	mov	r1, r2
 800255e:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 8002560:	430b      	orrs	r3, r1
 8002562:	6353      	str	r3, [r2, #52]	; 0x34
 8002564:	e03f      	b.n	80025e6 <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_AHB3ENR(peripheral_idx))
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b3f      	cmp	r3, #63	; 0x3f
 800256a:	d910      	bls.n	800258e <RCC_Enable_Peripheral+0x7a>
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b5f      	cmp	r3, #95	; 0x5f
 8002570:	d80d      	bhi.n	800258e <RCC_Enable_Peripheral+0x7a>
	{
		peripheral_idx = peripheral_idx - 64;
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	3b40      	subs	r3, #64	; 0x40
 8002576:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB3ENR, peripheral_idx);
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	79fa      	ldrb	r2, [r7, #7]
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 8002588:	430b      	orrs	r3, r1
 800258a:	6393      	str	r3, [r2, #56]	; 0x38
 800258c:	e02b      	b.n	80025e6 <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_APB1ENR(peripheral_idx))
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b5f      	cmp	r3, #95	; 0x5f
 8002592:	d911      	bls.n	80025b8 <RCC_Enable_Peripheral+0xa4>
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0d      	blt.n	80025b8 <RCC_Enable_Peripheral+0xa4>
	{
		peripheral_idx = peripheral_idx - 96;
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	3b60      	subs	r3, #96	; 0x60
 80025a0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB1ENR, peripheral_idx);
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	79fa      	ldrb	r2, [r7, #7]
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 80025b2:	430b      	orrs	r3, r1
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	e016      	b.n	80025e6 <RCC_Enable_Peripheral+0xd2>
	}
	else if (PERIPHERAL_IN_RCC_APB2ENR(peripheral_idx))
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da10      	bge.n	80025e2 <RCC_Enable_Peripheral+0xce>
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b9f      	cmp	r3, #159	; 0x9f
 80025c4:	d80d      	bhi.n	80025e2 <RCC_Enable_Peripheral+0xce>
	{
		peripheral_idx = peripheral_idx - 128;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	3b80      	subs	r3, #128	; 0x80
 80025ca:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB2ENR, peripheral_idx);
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	79fa      	ldrb	r2, [r7, #7]
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4611      	mov	r1, r2
 80025da:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <RCC_Enable_Peripheral+0xe0>)
 80025dc:	430b      	orrs	r3, r1
 80025de:	6453      	str	r3, [r2, #68]	; 0x44
 80025e0:	e001      	b.n	80025e6 <RCC_Enable_Peripheral+0xd2>
	}
	else
	{
		Local_u8_Error_State = PERIPHERAL_NOT_FOUND_ERR;
 80025e2:	230c      	movs	r3, #12
 80025e4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8_Error_State;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40023800 	.word	0x40023800

080025f8 <RCC_Config>:
	return Local_u8_Error_State;
}


uint8_t RCC_Config(ST_RCC_Config_t* st_rcc_config)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8_Error_State = OK;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]

	if (st_rcc_config->Sys_Clk_Select == HSI_system_clock_select)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <RCC_Config+0x1e>
	{
		Local_u8_Error_State = RCC_Enable_HSI();
 800260c:	f7ff fe00 	bl	8002210 <RCC_Enable_HSI>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e014      	b.n	8002640 <RCC_Config+0x48>
	}
	else if (st_rcc_config->Sys_Clk_Select == HSE_system_clock_select)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d104      	bne.n	8002628 <RCC_Config+0x30>
	{
		Local_u8_Error_State = RCC_Enable_HSE();
 800261e:	f7ff fe2f 	bl	8002280 <RCC_Enable_HSE>
 8002622:	4603      	mov	r3, r0
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	e00b      	b.n	8002640 <RCC_Config+0x48>
	}
	else if(st_rcc_config->Sys_Clk_Select == PLL_P_system_clock_select)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d105      	bne.n	800263c <RCC_Config+0x44>
	{
		Local_u8_Error_State = RCC_Enable_PLL(st_rcc_config);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fe5f 	bl	80022f4 <RCC_Enable_PLL>
 8002636:	4603      	mov	r3, r0
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e001      	b.n	8002640 <RCC_Config+0x48>
	}
	else
	{
		Local_u8_Error_State = CLK_SRC_ERR;
 800263c:	230d      	movs	r3, #13
 800263e:	73fb      	strb	r3, [r7, #15]
	}

	Local_u8_Error_State = AHP_Prescaler(st_rcc_config->AHP_Pres);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	785b      	ldrb	r3, [r3, #1]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fef3 	bl	8002430 <AHP_Prescaler>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
	Local_u8_Error_State = APB1_Prescaler(st_rcc_config->APB1_Pres);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	789b      	ldrb	r3, [r3, #2]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff12 	bl	800247c <APB1_Prescaler>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]
	Local_u8_Error_State = APB2_Prescaler(st_rcc_config->APB2_Pres);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff31 	bl	80024c8 <APB2_Prescaler>
 8002666:	4603      	mov	r3, r0
 8002668:	73fb      	strb	r3, [r7, #15]

	return Local_u8_Error_State;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2C_GPIO_init>:
	.month = 0 ,
	.year = 0 ,
};

void I2C_GPIO_init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
	ST_Pin_Config butt1_pin =
 800267a:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <I2C_GPIO_init+0x4c>)
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	6018      	str	r0, [r3, #0]
 8002686:	3304      	adds	r3, #4
 8002688:	8019      	strh	r1, [r3, #0]
 800268a:	3302      	adds	r3, #2
 800268c:	0c0a      	lsrs	r2, r1, #16
 800268e:	701a      	strb	r2, [r3, #0]
			.speed = HIGH ,
			.Output_Type = OPEN_DRAIN,
			.PullType = PULL_UP ,
	};

	ST_Pin_Config butt2_pin =
 8002690:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <I2C_GPIO_init+0x50>)
 8002692:	463b      	mov	r3, r7
 8002694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002698:	6018      	str	r0, [r3, #0]
 800269a:	3304      	adds	r3, #4
 800269c:	8019      	strh	r1, [r3, #0]
 800269e:	3302      	adds	r3, #2
 80026a0:	0c0a      	lsrs	r2, r1, #16
 80026a2:	701a      	strb	r2, [r3, #0]
			.speed = HIGH ,
			.Output_Type = OPEN_DRAIN,
			.PullType = PULL_UP,
	};

	GPIO_u8PIN_init(&butt1_pin);
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fae5 	bl	8001c78 <GPIO_u8PIN_init>
	GPIO_u8PIN_init(&butt2_pin);
 80026ae:	463b      	mov	r3, r7
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fae1 	bl	8001c78 <GPIO_u8PIN_init>

}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	080028b4 	.word	0x080028b4
 80026c4:	080028bc 	.word	0x080028bc

080026c8 <call_func>:


int i2x = 20;
void call_func(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
	i2x = 60;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <call_func+0x14>)
 80026ce:	223c      	movs	r2, #60	; 0x3c
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	20000008 	.word	0x20000008

080026e0 <main>:
uint8_t src[20] = { 0 };

uint8_t dest[20] = { 0 };

int main()
{
 80026e0:	b5b0      	push	{r4, r5, r7, lr}
 80026e2:	b09e      	sub	sp, #120	; 0x78
 80026e4:	af00      	add	r7, sp, #0
	ST_RCC_Config_t rcc_user_specs =
 80026e6:	4a41      	ldr	r2, [pc, #260]	; (80027ec <main+0x10c>)
 80026e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ee:	c303      	stmia	r3!, {r0, r1}
 80026f0:	801a      	strh	r2, [r3, #0]
		.AHP_Pres = AHB_SYSCLK_not_devided,
		.APB1_Pres = APB1_HCLK_not_divided,
		.APB2_Pres = APB2_HCLK_not_divided
	};

	RCC_Config(&rcc_user_specs);
 80026f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff7e 	bl	80025f8 <RCC_Config>

	RCC_Enable_Peripheral(GPIOBEN);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff ff09 	bl	8002514 <RCC_Enable_Peripheral>

	RCC_Enable_Peripheral(I2C1EN);
 8002702:	2075      	movs	r0, #117	; 0x75
 8002704:	f7ff ff06 	bl	8002514 <RCC_Enable_Peripheral>

	I2C_GPIO_init();
 8002708:	f7ff ffb4 	bl	8002674 <I2C_GPIO_init>

	ST_I2C_Config_t i2c1_config =
 800270c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	2301      	movs	r3, #1
 8002722:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8002726:	2306      	movs	r3, #6
 8002728:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800272c:	2305      	movs	r3, #5
 800272e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002732:	2310      	movs	r3, #16
 8002734:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8002738:	2364      	movs	r3, #100	; 0x64
 800273a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		.SCL_freq_in_khz = 100,
		.smbus_mode = I2C_MODE,
		.smbus_type = SMBUS_DEVICE,
	};

	I2C_init(&i2c1_config);
 800273e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fb76 	bl	8001e34 <I2C_init>

	RCC_Enable_Peripheral(DMA1EN);
 8002748:	2015      	movs	r0, #21
 800274a:	f7ff fee3 	bl	8002514 <RCC_Enable_Peripheral>


	ST_DMA_config_t dma_config_Rx =
 800274e:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <main+0x110>)
 8002750:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002754:	461d      	mov	r5, r3
 8002756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002762:	e884 0003 	stmia.w	r4, {r0, r1}
		.DMA_p_allign = BYTE ,
		.DMA_mem_allign = BYTE,
		.DMA_str_priority = HIGH_PRIORITY ,
	};

	DMA_Init(&dma_config_Rx);
 8002766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fe16 	bl	800039c <DMA_Init>

	ST_DMA_config_t dma_config_Tx =
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <main+0x114>)
 8002772:	463c      	mov	r4, r7
 8002774:	461d      	mov	r5, r3
 8002776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002782:	e884 0003 	stmia.w	r4, {r0, r1}
		.DMA_p_allign = BYTE ,
		.DMA_mem_allign = BYTE,
		.DMA_str_priority = HIGH_PRIORITY ,
	};

	DMA_Init(&dma_config_Tx);
 8002786:	463b      	mov	r3, r7
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe07 	bl	800039c <DMA_Init>

	DMA_Set_Callback(&dma_config_Rx, Transfer_Complete_ID);
 800278e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe f907 	bl	80009a8 <DMA_Set_Callback>
	DMA_Set_Callback(&dma_config_Tx, Transfer_Complete_ID);
 800279a:	463b      	mov	r3, r7
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe f902 	bl	80009a8 <DMA_Set_Callback>

	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027a4:	2010      	movs	r0, #16
 80027a6:	f7ff fd11 	bl	80021cc <NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027aa:	2011      	movs	r0, #17
 80027ac:	f7ff fd0e 	bl	80021cc <NVIC_EnableIRQ>

	uint8_t slave_add = 0x68;
 80027b0:	2368      	movs	r3, #104	; 0x68
 80027b2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	for (uint8_t i = 0; i < 20; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80027bc:	e00a      	b.n	80027d4 <main+0xf4>
	{
		src[i] = i;
 80027be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80027c2:	490d      	ldr	r1, [pc, #52]	; (80027f8 <main+0x118>)
 80027c4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80027c8:	54ca      	strb	r2, [r1, r3]
	for (uint8_t i = 0; i < 20; i++)
 80027ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80027ce:	3301      	adds	r3, #1
 80027d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80027d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80027d8:	2b13      	cmp	r3, #19
 80027da:	d9f0      	bls.n	80027be <main+0xde>
	}

	RTC_DS1307_Set_Date(&i2c1_config, &cur_date);
 80027dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <main+0x11c>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fdc4 	bl	8000370 <RTC_DS1307_Set_Date>
	while (1)
 80027e8:	e7fe      	b.n	80027e8 <main+0x108>
 80027ea:	bf00      	nop
 80027ec:	080028c4 	.word	0x080028c4
 80027f0:	080028d0 	.word	0x080028d0
 80027f4:	080028f8 	.word	0x080028f8
 80027f8:	200001c4 	.word	0x200001c4
 80027fc:	20000000 	.word	0x20000000

08002800 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002802:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002804:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <LoopForever+0x6>)
  ldr r1, =_edata
 800280a:	490d      	ldr	r1, [pc, #52]	; (8002840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <LoopForever+0xe>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002820:	4c0a      	ldr	r4, [pc, #40]	; (800284c <LoopForever+0x16>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800282e:	f000 f811 	bl	8002854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002832:	f7ff ff55 	bl	80026e0 <main>

08002836 <LoopForever>:

LoopForever:
  b LoopForever
 8002836:	e7fe      	b.n	8002836 <LoopForever>
  ldr   r0, =_estack
 8002838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800283c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002840:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002844:	08002928 	.word	0x08002928
  ldr r2, =_sbss
 8002848:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800284c:	200001d8 	.word	0x200001d8

08002850 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002850:	e7fe      	b.n	8002850 <ADC_IRQHandler>
	...

08002854 <__libc_init_array>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	4d0d      	ldr	r5, [pc, #52]	; (800288c <__libc_init_array+0x38>)
 8002858:	4c0d      	ldr	r4, [pc, #52]	; (8002890 <__libc_init_array+0x3c>)
 800285a:	1b64      	subs	r4, r4, r5
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	2600      	movs	r6, #0
 8002860:	42a6      	cmp	r6, r4
 8002862:	d109      	bne.n	8002878 <__libc_init_array+0x24>
 8002864:	4d0b      	ldr	r5, [pc, #44]	; (8002894 <__libc_init_array+0x40>)
 8002866:	4c0c      	ldr	r4, [pc, #48]	; (8002898 <__libc_init_array+0x44>)
 8002868:	f000 f818 	bl	800289c <_init>
 800286c:	1b64      	subs	r4, r4, r5
 800286e:	10a4      	asrs	r4, r4, #2
 8002870:	2600      	movs	r6, #0
 8002872:	42a6      	cmp	r6, r4
 8002874:	d105      	bne.n	8002882 <__libc_init_array+0x2e>
 8002876:	bd70      	pop	{r4, r5, r6, pc}
 8002878:	f855 3b04 	ldr.w	r3, [r5], #4
 800287c:	4798      	blx	r3
 800287e:	3601      	adds	r6, #1
 8002880:	e7ee      	b.n	8002860 <__libc_init_array+0xc>
 8002882:	f855 3b04 	ldr.w	r3, [r5], #4
 8002886:	4798      	blx	r3
 8002888:	3601      	adds	r6, #1
 800288a:	e7f2      	b.n	8002872 <__libc_init_array+0x1e>
 800288c:	08002920 	.word	0x08002920
 8002890:	08002920 	.word	0x08002920
 8002894:	08002920 	.word	0x08002920
 8002898:	08002924 	.word	0x08002924

0800289c <_init>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	bf00      	nop
 80028a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a2:	bc08      	pop	{r3}
 80028a4:	469e      	mov	lr, r3
 80028a6:	4770      	bx	lr

080028a8 <_fini>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr
