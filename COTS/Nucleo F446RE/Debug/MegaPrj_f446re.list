
MegaPrj_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000191c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001ae0  08001ae0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001ae0  08001ae0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08001ae0  08001ae0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ae0  08001ae0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ae0  08001ae0  00011ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ae4  08001ae4  00011ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08001ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000090  08001b78  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08001b78  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003e9b  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000de6  00000000  00000000  00023f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000448  00000000  00000000  00024d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000312  00000000  00000000  000251d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023b6  00000000  00000000  000254e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000053b0  00000000  00000000  00027898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b554  00000000  00000000  0002cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ef0  00000000  00000000  0003819c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0003908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000090 	.word	0x20000090
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001ac8 	.word	0x08001ac8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000094 	.word	0x20000094
 8000200:	08001ac8 	.word	0x08001ac8

08000204 <DMA1_Stream7_IRQHandler>:
#include "HAL/RTC/DS1307_RTC_interface.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void DMA1_Stream7_IRQHandler(){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	while(1){}
 8000208:	e7fe      	b.n	8000208 <DMA1_Stream7_IRQHandler+0x4>

0800020a <main>:
}

int main(void)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	b082      	sub	sp, #8
 800020e:	af00      	add	r7, sp, #0
	uint8_t rtc_status = ds1307_RTC_init();
 8000210:	f000 f803 	bl	800021a <ds1307_RTC_init>
 8000214:	4603      	mov	r3, r0
 8000216:	71fb      	strb	r3, [r7, #7]

    /* Loop forever */
	for(;;);
 8000218:	e7fe      	b.n	8000218 <main+0xe>

0800021a <ds1307_RTC_init>:
			.I2C_Num = I2C_NUMBER_1,
			.I2C_Pclk_MHZ = 16,
			.SCL_Frequency_KHZ =100,
			.Stretch_state =CLK_STRETCH_ENABLED};

uint8_t ds1307_RTC_init(){ //Error State return CH bit. If it's is 1 so init failed
 800021a:	b580      	push	{r7, lr}
 800021c:	b082      	sub	sp, #8
 800021e:	af00      	add	r7, sp, #0
	//init I2C pins

	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOBEN);
 8000220:	2001      	movs	r0, #1
 8000222:	f001 f9e3 	bl	80015ec <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOAEN);
 8000226:	2000      	movs	r0, #0
 8000228:	f001 f9e0 	bl	80015ec <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
 800022c:	2015      	movs	r0, #21
 800022e:	f001 f9dd 	bl	80015ec <RCC_AHB1EnableCLK>
	ds1307_i2c_pin_config();
 8000232:	f000 f81b 	bl	800026c <ds1307_i2c_pin_config>
	RCC_APB1EnableCLK(RCC_APB1ENR_I2C1EN);
 8000236:	2015      	movs	r0, #21
 8000238:	f001 f9f0 	bl	800161c <RCC_APB1EnableCLK>

	//init i2c driver + dma
	ds1307_i2c_config();
 800023c:	f000 f82e 	bl	800029c <ds1307_i2c_config>
	I2C_Enable_DMA(I2C_Num);
 8000240:	2000      	movs	r0, #0
 8000242:	f001 f885 	bl	8001350 <I2C_Enable_DMA>
	//init dma for both I2C_RX & I2C_TX
	ds1307_dma_config();
 8000246:	f000 f833 	bl	80002b0 <ds1307_dma_config>


	// make clk halt = 0
	ds1307_write(0x00,DS1307_SEC_ADD);
 800024a:	2100      	movs	r1, #0
 800024c:	2000      	movs	r0, #0
 800024e:	f000 f83d 	bl	80002cc <ds1307_write>
	//read clk halt bit
	uint8_t clkState =55;
 8000252:	2337      	movs	r3, #55	; 0x37
 8000254:	71fb      	strb	r3, [r7, #7]
	clkState = ds1307_read(DS1307_SEC_ADD);
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f856 	bl	8000308 <ds1307_read>
 800025c:	4603      	mov	r3, r0
 800025e:	71fb      	strb	r3, [r7, #7]
return clkState;
 8000260:	79fb      	ldrb	r3, [r7, #7]
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <ds1307_i2c_pin_config>:
	u8_rtc_date->MONTH= bcd_to_binary(ds1307_read(DS1307_MONTH_ADD));
	u8_rtc_date->YEAR= bcd_to_binary(ds1307_read(DS1307_YEAR_ADD));
}

// function to configure the data and clk pins of the I2C by GPIO
static void ds1307_i2c_pin_config(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	GPIO_u8PinInit(&scl_config);
 8000270:	4807      	ldr	r0, [pc, #28]	; (8000290 <ds1307_i2c_pin_config+0x24>)
 8000272:	f000 fd19 	bl	8000ca8 <GPIO_u8PinInit>
	GPIO_u8PinInit(&sda_config);
 8000276:	4807      	ldr	r0, [pc, #28]	; (8000294 <ds1307_i2c_pin_config+0x28>)
 8000278:	f000 fd16 	bl	8000ca8 <GPIO_u8PinInit>
	GPIO_u8PinInit(&led);
 800027c:	4806      	ldr	r0, [pc, #24]	; (8000298 <ds1307_i2c_pin_config+0x2c>)
 800027e:	f000 fd13 	bl	8000ca8 <GPIO_u8PinInit>
	GPIO_u8SetPinValue(PORTA, PIN5, PIN_HIGH);
 8000282:	2201      	movs	r2, #1
 8000284:	2105      	movs	r1, #5
 8000286:	2000      	movs	r0, #0
 8000288:	f000 fe3c 	bl	8000f04 <GPIO_u8SetPinValue>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000020 	.word	0x20000020
 8000294:	20000018 	.word	0x20000018
 8000298:	20000028 	.word	0x20000028

0800029c <ds1307_i2c_config>:

// function to configure the I2C module
static void ds1307_i2c_config(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	I2C_Init(&i2c_config);
 80002a0:	4802      	ldr	r0, [pc, #8]	; (80002ac <ds1307_i2c_config+0x10>)
 80002a2:	f000 fe6d 	bl	8000f80 <I2C_Init>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000030 	.word	0x20000030

080002b0 <ds1307_dma_config>:

//function to configure DMA for I2C1_rx and I2C1_tx
static void ds1307_dma_config(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	DMA1_init(&i2c1RX_dma_config);
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <ds1307_dma_config+0x14>)
 80002b6:	f000 f84f 	bl	8000358 <DMA1_init>
	DMA1_init(&i2c1TX_dma_config);
 80002ba:	4803      	ldr	r0, [pc, #12]	; (80002c8 <ds1307_dma_config+0x18>)
 80002bc:	f000 f84c 	bl	8000358 <DMA1_init>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000000 	.word	0x20000000
 80002c8:	2000000c 	.word	0x2000000c

080002cc <ds1307_write>:
 * @function 		:	ds1307_write
 * @brief			:	write in ds1307_RTC
 * @param			:	value: value to be write in the RTC
 * 					:	address: REG address that the value is going to be written in
 */
static void ds1307_write(uint8_t value ,uint8_t reg_address ){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af02      	add	r7, sp, #8
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2]= {reg_address,value};
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	733b      	strb	r3, [r7, #12]
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	737b      	strb	r3, [r7, #13]
	//transmit slaveAddress, RegAddress then Value
	I2C_Master_Transmit_DMA(&i2c_config, DS1307_I2C_SALVE_ADDRESS_W, tx, 2, &i2c1TX_dma_config);
 80002e4:	f107 020c 	add.w	r2, r7, #12
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <ds1307_write+0x34>)
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2302      	movs	r3, #2
 80002ee:	21d0      	movs	r1, #208	; 0xd0
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <ds1307_write+0x38>)
 80002f2:	f000 ff81 	bl	80011f8 <I2C_Master_Transmit_DMA>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2000000c 	.word	0x2000000c
 8000304:	20000030 	.word	0x20000030

08000308 <ds1307_read>:
/*
 * @function 		:	ds1307_read
 * @brief			:	read from ds1307_RTC
 * @param			:	address: REG address that is going to be read
 */
static uint8_t ds1307_read(uint8_t reg_address ){
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	uint8_t recived_data;
	//combined msg write the slave address with WRITE(LSB 0), reg address then send the slave address with READ(LSB 1) to read it

	//send Address packet with write
	I2C_SendAddressPacketMTransmitter_DMA(&i2c_config, DS1307_I2C_SALVE_ADDRESS_W, &i2c1TX_dma_config);
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <ds1307_read+0x44>)
 8000314:	21d0      	movs	r1, #208	; 0xd0
 8000316:	480e      	ldr	r0, [pc, #56]	; (8000350 <ds1307_read+0x48>)
 8000318:	f001 f8e2 	bl	80014e0 <I2C_SendAddressPacketMTransmitter_DMA>

	//send regAdress to access
	I2C_SendDataPacket_DMA(&i2c_config, reg_address, &i2c1TX_dma_config);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a0b      	ldr	r2, [pc, #44]	; (800034c <ds1307_read+0x44>)
 8000320:	4619      	mov	r1, r3
 8000322:	480b      	ldr	r0, [pc, #44]	; (8000350 <ds1307_read+0x48>)
 8000324:	f001 f91a 	bl	800155c <I2C_SendDataPacket_DMA>

	//send repeated start with Address packet with read
	I2C_SendAddressPacketMReceiver_DMA(&i2c_config, DS1307_I2C_SALVE_ADDRESS_R,&i2c1TX_dma_config );
 8000328:	4a08      	ldr	r2, [pc, #32]	; (800034c <ds1307_read+0x44>)
 800032a:	21d1      	movs	r1, #209	; 0xd1
 800032c:	4808      	ldr	r0, [pc, #32]	; (8000350 <ds1307_read+0x48>)
 800032e:	f001 f933 	bl	8001598 <I2C_SendAddressPacketMReceiver_DMA>

	//receive data
	I2C_Master_Receive_DMA(&i2c_config, &recived_data, &i2c1RX_dma_config);
 8000332:	f107 030f 	add.w	r3, r7, #15
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <ds1307_read+0x4c>)
 8000338:	4619      	mov	r1, r3
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <ds1307_read+0x48>)
 800033c:	f000 ffe4 	bl	8001308 <I2C_Master_Receive_DMA>
	return recived_data;
 8000340:	7bfb      	ldrb	r3, [r7, #15]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000000c 	.word	0x2000000c
 8000350:	20000030 	.word	0x20000030
 8000354:	20000000 	.word	0x20000000

08000358 <DMA1_init>:
#include "DMA1_config.h"
#include "DMA1_interface.h"

static void (*ptr_callBack[9])(void);
uint8_t DMA1_init(DMA1_CONFIGRATION_t* config)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 8000360:	2301      	movs	r3, #1
 8000362:	73fb      	strb	r3, [r7, #15]

	if(config!=NULL)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	f000 820f 	beq.w	800078a <DMA1_init+0x432>
	{
		if(config->channelNum>CHANNEL7||config->streamNum>STREAM7)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	79db      	ldrb	r3, [r3, #7]
 8000370:	2b07      	cmp	r3, #7
 8000372:	d803      	bhi.n	800037c <DMA1_init+0x24>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b07      	cmp	r3, #7
 800037a:	d901      	bls.n	8000380 <DMA1_init+0x28>
		{
			Local_u8ErrorState = NOK;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

		}
		/*****choose channel******/
		DMA1_SCRx(config->streamNum)&=~(DMA1_CHSEL_MASK<<DMA1_SCR_CHSEL);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	4613      	mov	r3, r2
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	461a      	mov	r2, r3
 8000390:	4bbe      	ldr	r3, [pc, #760]	; (800068c <DMA1_init+0x334>)
 8000392:	4413      	add	r3, r2
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	460b      	mov	r3, r1
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	440b      	add	r3, r1
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4619      	mov	r1, r3
 80003a6:	4bb9      	ldr	r3, [pc, #740]	; (800068c <DMA1_init+0x334>)
 80003a8:	440b      	add	r3, r1
 80003aa:	4619      	mov	r1, r3
 80003ac:	f022 6360 	bic.w	r3, r2, #234881024	; 0xe000000
 80003b0:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)|=(config->channelNum<<DMA1_SCR_CHSEL);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	461a      	mov	r2, r3
 80003b8:	4613      	mov	r3, r2
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	4413      	add	r3, r2
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	461a      	mov	r2, r3
 80003c2:	4bb2      	ldr	r3, [pc, #712]	; (800068c <DMA1_init+0x334>)
 80003c4:	4413      	add	r3, r2
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	79db      	ldrb	r3, [r3, #7]
 80003cc:	065b      	lsls	r3, r3, #25
 80003ce:	4618      	mov	r0, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4619      	mov	r1, r3
 80003d6:	460b      	mov	r3, r1
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	440b      	add	r3, r1
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	4619      	mov	r1, r3
 80003e0:	4baa      	ldr	r3, [pc, #680]	; (800068c <DMA1_init+0x334>)
 80003e2:	440b      	add	r3, r1
 80003e4:	4619      	mov	r1, r3
 80003e6:	ea42 0300 	orr.w	r3, r2, r0
 80003ea:	600b      	str	r3, [r1, #0]
		/*****choose priority******/
		DMA1_SCRx(config->streamNum)&=~(DMA1_PRIORITY_MASK <<DMA1_SCR_PRIORITY );
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	461a      	mov	r2, r3
 80003f2:	4613      	mov	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	461a      	mov	r2, r3
 80003fc:	4ba3      	ldr	r3, [pc, #652]	; (800068c <DMA1_init+0x334>)
 80003fe:	4413      	add	r3, r2
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4619      	mov	r1, r3
 8000408:	460b      	mov	r3, r1
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	440b      	add	r3, r1
 800040e:	00db      	lsls	r3, r3, #3
 8000410:	4619      	mov	r1, r3
 8000412:	4b9e      	ldr	r3, [pc, #632]	; (800068c <DMA1_init+0x334>)
 8000414:	440b      	add	r3, r1
 8000416:	4619      	mov	r1, r3
 8000418:	f422 3340 	bic.w	r3, r2, #196608	; 0x30000
 800041c:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)|=(config->priority<<DMA1_SCR_PRIORITY );
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	4613      	mov	r3, r2
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	4413      	add	r3, r2
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	461a      	mov	r2, r3
 800042e:	4b97      	ldr	r3, [pc, #604]	; (800068c <DMA1_init+0x334>)
 8000430:	4413      	add	r3, r2
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789b      	ldrb	r3, [r3, #2]
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4618      	mov	r0, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	460b      	mov	r3, r1
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	440b      	add	r3, r1
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	4619      	mov	r1, r3
 800044c:	4b8f      	ldr	r3, [pc, #572]	; (800068c <DMA1_init+0x334>)
 800044e:	440b      	add	r3, r1
 8000450:	4619      	mov	r1, r3
 8000452:	ea42 0300 	orr.w	r3, r2, r0
 8000456:	600b      	str	r3, [r1, #0]
		/*****choose increment mode for periphral******/
		DMA1_SCRx(config->streamNum)&=~( DMA1_PINC_MASK <<DMA1_SCR_PINC );
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4613      	mov	r3, r2
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	4413      	add	r3, r2
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	461a      	mov	r2, r3
 8000468:	4b88      	ldr	r3, [pc, #544]	; (800068c <DMA1_init+0x334>)
 800046a:	4413      	add	r3, r2
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	4619      	mov	r1, r3
 8000474:	460b      	mov	r3, r1
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	440b      	add	r3, r1
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	4619      	mov	r1, r3
 800047e:	4b83      	ldr	r3, [pc, #524]	; (800068c <DMA1_init+0x334>)
 8000480:	440b      	add	r3, r1
 8000482:	4619      	mov	r1, r3
 8000484:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8000488:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)|=(config->Periphral_state<<DMA1_SCR_PINC );
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	461a      	mov	r2, r3
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	461a      	mov	r2, r3
 800049a:	4b7c      	ldr	r3, [pc, #496]	; (800068c <DMA1_init+0x334>)
 800049c:	4413      	add	r3, r2
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	4618      	mov	r0, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4619      	mov	r1, r3
 80004ae:	460b      	mov	r3, r1
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	440b      	add	r3, r1
 80004b4:	00db      	lsls	r3, r3, #3
 80004b6:	4619      	mov	r1, r3
 80004b8:	4b74      	ldr	r3, [pc, #464]	; (800068c <DMA1_init+0x334>)
 80004ba:	440b      	add	r3, r1
 80004bc:	4619      	mov	r1, r3
 80004be:	ea42 0300 	orr.w	r3, r2, r0
 80004c2:	600b      	str	r3, [r1, #0]
		/*****choose increment mode for memory******/
		DMA1_SCRx(config->streamNum)&=~(DMA1_MINC_MASK<<DMA1_SCR_MINC );
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	4613      	mov	r3, r2
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	4413      	add	r3, r2
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b6d      	ldr	r3, [pc, #436]	; (800068c <DMA1_init+0x334>)
 80004d6:	4413      	add	r3, r2
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	460b      	mov	r3, r1
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	440b      	add	r3, r1
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	4619      	mov	r1, r3
 80004ea:	4b68      	ldr	r3, [pc, #416]	; (800068c <DMA1_init+0x334>)
 80004ec:	440b      	add	r3, r1
 80004ee:	4619      	mov	r1, r3
 80004f0:	f422 6380 	bic.w	r3, r2, #1024	; 0x400
 80004f4:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)|=(config->Memory_state<<DMA1_SCR_MINC );
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	461a      	mov	r2, r3
 80004fc:	4613      	mov	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4413      	add	r3, r2
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	461a      	mov	r2, r3
 8000506:	4b61      	ldr	r3, [pc, #388]	; (800068c <DMA1_init+0x334>)
 8000508:	4413      	add	r3, r2
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	029b      	lsls	r3, r3, #10
 8000512:	4618      	mov	r0, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	460b      	mov	r3, r1
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	440b      	add	r3, r1
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4619      	mov	r1, r3
 8000524:	4b59      	ldr	r3, [pc, #356]	; (800068c <DMA1_init+0x334>)
 8000526:	440b      	add	r3, r1
 8000528:	4619      	mov	r1, r3
 800052a:	ea42 0300 	orr.w	r3, r2, r0
 800052e:	600b      	str	r3, [r1, #0]
		/*****choose Transmition_type******/
		DMA1_SCRx(config->streamNum)&=~(DMA1_TRANSIMITION_MODE_MASK <<DMA1_SCR_DMA1_TRANSIMITION_MODE );
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	461a      	mov	r2, r3
 8000540:	4b52      	ldr	r3, [pc, #328]	; (800068c <DMA1_init+0x334>)
 8000542:	4413      	add	r3, r2
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	4619      	mov	r1, r3
 800054c:	460b      	mov	r3, r1
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	440b      	add	r3, r1
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	4619      	mov	r1, r3
 8000556:	4b4d      	ldr	r3, [pc, #308]	; (800068c <DMA1_init+0x334>)
 8000558:	440b      	add	r3, r1
 800055a:	4619      	mov	r1, r3
 800055c:	f022 03c0 	bic.w	r3, r2, #192	; 0xc0
 8000560:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)|=(config->transimition_mode<<DMA1_SCR_DMA1_TRANSIMITION_MODE );
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	461a      	mov	r2, r3
 8000572:	4b46      	ldr	r3, [pc, #280]	; (800068c <DMA1_init+0x334>)
 8000574:	4413      	add	r3, r2
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	4618      	mov	r0, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	460b      	mov	r3, r1
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	440b      	add	r3, r1
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4619      	mov	r1, r3
 8000590:	4b3e      	ldr	r3, [pc, #248]	; (800068c <DMA1_init+0x334>)
 8000592:	440b      	add	r3, r1
 8000594:	4619      	mov	r1, r3
 8000596:	ea42 0300 	orr.w	r3, r2, r0
 800059a:	600b      	str	r3, [r1, #0]
		/**enable interrupt***/
		DMA1_SCRx(config->streamNum)|=(1<<4);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b37      	ldr	r3, [pc, #220]	; (800068c <DMA1_init+0x334>)
 80005ae:	4413      	add	r3, r2
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4619      	mov	r1, r3
 80005b8:	460b      	mov	r3, r1
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	440b      	add	r3, r1
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4619      	mov	r1, r3
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <DMA1_init+0x334>)
 80005c4:	440b      	add	r3, r1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f042 0310 	orr.w	r3, r2, #16
 80005cc:	600b      	str	r3, [r1, #0]

		/******* configure mode*****/
		DMA1_SFCRx(config->streamNum)&=~(DMA1_MODE_MASK <<DMA1_SCR_MODE);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	461a      	mov	r2, r3
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <DMA1_init+0x338>)
 80005e0:	4413      	add	r3, r2
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	460b      	mov	r3, r1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	440b      	add	r3, r1
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	4619      	mov	r1, r3
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <DMA1_init+0x338>)
 80005f6:	440b      	add	r3, r1
 80005f8:	4619      	mov	r1, r3
 80005fa:	f022 0304 	bic.w	r3, r2, #4
 80005fe:	600b      	str	r3, [r1, #0]
		DMA1_SFCRx(config->streamNum)|=(config->mode<<DMA1_SCR_MODE);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	461a      	mov	r2, r3
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <DMA1_init+0x338>)
 8000612:	4413      	add	r3, r2
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	785b      	ldrb	r3, [r3, #1]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4618      	mov	r0, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	460b      	mov	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	440b      	add	r3, r1
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4619      	mov	r1, r3
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <DMA1_init+0x338>)
 8000630:	440b      	add	r3, r1
 8000632:	4619      	mov	r1, r3
 8000634:	ea42 0300 	orr.w	r3, r2, r0
 8000638:	600b      	str	r3, [r1, #0]
		/***thrsholderselectoin*****/
		DMA1_SFCRx(config->streamNum)&=~(DMA1_THRESHOLDER_MASK );
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	461a      	mov	r2, r3
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <DMA1_init+0x338>)
 800064c:	4413      	add	r3, r2
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	460b      	mov	r3, r1
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	440b      	add	r3, r1
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	4619      	mov	r1, r3
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <DMA1_init+0x338>)
 8000662:	440b      	add	r3, r1
 8000664:	4619      	mov	r1, r3
 8000666:	f022 0303 	bic.w	r3, r2, #3
 800066a:	600b      	str	r3, [r1, #0]
		DMA1_SFCRx(config->streamNum)|=(config->thresholder);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	461a      	mov	r2, r3
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <DMA1_init+0x338>)
 800067e:	4413      	add	r3, r2
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	78db      	ldrb	r3, [r3, #3]
 8000686:	4618      	mov	r0, r3
 8000688:	e004      	b.n	8000694 <DMA1_init+0x33c>
 800068a:	bf00      	nop
 800068c:	40026010 	.word	0x40026010
 8000690:	40026024 	.word	0x40026024
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	460b      	mov	r3, r1
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	440b      	add	r3, r1
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	4619      	mov	r1, r3
 80006a4:	4b3d      	ldr	r3, [pc, #244]	; (800079c <DMA1_init+0x444>)
 80006a6:	440b      	add	r3, r1
 80006a8:	4619      	mov	r1, r3
 80006aa:	ea42 0300 	orr.w	r3, r2, r0
 80006ae:	600b      	str	r3, [r1, #0]
		/****transmition size****/
		DMA1_SCRx(config->streamNum)&=~(DMA1_TRANSIMITION_SIZE_MASK <<DMA1_SCR_PSIZE);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	461a      	mov	r2, r3
 80006c0:	4b37      	ldr	r3, [pc, #220]	; (80007a0 <DMA1_init+0x448>)
 80006c2:	4413      	add	r3, r2
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	460b      	mov	r3, r1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	440b      	add	r3, r1
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	4619      	mov	r1, r3
 80006d6:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <DMA1_init+0x448>)
 80006d8:	440b      	add	r3, r1
 80006da:	4619      	mov	r1, r3
 80006dc:	f422 53c0 	bic.w	r3, r2, #6144	; 0x1800
 80006e0:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)|=(config->Transmition_size<<DMA1_SCR_PSIZE);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <DMA1_init+0x448>)
 80006f4:	4413      	add	r3, r2
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7a1b      	ldrb	r3, [r3, #8]
 80006fc:	02db      	lsls	r3, r3, #11
 80006fe:	4618      	mov	r0, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	460b      	mov	r3, r1
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	440b      	add	r3, r1
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	4619      	mov	r1, r3
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <DMA1_init+0x448>)
 8000712:	440b      	add	r3, r1
 8000714:	4619      	mov	r1, r3
 8000716:	ea42 0300 	orr.w	r3, r2, r0
 800071a:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)&=~(DMA1_TRANSIMITION_SIZE_MASK <<DMA1_SCR_MSIZE);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4413      	add	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	461a      	mov	r2, r3
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <DMA1_init+0x448>)
 800072e:	4413      	add	r3, r2
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	460b      	mov	r3, r1
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	440b      	add	r3, r1
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	4619      	mov	r1, r3
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <DMA1_init+0x448>)
 8000744:	440b      	add	r3, r1
 8000746:	4619      	mov	r1, r3
 8000748:	f422 43c0 	bic.w	r3, r2, #24576	; 0x6000
 800074c:	600b      	str	r3, [r1, #0]
		DMA1_SCRx(config->streamNum)|=(config->Transmition_size<<DMA1_SCR_MSIZE);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	461a      	mov	r2, r3
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <DMA1_init+0x448>)
 8000760:	4413      	add	r3, r2
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7a1b      	ldrb	r3, [r3, #8]
 8000768:	035b      	lsls	r3, r3, #13
 800076a:	4618      	mov	r0, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	460b      	mov	r3, r1
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	440b      	add	r3, r1
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4619      	mov	r1, r3
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <DMA1_init+0x448>)
 800077e:	440b      	add	r3, r1
 8000780:	4619      	mov	r1, r3
 8000782:	ea42 0300 	orr.w	r3, r2, r0
 8000786:	600b      	str	r3, [r1, #0]
 8000788:	e001      	b.n	800078e <DMA1_init+0x436>

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 800078a:	2303      	movs	r3, #3
 800078c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40026024 	.word	0x40026024
 80007a0:	40026010 	.word	0x40026010

080007a4 <DMA1_send_Data>:
void DMA1_send_Data(DMA1_CONFIGRATION_t* config,uint32_t* src_address,uint32_t* destination_address,uint16_t  size)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	807b      	strh	r3, [r7, #2]
	DMA1_SNDTRx(config->streamNum)=size;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <DMA1_send_Data+0x9c>)
 80007c4:	4413      	add	r3, r2
 80007c6:	461a      	mov	r2, r3
 80007c8:	887b      	ldrh	r3, [r7, #2]
 80007ca:	6013      	str	r3, [r2, #0]
	DMA1_SPARx(config->streamNum)=src_address;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	461a      	mov	r2, r3
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <DMA1_send_Data+0xa0>)
 80007de:	4413      	add	r3, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	6013      	str	r3, [r2, #0]
	DMA1_SM0ARx(config->streamNum)=destination_address;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <DMA1_send_Data+0xa4>)
 80007f8:	4413      	add	r3, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6013      	str	r3, [r2, #0]
	DMA1_SCRx(config->streamNum)|=(1<<0);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	461a      	mov	r2, r3
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <DMA1_send_Data+0xa8>)
 8000812:	4413      	add	r3, r2
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	460b      	mov	r3, r1
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	440b      	add	r3, r1
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	4619      	mov	r1, r3
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <DMA1_send_Data+0xa8>)
 8000828:	440b      	add	r3, r1
 800082a:	4619      	mov	r1, r3
 800082c:	f042 0301 	orr.w	r3, r2, #1
 8000830:	600b      	str	r3, [r1, #0]
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40026014 	.word	0x40026014
 8000844:	40026018 	.word	0x40026018
 8000848:	4002601c 	.word	0x4002601c
 800084c:	40026010 	.word	0x40026010

08000850 <DMA1_Stream0_IRQHandler>:
	}

	return Local_u8ErrorState;
}
void DMA1_Stream0_IRQHandler()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	DMA1_IFCR[DMA1_IFCR_LOW]=(DMA1_HIGH <<DMA1_LIFCR_CTCIF0);
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <DMA1_Stream0_IRQHandler+0x14>)
 8000856:	2220      	movs	r2, #32
 8000858:	601a      	str	r2, [r3, #0]
	ptr_callBack[STREAM0]();
 800085a:	4b03      	ldr	r3, [pc, #12]	; (8000868 <DMA1_Stream0_IRQHandler+0x18>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4798      	blx	r3
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40026008 	.word	0x40026008
 8000868:	200000ac 	.word	0x200000ac

0800086c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	DMA1_IFCR[DMA1_IFCR_LOW]=(DMA1_HIGH <<DMA1_LIFCR_CTCIF1);
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <DMA1_Stream1_IRQHandler+0x18>)
 8000872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000876:	601a      	str	r2, [r3, #0]
	ptr_callBack[STREAM1]();
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <DMA1_Stream1_IRQHandler+0x1c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4798      	blx	r3
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40026008 	.word	0x40026008
 8000888:	200000ac 	.word	0x200000ac

0800088c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	DMA1_IFCR[DMA1_IFCR_LOW]=(DMA1_HIGH <<DMA1_LIFCR_CTCIF2);
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <DMA1_Stream2_IRQHandler+0x18>)
 8000892:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000896:	601a      	str	r2, [r3, #0]
	ptr_callBack[STREAM2]();
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <DMA1_Stream2_IRQHandler+0x1c>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	4798      	blx	r3
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40026008 	.word	0x40026008
 80008a8:	200000ac 	.word	0x200000ac

080008ac <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	DMA1_IFCR[DMA1_IFCR_LOW]=(DMA1_HIGH <<DMA1_LIFCR_CTCIF3);
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <DMA1_Stream3_IRQHandler+0x18>)
 80008b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b6:	601a      	str	r2, [r3, #0]
	ptr_callBack[STREAM3]();
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <DMA1_Stream3_IRQHandler+0x1c>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4798      	blx	r3
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40026008 	.word	0x40026008
 80008c8:	200000ac 	.word	0x200000ac

080008cc <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	DMA1_IFCR[DMA1_IFCR_HIGH]=(DMA1_HIGH <<DMA1_HIFCR_CTCIF4);
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <DMA1_Stream4_IRQHandler+0x14>)
 80008d2:	2220      	movs	r2, #32
 80008d4:	601a      	str	r2, [r3, #0]
	ptr_callBack[STREAM4]();
 80008d6:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <DMA1_Stream4_IRQHandler+0x18>)
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	4798      	blx	r3
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	4002600c 	.word	0x4002600c
 80008e4:	200000ac 	.word	0x200000ac

080008e8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	DMA1_IFCR[DMA1_IFCR_HIGH]=(DMA1_HIGH <<DMA1_HIFCR_CTCIF5);
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <DMA1_Stream5_IRQHandler+0x18>)
 80008ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f2:	601a      	str	r2, [r3, #0]
	ptr_callBack[STREAM5]();
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <DMA1_Stream5_IRQHandler+0x1c>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	4798      	blx	r3
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	4002600c 	.word	0x4002600c
 8000904:	200000ac 	.word	0x200000ac

08000908 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	DMA1_IFCR[DMA1_IFCR_HIGH]=(DMA1_HIGH <<DMA1_HIFCR_CTCIF6);
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <DMA1_Stream6_IRQHandler+0x18>)
 800090e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000912:	601a      	str	r2, [r3, #0]
	ptr_callBack[STREAM6]();
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <DMA1_Stream6_IRQHandler+0x1c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4798      	blx	r3
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	4002600c 	.word	0x4002600c
 8000924:	200000ac 	.word	0x200000ac

08000928 <EXTI_voidClearPendingFlag>:
	/* Disable EXTI Line */
	EXTI->IMR &= ~(1 << Local_u8Line);
}

void EXTI_voidClearPendingFlag(EXTI_LINE_t Local_u8Line)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	/* Clear Pending Flag */
	EXTI->PR |= (1 << Local_u8Line);
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <EXTI_voidClearPendingFlag+0x2c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	2101      	movs	r1, #1
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4611      	mov	r1, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <EXTI_voidClearPendingFlag+0x2c>)
 8000942:	430b      	orrs	r3, r1
 8000944:	6153      	str	r3, [r2, #20]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40013c00 	.word	0x40013c00

08000958 <EXTI_voidReadPendingFlag>:

void EXTI_voidReadPendingFlag(EXTI_LINE_t Local_u8Line, EXTI_PEND_t *EXTIStatus)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
	/* Read Pending Flag */
	*EXTIStatus = (((EXTI->PR) >> Local_u8Line) & 0x01);
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <EXTI_voidReadPendingFlag+0x30>)
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	fa22 f303 	lsr.w	r3, r2, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	701a      	strb	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40013c00 	.word	0x40013c00

0800098c <EXTI0_IRQHandler>:
/*==============================================================================================================================================
 * HANDLERS SECTION
 *==============================================================================================================================================*/

void EXTI0_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI0);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ffc9 	bl	8000928 <EXTI_voidClearPendingFlag>

	if (EXTI_PTR_TO_FUNCTION[EXTI0] != NULL)
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <EXTI0_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI0]();
 800099e:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4798      	blx	r3
	}
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000d0 	.word	0x200000d0

080009ac <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff ffb9 	bl	8000928 <EXTI_voidClearPendingFlag>

	if (EXTI_PTR_TO_FUNCTION[EXTI1] != NULL)
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <EXTI1_IRQHandler+0x1c>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <EXTI1_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI1]();
 80009be:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <EXTI1_IRQHandler+0x1c>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4798      	blx	r3
	}
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000d0 	.word	0x200000d0

080009cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI2);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff ffa9 	bl	8000928 <EXTI_voidClearPendingFlag>

	if (EXTI_PTR_TO_FUNCTION[EXTI2] != NULL)
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <EXTI2_IRQHandler+0x1c>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <EXTI2_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI2]();
 80009de:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <EXTI2_IRQHandler+0x1c>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	4798      	blx	r3
	}
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000d0 	.word	0x200000d0

080009ec <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI3);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f7ff ff99 	bl	8000928 <EXTI_voidClearPendingFlag>

	if (EXTI_PTR_TO_FUNCTION[EXTI3] != NULL)
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <EXTI3_IRQHandler+0x1c>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <EXTI3_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI3]();
 80009fe:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <EXTI3_IRQHandler+0x1c>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	4798      	blx	r3
	}
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000d0 	.word	0x200000d0

08000a0c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI4);
 8000a10:	2004      	movs	r0, #4
 8000a12:	f7ff ff89 	bl	8000928 <EXTI_voidClearPendingFlag>

	if (EXTI_PTR_TO_FUNCTION[EXTI4] != NULL)
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <EXTI4_IRQHandler+0x1c>)
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <EXTI4_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI4]();
 8000a1e:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <EXTI4_IRQHandler+0x1c>)
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	4798      	blx	r3
	}
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000d0 	.word	0x200000d0

08000a2c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	/* Variable To Hold Pending Status */
	EXTI_PEND_t PEND_Status = NOT_PENDED;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI5, &PEND_Status);
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	f7ff ff8c 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d109      	bne.n	8000a5a <EXTI9_5_IRQHandler+0x2e>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI5);
 8000a46:	2005      	movs	r0, #5
 8000a48:	f7ff ff6e 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI5])
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <EXTI9_5_IRQHandler+0x2e>
		{
			EXTI_PTR_TO_FUNCTION[EXTI5]();
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI6, &PEND_Status);
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2006      	movs	r0, #6
 8000a60:	f7ff ff7a 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d109      	bne.n	8000a7e <EXTI9_5_IRQHandler+0x52>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI6);
 8000a6a:	2006      	movs	r0, #6
 8000a6c:	f7ff ff5c 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI6])
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <EXTI9_5_IRQHandler+0x52>
		{
			EXTI_PTR_TO_FUNCTION[EXTI6]();
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI7, &PEND_Status);
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	4619      	mov	r1, r3
 8000a82:	2007      	movs	r0, #7
 8000a84:	f7ff ff68 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d109      	bne.n	8000aa2 <EXTI9_5_IRQHandler+0x76>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI7);
 8000a8e:	2007      	movs	r0, #7
 8000a90:	f7ff ff4a 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI7])
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <EXTI9_5_IRQHandler+0x76>
		{
			EXTI_PTR_TO_FUNCTION[EXTI7]();
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI8, &PEND_Status);
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2008      	movs	r0, #8
 8000aa8:	f7ff ff56 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d109      	bne.n	8000ac6 <EXTI9_5_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI8);
 8000ab2:	2008      	movs	r0, #8
 8000ab4:	f7ff ff38 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI8])
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000aba:	6a1b      	ldr	r3, [r3, #32]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <EXTI9_5_IRQHandler+0x9a>
		{
			EXTI_PTR_TO_FUNCTION[EXTI8]();
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI9, &PEND_Status);
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2009      	movs	r0, #9
 8000acc:	f7ff ff44 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d109      	bne.n	8000aea <EXTI9_5_IRQHandler+0xbe>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI9);
 8000ad6:	2009      	movs	r0, #9
 8000ad8:	f7ff ff26 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI9])
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <EXTI9_5_IRQHandler+0xbe>
		{
			EXTI_PTR_TO_FUNCTION[EXTI9]();
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <EXTI9_5_IRQHandler+0xc8>)
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	4798      	blx	r3
		}
	}
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000d0 	.word	0x200000d0

08000af8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	EXTI_PEND_t PEND_Status = NOT_PENDED;
 8000afe:	2300      	movs	r3, #0
 8000b00:	71fb      	strb	r3, [r7, #7]

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI10, &PEND_Status);
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	4619      	mov	r1, r3
 8000b06:	200a      	movs	r0, #10
 8000b08:	f7ff ff26 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d109      	bne.n	8000b26 <EXTI15_10_IRQHandler+0x2e>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI10);
 8000b12:	200a      	movs	r0, #10
 8000b14:	f7ff ff08 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI10])
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <EXTI15_10_IRQHandler+0x2e>
		{
			EXTI_PTR_TO_FUNCTION[EXTI10]();
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI11, &PEND_Status);
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff14 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d109      	bne.n	8000b4a <EXTI15_10_IRQHandler+0x52>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI11);
 8000b36:	200b      	movs	r0, #11
 8000b38:	f7ff fef6 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI11])
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <EXTI15_10_IRQHandler+0x52>
		{
			EXTI_PTR_TO_FUNCTION[EXTI11]();
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b48:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI12, &PEND_Status);
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	200c      	movs	r0, #12
 8000b50:	f7ff ff02 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d109      	bne.n	8000b6e <EXTI15_10_IRQHandler+0x76>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI12);
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f7ff fee4 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI12])
 8000b60:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <EXTI15_10_IRQHandler+0x76>
		{
			EXTI_PTR_TO_FUNCTION[EXTI12]();
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI13, &PEND_Status);
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	4619      	mov	r1, r3
 8000b72:	200d      	movs	r0, #13
 8000b74:	f7ff fef0 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d109      	bne.n	8000b92 <EXTI15_10_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI13);
 8000b7e:	200d      	movs	r0, #13
 8000b80:	f7ff fed2 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI13])
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <EXTI15_10_IRQHandler+0x9a>
		{
			EXTI_PTR_TO_FUNCTION[EXTI13]();
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b90:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI14, &PEND_Status);
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	4619      	mov	r1, r3
 8000b96:	200e      	movs	r0, #14
 8000b98:	f7ff fede 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d109      	bne.n	8000bb6 <EXTI15_10_IRQHandler+0xbe>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI14);
 8000ba2:	200e      	movs	r0, #14
 8000ba4:	f7ff fec0 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI14])
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <EXTI15_10_IRQHandler+0xbe>
		{
			EXTI_PTR_TO_FUNCTION[EXTI14]();
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb4:	4798      	blx	r3
		}
	}

	/* Read Pending */
	EXTI_voidReadPendingFlag(EXTI15, &PEND_Status);
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	4619      	mov	r1, r3
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff fecc 	bl	8000958 <EXTI_voidReadPendingFlag>

	if (PEND_Status == PENDED)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d109      	bne.n	8000bda <EXTI15_10_IRQHandler+0xe2>
	{
		/* Clear Pending Flag */
		EXTI_voidClearPendingFlag(EXTI15);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f7ff feae 	bl	8000928 <EXTI_voidClearPendingFlag>

		/* Set PTR To Function */
		if (NULL != EXTI_PTR_TO_FUNCTION[EXTI15])
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <EXTI15_10_IRQHandler+0xe2>
		{
			EXTI_PTR_TO_FUNCTION[EXTI15]();
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <EXTI15_10_IRQHandler+0xec>)
 8000bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd8:	4798      	blx	r3
		}
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000d0 	.word	0x200000d0

08000be8 <PVD_IRQHandler>:
/* EXTI16 */
void PVD_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI16);
 8000bec:	2010      	movs	r0, #16
 8000bee:	f7ff fe9b 	bl	8000928 <EXTI_voidClearPendingFlag>

	/* Set PTR To Function */
	if (NULL != EXTI_PTR_TO_FUNCTION[EXTI16])
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <PVD_IRQHandler+0x1c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <PVD_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI16]();
 8000bfa:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <PVD_IRQHandler+0x1c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4798      	blx	r3
	}
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200000d0 	.word	0x200000d0

08000c08 <RTC_Alarm_IRQHandler>:
/* EXTI17 */
void RTC_Alarm_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI17);
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f7ff fe8b 	bl	8000928 <EXTI_voidClearPendingFlag>

	/* Set PTR To Function */
	if (NULL != EXTI_PTR_TO_FUNCTION[EXTI17])
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <RTC_Alarm_IRQHandler+0x1c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <RTC_Alarm_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI17]();
 8000c1a:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <RTC_Alarm_IRQHandler+0x1c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4798      	blx	r3
	}
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000d0 	.word	0x200000d0

08000c28 <OTG_FS_WKUP_IRQHandler>:
/* EXTI18 */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI18);
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f7ff fe7b 	bl	8000928 <EXTI_voidClearPendingFlag>

	/* Set PTR To Function */
	if (NULL != EXTI_PTR_TO_FUNCTION[EXTI18])
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <OTG_FS_WKUP_IRQHandler+0x1c>)
 8000c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <OTG_FS_WKUP_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI18]();
 8000c3a:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <OTG_FS_WKUP_IRQHandler+0x1c>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3e:	4798      	blx	r3
	}
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000d0 	.word	0x200000d0

08000c48 <OTG_HS_WKUP_IRQHandler>:
/* EXTI20 */
void OTG_HS_WKUP_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI20);
 8000c4c:	2014      	movs	r0, #20
 8000c4e:	f7ff fe6b 	bl	8000928 <EXTI_voidClearPendingFlag>

	/* Set PTR To Function */
	if (NULL != EXTI_PTR_TO_FUNCTION[EXTI20])
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <OTG_HS_WKUP_IRQHandler+0x1c>)
 8000c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <OTG_HS_WKUP_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI20]();
 8000c5a:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <OTG_HS_WKUP_IRQHandler+0x1c>)
 8000c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c5e:	4798      	blx	r3
	}
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000d0 	.word	0x200000d0

08000c68 <TAMP_STAMP_IRQHandler>:
/* EXTI21 */
void TAMP_STAMP_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI21);
 8000c6c:	2015      	movs	r0, #21
 8000c6e:	f7ff fe5b 	bl	8000928 <EXTI_voidClearPendingFlag>

	/* Set PTR To Function */
	if (NULL != EXTI_PTR_TO_FUNCTION[EXTI21])
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <TAMP_STAMP_IRQHandler+0x1c>)
 8000c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <TAMP_STAMP_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI21]();
 8000c7a:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <TAMP_STAMP_IRQHandler+0x1c>)
 8000c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7e:	4798      	blx	r3
	}
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000d0 	.word	0x200000d0

08000c88 <RTC_WKUP_IRQHandler>:
/* EXTI22 */
void RTC_WKUP_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI_voidClearPendingFlag(EXTI22);
 8000c8c:	2016      	movs	r0, #22
 8000c8e:	f7ff fe4b 	bl	8000928 <EXTI_voidClearPendingFlag>

	/* Set PTR To Function */
	if (NULL != EXTI_PTR_TO_FUNCTION[EXTI22])
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <RTC_WKUP_IRQHandler+0x1c>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <RTC_WKUP_IRQHandler+0x18>
	{
		EXTI_PTR_TO_FUNCTION[EXTI22]();
 8000c9a:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <RTC_WKUP_IRQHandler+0x1c>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4798      	blx	r3
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000d0 	.word	0x200000d0

08000ca8 <GPIO_u8PinInit>:
 *   @brief      The function initializes the GPIO pin according to the input parameters
 *   @param[in]  PinConfig: the initialization values of the pin
 *   @retVal     ErrorStatus
 */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_t* PinConfig)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
	if (PinConfig != NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 8117 	beq.w	8000eea <GPIO_u8PinInit+0x242>
	{
		if (( (PinConfig -> Port) <= PORTH) && ( (PinConfig -> PinNum) <= PIN15))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b07      	cmp	r3, #7
 8000cc2:	f200 810f 	bhi.w	8000ee4 <GPIO_u8PinInit+0x23c>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	f200 810a 	bhi.w	8000ee4 <GPIO_u8PinInit+0x23c>
		{
			/*Select GPIO mode: INPUT, OUTPUT, ANALOG, ALTERNATE_FUNCTION */
			(GPIOPort[PinConfig -> Port] -> MODER) &= ~(MODER_MASK << ((PinConfig ->PinNum)*MODER_PIN_ACCESS));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b8a      	ldr	r3, [pc, #552]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	4b82      	ldr	r3, [pc, #520]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000cf6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
			(GPIOPort[PinConfig -> Port] -> MODER) |= ((PinConfig->Mode) << (PinConfig->PinNum)*MODER_PIN_ACCESS);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b7e      	ldr	r3, [pc, #504]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	4619      	mov	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	785b      	ldrb	r3, [r3, #1]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	4b76      	ldr	r3, [pc, #472]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000d26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]

			/*Select GPIO pull state: PULLUP, PULLDOWN, NOPULL */
			(GPIOPort[PinConfig -> Port] -> PUPDR) &= ~(PUPDR_MASK << ((PinConfig ->PinNum)*PUPDR_PIN_ACCESS));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b72      	ldr	r3, [pc, #456]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	785b      	ldrb	r3, [r3, #1]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2103      	movs	r1, #3
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000d54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d58:	400a      	ands	r2, r1
 8000d5a:	60da      	str	r2, [r3, #12]
			(GPIOPort[PinConfig -> Port] -> PUPDR) |= ((PinConfig->PullType) << ((PinConfig ->PinNum)*PUPDR_PIN_ACCESS));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	795b      	ldrb	r3, [r3, #5]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	785b      	ldrb	r3, [r3, #1]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000d84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	60da      	str	r2, [r3, #12]

			/*Select GPIO Output type & Output speed in case of general purpose output or Alternate function*/
			if((PinConfig -> Mode ==OUTPUT) || (PinConfig ->Mode == ALTERNATE_FUNCTION))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	789b      	ldrb	r3, [r3, #2]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d004      	beq.n	8000d9e <GPIO_u8PinInit+0xf6>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	789b      	ldrb	r3, [r3, #2]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	f040 80a9 	bne.w	8000ef0 <GPIO_u8PinInit+0x248>
			{
				/*Select Output type :Pushpull or open drain */
				(GPIOPort[PinConfig -> Port] -> OTYPER) &= ~(OTYPER_MASK << (PinConfig ->PinNum));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b56      	ldr	r3, [pc, #344]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	408b      	lsls	r3, r1
 8000db6:	43db      	mvns	r3, r3
 8000db8:	4619      	mov	r1, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000dc2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	605a      	str	r2, [r3, #4]
				(GPIOPort[PinConfig -> Port] -> OTYPER) |= ((PinConfig->OutputType) << (PinConfig ->PinNum));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	791b      	ldrb	r3, [r3, #4]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	785b      	ldrb	r3, [r3, #1]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	4b44      	ldr	r3, [pc, #272]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000df0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	605a      	str	r2, [r3, #4]

				/*Select Output speed :Low, Medium, High, Fast */
				(GPIOPort[PinConfig -> Port] -> OSPEEDR) &= ~(OPSEEDR_MASK << ((PinConfig ->PinNum)*OPSEEDR_PIN_ACCESS));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	785b      	ldrb	r3, [r3, #1]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000e1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e22:	400a      	ands	r2, r1
 8000e24:	609a      	str	r2, [r3, #8]
				(GPIOPort[PinConfig -> Port] -> OSPEEDR) |= ((PinConfig->Speed) << ((PinConfig ->PinNum)*OPSEEDR_PIN_ACCESS));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	78db      	ldrb	r3, [r3, #3]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000e4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	609a      	str	r2, [r3, #8]
				if(PinConfig ->Mode == ALTERNATE_FUNCTION)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d148      	bne.n	8000ef0 <GPIO_u8PinInit+0x248>
				{
					uint8_t Local_u8RegNum =(PinConfig ->PinNum / AFR_PIN_SHIFTING);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	785b      	ldrb	r3, [r3, #1]
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	73bb      	strb	r3, [r7, #14]
					uint8_t Local_u8BitNum =(PinConfig ->PinNum % AFR_PIN_SHIFTING);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	785b      	ldrb	r3, [r3, #1]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	737b      	strb	r3, [r7, #13]
					(GPIOPort[PinConfig -> Port] -> AFR[Local_u8RegNum]) &= ~(AFR_MASK << (Local_u8BitNum * AFR_PIN_ACCESS));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	7bba      	ldrb	r2, [r7, #14]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e84:	7b7b      	ldrb	r3, [r7, #13]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9e:	7bba      	ldrb	r2, [r7, #14]
 8000ea0:	4001      	ands	r1, r0
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					(GPIOPort[PinConfig -> Port] -> AFR[Local_u8RegNum]) |= ((PinConfig->AltFunc) << (Local_u8BitNum * AFR_PIN_ACCESS));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	7bba      	ldrb	r2, [r7, #14]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	799b      	ldrb	r3, [r3, #6]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	7b7b      	ldrb	r3, [r7, #13]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <GPIO_u8PinInit+0x258>)
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	7bba      	ldrb	r2, [r7, #14]
 8000eda:	4301      	orrs	r1, r0
 8000edc:	3208      	adds	r2, #8
 8000ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((PinConfig -> Mode ==OUTPUT) || (PinConfig ->Mode == ALTERNATE_FUNCTION))
 8000ee2:	e005      	b.n	8000ef0 <GPIO_u8PinInit+0x248>
				}
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e003      	b.n	8000ef2 <GPIO_u8PinInit+0x24a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000eea:	2303      	movs	r3, #3
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e000      	b.n	8000ef2 <GPIO_u8PinInit+0x24a>
			if((PinConfig -> Mode ==OUTPUT) || (PinConfig ->Mode == ALTERNATE_FUNCTION))
 8000ef0:	bf00      	nop
	}
	return Local_u8ErrorState;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000038 	.word	0x20000038

08000f04 <GPIO_u8SetPinValue>:


uint8_t GPIO_u8SetPinValue(Port_t Port,Pin_t PinNum,PinVal_t PinVal)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	4613      	mov	r3, r2
 8000f14:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
	if (( Port <= PORTH) && ( PinNum <= PIN15))
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d823      	bhi.n	8000f68 <GPIO_u8SetPinValue+0x64>
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	d820      	bhi.n	8000f68 <GPIO_u8SetPinValue+0x64>
	{
		switch(PinVal)
 8000f26:	797b      	ldrb	r3, [r7, #5]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <GPIO_u8SetPinValue+0x2e>
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d00c      	beq.n	8000f4a <GPIO_u8SetPinValue+0x46>
 8000f30:	e016      	b.n	8000f60 <GPIO_u8SetPinValue+0x5c>
		{
		case PIN_LOW:
			(GPIOPort[Port] ->BSRR) = 1<< (16+ PinNum);
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	3310      	adds	r3, #16
 8000f36:	2201      	movs	r2, #1
 8000f38:	fa02 f103 	lsl.w	r1, r2, r3
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <GPIO_u8SetPinValue+0x78>)
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	460a      	mov	r2, r1
 8000f46:	619a      	str	r2, [r3, #24]
			/*(GPIOPort[Port] ->ODR) &= ~(ODR_MASK <<PinNum);*/
			break;
 8000f48:	e00d      	b.n	8000f66 <GPIO_u8SetPinValue+0x62>
		case PIN_HIGH:
			(GPIOPort[Port] ->BSRR) = 1<< (PinNum);
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	fa02 f103 	lsl.w	r1, r2, r3
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <GPIO_u8SetPinValue+0x78>)
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	619a      	str	r2, [r3, #24]
			/*(GPIOPort[ Port] -> ODR) |= (PinVal<< PinNum);*/
			break;
 8000f5e:	e002      	b.n	8000f66 <GPIO_u8SetPinValue+0x62>
		default:
			Local_u8ErrorState = NOK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
			break;
 8000f64:	bf00      	nop
		switch(PinVal)
 8000f66:	e001      	b.n	8000f6c <GPIO_u8SetPinValue+0x68>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000038 	.word	0x20000038

08000f80 <I2C_Init>:
 * @brief			:	Initialize SPI
 * @param			:	SPI Configurations structure
 * @retval			:	Error State
 */
Error_State_t I2C_Init(const I2C_Configs_t * I2C_Configs)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	Error_State_t Error_State = OK ;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]

	if ( OK == I2C_CheckConfigs(I2C_Configs) )
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 fa33 	bl	80013f8 <I2C_CheckConfigs>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	f040 80d5 	bne.w	8001144 <I2C_Init+0x1c4>
	{
		/*Set Clock Stretch State*/
		I2Cs[I2C_Configs->I2C_Num]->I2C_CR1 &= ~(1<<(STRETCH_STATE_BIT));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b6d      	ldr	r3, [pc, #436]	; (8001158 <I2C_Init+0x1d8>)
 8000fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4b6a      	ldr	r3, [pc, #424]	; (8001158 <I2C_Init+0x1d8>)
 8000fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
		I2Cs[I2C_Configs->I2C_Num]->I2C_CR1 |=  ((I2C_Configs->Stretch_state)<<(STRETCH_STATE_BIT));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b65      	ldr	r3, [pc, #404]	; (8001158 <I2C_Init+0x1d8>)
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	01db      	lsls	r3, r3, #7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4b60      	ldr	r3, [pc, #384]	; (8001158 <I2C_Init+0x1d8>)
 8000fd8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
		/*Set Packet Error Check State*/
		I2Cs[I2C_Configs->I2C_Num]->I2C_CR1 &= ~(1<<(PEC_STATE_BIT));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <I2C_Init+0x1d8>)
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <I2C_Init+0x1d8>)
 8000ff6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ffa:	f022 0220 	bic.w	r2, r2, #32
 8000ffe:	601a      	str	r2, [r3, #0]
		I2Cs[I2C_Configs->I2C_Num]->I2C_CR1 |=  ((I2C_Configs->PEC_State)<<(PEC_STATE_BIT));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b54      	ldr	r3, [pc, #336]	; (8001158 <I2C_Init+0x1d8>)
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	789b      	ldrb	r3, [r3, #2]
 8001012:	015b      	lsls	r3, r3, #5
 8001014:	4619      	mov	r1, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <I2C_Init+0x1d8>)
 800101e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

		/*Set APB (Peripheral) Clock*/
		I2Cs[I2C_Configs->I2C_Num]->I2C_CR2 &= ~(PCLK_MASK);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <I2C_Init+0x1d8>)
 800102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <I2C_Init+0x1d8>)
 800103c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001040:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001044:	605a      	str	r2, [r3, #4]
		I2Cs[I2C_Configs->I2C_Num]->I2C_CR2 |=  ((I2C_Configs->I2C_Pclk_MHZ));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4b42      	ldr	r3, [pc, #264]	; (8001158 <I2C_Init+0x1d8>)
 800104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	78db      	ldrb	r3, [r3, #3]
 8001058:	4619      	mov	r1, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <I2C_Init+0x1d8>)
 8001062:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]

		/*Set Addressing Mode*/
		I2Cs[I2C_Configs->I2C_Num]->I2C_OAR1 &= ~(1<<(ADDMODE_BIT));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <I2C_Init+0x1d8>)
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <I2C_Init+0x1d8>)
 8001080:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001088:	609a      	str	r2, [r3, #8]
		I2Cs[I2C_Configs->I2C_Num]->I2C_OAR1 |=  ((I2C_Configs->ADD_Mode)<<(ADDMODE_BIT));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <I2C_Init+0x1d8>)
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	03db      	lsls	r3, r3, #15
 800109e:	4619      	mov	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <I2C_Init+0x1d8>)
 80010a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	609a      	str	r2, [r3, #8]

		/*Set Own Chip Address*/
		I2Cs[I2C_Configs->I2C_Num]->I2C_OAR1 &= ~(ADDVALUE_MASK<<(ADDVALUE_BIT));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <I2C_Init+0x1d8>)
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <I2C_Init+0x1d8>)
 80010c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010ca:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 80010ce:	609a      	str	r2, [r3, #8]
		I2Cs[I2C_Configs->I2C_Num]->I2C_OAR1 |=  ((I2C_Configs->Chip_Address)<<(ADDVALUE_BIT));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <I2C_Init+0x1d8>)
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	795b      	ldrb	r3, [r3, #5]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <I2C_Init+0x1d8>)
 80010ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	609a      	str	r2, [r3, #8]

		/*Set The Mode when the Chip Transferred to master*/
		I2Cs[I2C_Configs->I2C_Num]->I2C_CCR &= ~(1<<(I2C_MODE_BIT));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <I2C_Init+0x1d8>)
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	69da      	ldr	r2, [r3, #28]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <I2C_Init+0x1d8>)
 800110c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001114:	61da      	str	r2, [r3, #28]
		I2Cs[I2C_Configs->I2C_Num]->I2C_CCR |=  ((I2C_Configs->I2C_Mode)<<(I2C_MODE_BIT));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <I2C_Init+0x1d8>)
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	03db      	lsls	r3, r3, #15
 800112a:	4619      	mov	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <I2C_Init+0x1d8>)
 8001134:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001138:	430a      	orrs	r2, r1
 800113a:	61da      	str	r2, [r3, #28]

		/*Set SCL Frequency*/
		I2C_Set_SCL_Frequency(I2C_Configs);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f929 	bl	8001394 <I2C_Set_SCL_Frequency>
 8001142:	e004      	b.n	800114e <I2C_Init+0x1ce>


	}
	else {

		Error_State = I2C_CheckConfigs(I2C_Configs);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f957 	bl	80013f8 <I2C_CheckConfigs>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]

	}
	return Error_State ;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000058 	.word	0x20000058

0800115c <I2C_Send_Start_Condition>:
						and make the Chip State a Master.
 * @Note			:	Calling for second time without sending stop condition
 						will send a repeated start
 */
Error_State_t I2C_Send_Start_Condition(I2C_I2C_NUMBER_t	I2C_Num)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	Error_State_t	Error_State = OK;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]

	if ((I2C_Num >=I2C_NUMBER_1) && (I2C_Num <=I2C_NUMBER_3))
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d816      	bhi.n	800119e <I2C_Send_Start_Condition+0x42>
	{
		/*Send Start Condition*/
		I2Cs[I2C_Num]->I2C_CR1 |= (1<<START_GENERATE_BIT);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <I2C_Send_Start_Condition+0x54>)
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <I2C_Send_Start_Condition+0x54>)
 800117e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001186:	601a      	str	r2, [r3, #0]

		/*Wait till Start Condition is Generated*/
		while (!(GET_BIT(I2Cs[I2C_Num]->I2C_SR1,FLAGS_SR1_SB)));
 8001188:	bf00      	nop
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <I2C_Send_Start_Condition+0x54>)
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f6      	beq.n	800118a <I2C_Send_Start_Condition+0x2e>
 800119c:	e001      	b.n	80011a2 <I2C_Send_Start_Condition+0x46>

	}
	else {
		Error_State = I2C_WRONG_I2C_NUMBER;
 800119e:	2304      	movs	r3, #4
 80011a0:	73fb      	strb	r3, [r7, #15]
	}

	return Error_State ;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	20000058 	.word	0x20000058

080011b4 <I2C_Send_Stop_Condition>:
 *
 * 						2- Calling this function in As slave will
 * 							Release the SCL and SDA lines after the current byte transfer
 */
Error_State_t I2C_Send_Stop_Condition(I2C_I2C_NUMBER_t	I2C_Num)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	Error_State_t	Error_State = OK;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]

	if ((I2C_Num >=I2C_NUMBER_1) && (I2C_Num <=I2C_NUMBER_3))
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d80c      	bhi.n	80011e2 <I2C_Send_Stop_Condition+0x2e>
	{
		/*Send Start Condition*/
		I2Cs[I2C_Num]->I2C_CR1 |= (1<<STOP_GENERATE_BIT);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <I2C_Send_Stop_Condition+0x40>)
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <I2C_Send_Stop_Condition+0x40>)
 80011d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e001      	b.n	80011e6 <I2C_Send_Stop_Condition+0x32>
		//while (!(GET_BIT(I2Cs[I2C_Num]->I2C_SR1,FLAGS_SR1_STOPF)));

		//I2Cs[I2C_Num]->I2C_CR1 |= (0);
	}
	else {
		Error_State = I2C_WRONG_I2C_NUMBER;
 80011e2:	2304      	movs	r3, #4
 80011e4:	73fb      	strb	r3, [r7, #15]
	}

	return Error_State ;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20000058 	.word	0x20000058

080011f8 <I2C_Master_Transmit_DMA>:

	}
	return Error_State ;
}
Error_State_t I2C_Master_Transmit_DMA(const I2C_Configs_t * I2C_Configs , uint8_t SlaveADD , uint8_t * DataToSend, uint8_t data_Size,DMA1_CONFIGRATION_t* dma_tx_config )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	461a      	mov	r2, r3
 8001204:	460b      	mov	r3, r1
 8001206:	72fb      	strb	r3, [r7, #11]
 8001208:	4613      	mov	r3, r2
 800120a:	72bb      	strb	r3, [r7, #10]
	Error_State_t	Error_State = OK;
 800120c:	2301      	movs	r3, #1
 800120e:	75bb      	strb	r3, [r7, #22]

	Error_State = I2C_CheckConfigs(I2C_Configs);
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f8f1 	bl	80013f8 <I2C_CheckConfigs>
 8001216:	4603      	mov	r3, r0
 8001218:	75bb      	strb	r3, [r7, #22]

	uint8_t Counter=0;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]

	if (OK == Error_State)
 800121e:	7dbb      	ldrb	r3, [r7, #22]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d16a      	bne.n	80012fa <I2C_Master_Transmit_DMA+0x102>
	{

		/*Wait till Bus is FREE (Not busy)*/
		while((GET_BIT(I2Cs[I2C_Configs->I2C_Num]->I2C_SR2,FLAGS_SR2_BUSY)));
 8001224:	bf00      	nop
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f4      	bne.n	8001226 <I2C_Master_Transmit_DMA+0x2e>

		/*Enable I2C*/
		I2Cs[I2C_Configs->I2C_Num]->I2C_CR1 |= (1<<PE_BIT);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 8001252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

		/*Send Start Condition*/
		I2C_Send_Start_Condition(I2C_Configs->I2C_Num);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff7b 	bl	800115c <I2C_Send_Start_Condition>

		SET_BIT(I2Cs[I2C_Configs->I2C_Num]->I2C_CR2, I2C_DMAEN);//********
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 800127c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001284:	605a      	str	r2, [r3, #4]

		/*Send Slave Address With Write Signal (LSB = 0)*/
	//	I2Cs[I2C_Configs->I2C_Num]->I2C_DR = (SlaveADD);
		uint8_t slaveAdd_var = SlaveADD;
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	757b      	strb	r3, [r7, #21]
		SET_BIT(I2Cs[I2C_Configs->I2C_Num]->I2C_CR2, I2C_ITEVTEN);//********
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 8001292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 80012a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a8:	605a      	str	r2, [r3, #4]

		DMA1_send_Data(dma_tx_config,  &slaveAdd_var, &(I2Cs[I2C_Configs->I2C_Num]->I2C_DR),1);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 80012b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b6:	f103 0210 	add.w	r2, r3, #16
 80012ba:	f107 0115 	add.w	r1, r7, #21
 80012be:	2301      	movs	r3, #1
 80012c0:	6a38      	ldr	r0, [r7, #32]
 80012c2:	f7ff fa6f 	bl	80007a4 <DMA1_send_Data>

		/*Send data Bytes till Buffer ends*/
		while (Counter <=data_Size)
 80012c6:	e011      	b.n	80012ec <I2C_Master_Transmit_DMA+0xf4>
		{
			DMA1_send_Data(dma_tx_config, DataToSend+Counter, &(I2Cs[I2C_Configs->I2C_Num]->I2C_DR),1);
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	18d1      	adds	r1, r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <I2C_Master_Transmit_DMA+0x10c>)
 80012d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012da:	f103 0210 	add.w	r2, r3, #16
 80012de:	2301      	movs	r3, #1
 80012e0:	6a38      	ldr	r0, [r7, #32]
 80012e2:	f7ff fa5f 	bl	80007a4 <DMA1_send_Data>
			Counter++;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	3301      	adds	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
		while (Counter <=data_Size)
 80012ec:	7dfa      	ldrb	r2, [r7, #23]
 80012ee:	7abb      	ldrb	r3, [r7, #10]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d9e9      	bls.n	80012c8 <I2C_Master_Transmit_DMA+0xd0>
		}
		I2C_Send_Stop_Condition(I2C_NUMBER_1);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ff5d 	bl	80011b4 <I2C_Send_Stop_Condition>
	else {

		/*Error => Do Nothing*/

	}
	return Error_State ;
 80012fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000058 	.word	0x20000058

08001308 <I2C_Master_Receive_DMA>:
	}
	return Error_State ;
}

Error_State_t I2C_Master_Receive_DMA(const I2C_Configs_t * I2C_Configs , uint8_t *destination, DMA1_CONFIGRATION_t * dma_rx_config)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	Error_State_t	Error_State = OK;
 8001314:	2301      	movs	r3, #1
 8001316:	75fb      	strb	r3, [r7, #23]

	Error_State = I2C_CheckConfigs(I2C_Configs);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f86d 	bl	80013f8 <I2C_CheckConfigs>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]

	if (OK == Error_State)
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d10c      	bne.n	8001342 <I2C_Master_Receive_DMA+0x3a>
	{


		/*Read data in the DR*/
	//	*ReceivedData = I2Cs[I2C_Configs->I2C_Num]->I2C_DR;
		DMA1_send_Data(dma_rx_config, &(I2Cs[I2C_Configs->I2C_Num]->I2C_DR),destination,1);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <I2C_Master_Receive_DMA+0x44>)
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	f103 0110 	add.w	r1, r3, #16
 8001338:	2301      	movs	r3, #1
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fa31 	bl	80007a4 <DMA1_send_Data>
	else {

		/*Error => Do Nothing*/

	}
	return Error_State ;
 8001342:	7dfb      	ldrb	r3, [r7, #23]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000058 	.word	0x20000058

08001350 <I2C_Enable_DMA>:
 * @brief			:	Enable DMA Stream
 * @param			:	I2C Number
 * @retval			:	Error State
 */
Error_State_t I2C_Enable_DMA(I2C_I2C_NUMBER_t	I2C_Num)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	Error_State_t Error_State = OK ;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]

	if ((I2C_Num >= I2C_NUMBER_1)&&(I2C_Num <= I2C_NUMBER_3))
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d80c      	bhi.n	800137e <I2C_Enable_DMA+0x2e>
	{
		/*Enable DMA Stream*/
		I2Cs[I2C_Num]->I2C_CR2 |= (1<<DMAEN_BIT);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <I2C_Enable_DMA+0x40>)
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <I2C_Enable_DMA+0x40>)
 8001372:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	e001      	b.n	8001382 <I2C_Enable_DMA+0x32>
	}
	else {
		Error_State = I2C_WRONG_I2C_NUMBER;
 800137e:	2304      	movs	r3, #4
 8001380:	73fb      	strb	r3, [r7, #15]
	}
	return Error_State	;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20000058 	.word	0x20000058

08001394 <I2C_Set_SCL_Frequency>:
 * @brief			:	Set SCL Frequency of the wanted I2C
 * @param			:	I2C Configurations
 * @retval			:	Error State
 */
static void I2C_Set_SCL_Frequency(const I2C_Configs_t * I2C_Configs)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint16_t CCR_Value =0;
 800139c:	2300      	movs	r3, #0
 800139e:	81fb      	strh	r3, [r7, #14]

	/*Calculate CCR Register Value*/
	CCR_Value = ((I2C_Configs->I2C_Pclk_MHZ) * (1000));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	0152      	lsls	r2, r2, #5
 80013aa:	1ad2      	subs	r2, r2, r3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	81fb      	strh	r3, [r7, #14]
	CCR_Value /= (I2C_Configs->SCL_Frequency_KHZ);
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	79d2      	ldrb	r2, [r2, #7]
 80013ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80013be:	81fb      	strh	r3, [r7, #14]
	CCR_Value /= 2;
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	81fb      	strh	r3, [r7, #14]

	I2Cs[I2C_Configs->I2C_Num]->I2C_CCR |= CCR_Value ;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <I2C_Set_SCL_Frequency+0x60>)
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	69d9      	ldr	r1, [r3, #28]
 80013d4:	89fa      	ldrh	r2, [r7, #14]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <I2C_Set_SCL_Frequency+0x60>)
 80013de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	61da      	str	r2, [r3, #28]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000058 	.word	0x20000058

080013f8 <I2C_CheckConfigs>:
 * @brief			:	Check I2c Configurations
 * @param			:	I2C Configurations
 * @retval			:	Error State
 */
static Error_State_t I2C_CheckConfigs(const I2C_Configs_t * I2C_Configs)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	Error_State_t Error_State=OK;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]

	if (NULL != I2C_Configs)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d060      	beq.n	80014cc <I2C_CheckConfigs+0xd4>
	{

		if ( (I2C_Configs->ADD_Mode == ADDRESSING_MODE_10BITS) || (I2C_Configs->ADD_Mode == ADDRESSING_MODE_7BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d003      	beq.n	800141a <I2C_CheckConfigs+0x22>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d155      	bne.n	80014c6 <I2C_CheckConfigs+0xce>
		{
			if ( (I2C_Configs->Chip_Address > 0) && (I2C_Configs->Chip_Address < 128))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	795b      	ldrb	r3, [r3, #5]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d04d      	beq.n	80014be <I2C_CheckConfigs+0xc6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	795b      	ldrb	r3, [r3, #5]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	db48      	blt.n	80014be <I2C_CheckConfigs+0xc6>
			{
				if ((I2C_Configs->I2C_Mode == MASTER_MODE_STANDARD) || (I2C_Configs->I2C_Mode == MASTER_MODE_FAST))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	799b      	ldrb	r3, [r3, #6]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <I2C_CheckConfigs+0x44>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	799b      	ldrb	r3, [r3, #6]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d13c      	bne.n	80014b6 <I2C_CheckConfigs+0xbe>
				{
					if ((I2C_Configs->I2C_Num >= I2C_NUMBER_1) && (I2C_Configs->I2C_Num <= I2C_NUMBER_3))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d834      	bhi.n	80014ae <I2C_CheckConfigs+0xb6>
					{
						if ((I2C_Configs->I2C_Pclk_MHZ < 45) && (I2C_Configs->I2C_Pclk_MHZ > 2 ))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	78db      	ldrb	r3, [r3, #3]
 8001448:	2b2c      	cmp	r3, #44	; 0x2c
 800144a:	d82d      	bhi.n	80014a8 <I2C_CheckConfigs+0xb0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	78db      	ldrb	r3, [r3, #3]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d929      	bls.n	80014a8 <I2C_CheckConfigs+0xb0>
						{
							if ((I2C_Configs->PEC_State == PACKET_ERR_CHECK_ENABLED) ||(I2C_Configs->PEC_State == PACKET_ERR_CHECK_DISABLED))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	789b      	ldrb	r3, [r3, #2]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <I2C_CheckConfigs+0x6c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	789b      	ldrb	r3, [r3, #2]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d11d      	bne.n	80014a0 <I2C_CheckConfigs+0xa8>
							{
								if (((I2C_Configs->SCL_Frequency_KHZ <=100) && (I2C_Configs->I2C_Mode == MASTER_MODE_STANDARD)) ||((I2C_Configs->SCL_Frequency_KHZ <=400) && (I2C_Configs->I2C_Mode == MASTER_MODE_FAST)))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	79db      	ldrb	r3, [r3, #7]
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d803      	bhi.n	8001474 <I2C_CheckConfigs+0x7c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	799b      	ldrb	r3, [r3, #6]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <I2C_CheckConfigs+0x84>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10d      	bne.n	8001498 <I2C_CheckConfigs+0xa0>
								{
									if ((I2C_Configs->Stretch_state == CLK_STRETCH_ENABLED) ||(I2C_Configs->Stretch_state == CLK_STRETCH_DISABLED))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	785b      	ldrb	r3, [r3, #1]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <I2C_CheckConfigs+0x94>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d102      	bne.n	8001492 <I2C_CheckConfigs+0x9a>
									{
										Error_State	=	OK;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
									if ((I2C_Configs->Stretch_state == CLK_STRETCH_ENABLED) ||(I2C_Configs->Stretch_state == CLK_STRETCH_DISABLED))
 8001490:	e005      	b.n	800149e <I2C_CheckConfigs+0xa6>
									}
									else {
										Error_State	=	I2C_WRONG_CLK_STRETCH_STATE;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
									if ((I2C_Configs->Stretch_state == CLK_STRETCH_ENABLED) ||(I2C_Configs->Stretch_state == CLK_STRETCH_DISABLED))
 8001496:	e002      	b.n	800149e <I2C_CheckConfigs+0xa6>
									}
								}
								else {
									Error_State	=	I2C_WRONG_SCL_FREQUENCY;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
								if (((I2C_Configs->SCL_Frequency_KHZ <=100) && (I2C_Configs->I2C_Mode == MASTER_MODE_STANDARD)) ||((I2C_Configs->SCL_Frequency_KHZ <=400) && (I2C_Configs->I2C_Mode == MASTER_MODE_FAST)))
 800149c:	e003      	b.n	80014a6 <I2C_CheckConfigs+0xae>
 800149e:	e002      	b.n	80014a6 <I2C_CheckConfigs+0xae>
								}
							}
							else {
								Error_State	=	I2C_WRONG_PEC_STATE;
 80014a0:	2302      	movs	r3, #2
 80014a2:	73fb      	strb	r3, [r7, #15]
							if ((I2C_Configs->PEC_State == PACKET_ERR_CHECK_ENABLED) ||(I2C_Configs->PEC_State == PACKET_ERR_CHECK_DISABLED))
 80014a4:	e006      	b.n	80014b4 <I2C_CheckConfigs+0xbc>
 80014a6:	e005      	b.n	80014b4 <I2C_CheckConfigs+0xbc>
							}
						}
						else {
							Error_State	=	I2C_WRONG_PCLK;
 80014a8:	2303      	movs	r3, #3
 80014aa:	73fb      	strb	r3, [r7, #15]
					if ((I2C_Configs->I2C_Num >= I2C_NUMBER_1) && (I2C_Configs->I2C_Num <= I2C_NUMBER_3))
 80014ac:	e006      	b.n	80014bc <I2C_CheckConfigs+0xc4>
						}
					}
					else {
						Error_State	=	I2C_WRONG_I2C_NUMBER;
 80014ae:	2304      	movs	r3, #4
 80014b0:	73fb      	strb	r3, [r7, #15]
					if ((I2C_Configs->I2C_Num >= I2C_NUMBER_1) && (I2C_Configs->I2C_Num <= I2C_NUMBER_3))
 80014b2:	e003      	b.n	80014bc <I2C_CheckConfigs+0xc4>
 80014b4:	e002      	b.n	80014bc <I2C_CheckConfigs+0xc4>
					}
				}
				else {
					Error_State	=	I2C_WRONG_I2C_MASTER_MODE;
 80014b6:	2305      	movs	r3, #5
 80014b8:	73fb      	strb	r3, [r7, #15]
				if ((I2C_Configs->I2C_Mode == MASTER_MODE_STANDARD) || (I2C_Configs->I2C_Mode == MASTER_MODE_FAST))
 80014ba:	e003      	b.n	80014c4 <I2C_CheckConfigs+0xcc>
 80014bc:	e002      	b.n	80014c4 <I2C_CheckConfigs+0xcc>
				}
			}
			else {
				Error_State	=	I2C_WRONG_ADDRESS_VALUE;
 80014be:	2306      	movs	r3, #6
 80014c0:	73fb      	strb	r3, [r7, #15]
			if ( (I2C_Configs->Chip_Address > 0) && (I2C_Configs->Chip_Address < 128))
 80014c2:	e005      	b.n	80014d0 <I2C_CheckConfigs+0xd8>
 80014c4:	e004      	b.n	80014d0 <I2C_CheckConfigs+0xd8>
			}
		}
		else{
			Error_State = I2C_WRONG_ADDRESS_MODE_STATE;
 80014c6:	2307      	movs	r3, #7
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e001      	b.n	80014d0 <I2C_CheckConfigs+0xd8>
		}
	}
	else {
		Error_State	=	NULL_PTR_ERR;
 80014cc:	2303      	movs	r3, #3
 80014ce:	73fb      	strb	r3, [r7, #15]
	}
	return Error_State ;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <I2C_SendAddressPacketMTransmitter_DMA>:
@param            :    Pointer to I2c Config Structure
@param            :    Address to Send
@retval           :    VOID
 */
void I2C_SendAddressPacketMTransmitter_DMA( I2C_Configs_t * Config , uint8_t Address , DMA1_CONFIGRATION_t *dma_tx_config )
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	72fb      	strb	r3, [r7, #11]
	/*Wait till Bus is FREE (Not busy)*/
	while((GET_BIT(I2Cs[Config->I2C_Num]->I2C_SR2,FLAGS_SR2_BUSY)));
 80014ee:	bf00      	nop
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <I2C_SendAddressPacketMTransmitter_DMA+0x78>)
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f4      	bne.n	80014f0 <I2C_SendAddressPacketMTransmitter_DMA+0x10>

	/*Enable I2C*/
	I2Cs[Config->I2C_Num]->I2C_CR1 |= (1<<0);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <I2C_SendAddressPacketMTransmitter_DMA+0x78>)
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <I2C_SendAddressPacketMTransmitter_DMA+0x78>)
 800151c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

	/*Send Start Condition*/
	I2C_Send_Start_Condition(Config->I2C_Num);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe16 	bl	800115c <I2C_Send_Start_Condition>

	/*Send Slave Address With Write Signal (LSB = 0)*/
	//I2Cs[Config->I2C_Num]->I2C_DR = (Address);
	uint8_t slaveAdd_var = Address;
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	75fb      	strb	r3, [r7, #23]
	DMA1_send_Data(dma_tx_config, &slaveAdd_var, &(I2Cs[Config->I2C_Num]->I2C_DR),1);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <I2C_SendAddressPacketMTransmitter_DMA+0x78>)
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	f103 0210 	add.w	r2, r3, #16
 8001544:	f107 0117 	add.w	r1, r7, #23
 8001548:	2301      	movs	r3, #1
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff f92a 	bl	80007a4 <DMA1_send_Data>
	}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000058 	.word	0x20000058

0800155c <I2C_SendDataPacket_DMA>:
@param            :    Pointer to I2c Config Structure
@param            :    Data to Send
@retval           :    VOID
 */
void I2C_SendDataPacket_DMA(I2C_Configs_t * Config , uint8_t Data, DMA1_CONFIGRATION_t *dma_tx_config  )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	460b      	mov	r3, r1
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	72fb      	strb	r3, [r7, #11]
	/*wait till TxD Register empty*/
	//while (!(GET_BIT(I2Cs[Config->I2C_Num]->I2C_SR1,FLAGS_SR1_TXE)));

	/*Write data in DR*/
	//I2Cs[Config->I2C_Num]->I2C_DR = Data;
	uint8_t DataToSend =Data;
 800156a:	7afb      	ldrb	r3, [r7, #11]
 800156c:	75fb      	strb	r3, [r7, #23]
	DMA1_send_Data(dma_tx_config, &DataToSend, &(I2Cs[Config->I2C_Num]->I2C_DR),1);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <I2C_SendDataPacket_DMA+0x38>)
 8001576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157a:	f103 0210 	add.w	r2, r3, #16
 800157e:	f107 0117 	add.w	r1, r7, #23
 8001582:	2301      	movs	r3, #1
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff f90d 	bl	80007a4 <DMA1_send_Data>


	/*wait till Byte transfer is finished*/
//	while (!(GET_BIT(I2Cs[Config->I2C_Num]->I2C_SR2,FLAGS_SR1_BTF)));
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000058 	.word	0x20000058

08001598 <I2C_SendAddressPacketMReceiver_DMA>:
@param            :    Pointer to I2c Config Structure
@param            :    Address to Send
@retval           :    VOID
 */
void I2C_SendAddressPacketMReceiver_DMA( I2C_Configs_t * Config , uint8_t Address ,DMA1_CONFIGRATION_t *dma_tx_config )
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	460b      	mov	r3, r1
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	72fb      	strb	r3, [r7, #11]
	/*Send Start Condition*/
	I2C_Send_Start_Condition(Config->I2C_Num);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fdd6 	bl	800115c <I2C_Send_Start_Condition>

	/*Send Slave Address With Read Signal (LSB = 1)*/
	//I2Cs[Config->I2C_Num]->I2C_DR = ( Address );
	uint8_t slaveAdd_var = Address;
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	75fb      	strb	r3, [r7, #23]
	DMA1_send_Data(dma_tx_config, &slaveAdd_var, &(I2Cs[Config->I2C_Num]->I2C_DR),1);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <I2C_SendAddressPacketMReceiver_DMA+0x50>)
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	f103 0210 	add.w	r2, r3, #16
 80015c4:	f107 0117 	add.w	r1, r7, #23
 80015c8:	2301      	movs	r3, #1
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff f8ea 	bl	80007a4 <DMA1_send_Data>

	/*Enable ACK*/
	SET_BIT(I2Cs[I2C_NUMBER_1]->I2C_CR1,10);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <I2C_SendAddressPacketMReceiver_DMA+0x50>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <I2C_SendAddressPacketMReceiver_DMA+0x50>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015de:	601a      	str	r2, [r3, #0]



}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000058 	.word	0x20000058

080015ec <RCC_AHB1EnableCLK>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->AHB1ENR,peripheral);
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <RCC_AHB1EnableCLK+0x2c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001602:	4611      	mov	r1, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <RCC_AHB1EnableCLK+0x2c>)
 8001606:	430b      	orrs	r3, r1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <RCC_APB1EnableCLK>:
{
	CLR_BIT(RCC->AHB2ENR,peripheral);
}

void RCC_APB1EnableCLK(PeripheralAPB1_t peripheral)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB1ENR,peripheral);
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <RCC_APB1EnableCLK+0x2c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	4611      	mov	r1, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <RCC_APB1EnableCLK+0x2c>)
 8001636:	430b      	orrs	r3, r1
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <SPI1_IRQHandler>:
/*******************************************************************************************************
 * ISR functions 
 *******************************************************************************************************
*/
void SPI1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    if (((SPI_NUM[SPI_1]->SPI_SR)>>SR_RXNE)&SPI_ONE_BIT_MASKING)
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <SPI1_IRQHandler+0x98>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01c      	beq.n	8001698 <SPI1_IRQHandler+0x4c>
    {
        if (SPI_u8GlobleRxIntCounter[SPI_1]<SPI_u8GlobleRxDataSize[SPI_1])
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <SPI1_IRQHandler+0x9c>)
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <SPI1_IRQHandler+0xa0>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d20f      	bcs.n	800168a <SPI1_IRQHandler+0x3e>
        {
            SPI_pvRxDestination[SPI_1][SPI_u8GlobleRxIntCounter[SPI_1]] = SPI_NUM[SPI_1]->SPI_DR;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <SPI1_IRQHandler+0x98>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68d9      	ldr	r1, [r3, #12]
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <SPI1_IRQHandler+0xa4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <SPI1_IRQHandler+0x9c>)
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	4413      	add	r3, r2
 800167a:	b2ca      	uxtb	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
            SPI_u8GlobleRxIntCounter[SPI_1]++;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <SPI1_IRQHandler+0x9c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <SPI1_IRQHandler+0x9c>)
 8001688:	701a      	strb	r2, [r3, #0]
        }        
        if (NULL!=SPI_pvRxNotEmptyCallBackLine[SPI_1])
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <SPI1_IRQHandler+0xa8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <SPI1_IRQHandler+0x4c>
		{
			SPI_pvRxNotEmptyCallBackLine[SPI_1]();
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <SPI1_IRQHandler+0xa8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4798      	blx	r3
		}
    }
    if (((SPI_NUM[SPI_1]->SPI_SR)>>SR_TXE)&SPI_ONE_BIT_MASKING)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <SPI1_IRQHandler+0x98>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01b      	beq.n	80016de <SPI1_IRQHandler+0x92>
    {
        if (SPI_u8GlobleTxIntCounter[SPI_1]<SPI_u8GlobleTxDataSize[SPI_1])
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <SPI1_IRQHandler+0xac>)
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <SPI1_IRQHandler+0xb0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d20e      	bcs.n	80016d0 <SPI1_IRQHandler+0x84>
        {
            SPI_NUM[SPI_1]->SPI_DR = SPI_pvTxData[SPI_1][SPI_u8GlobleTxIntCounter[SPI_1]];
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <SPI1_IRQHandler+0xb4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <SPI1_IRQHandler+0xac>)
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <SPI1_IRQHandler+0x98>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	60da      	str	r2, [r3, #12]
            SPI_u8GlobleTxIntCounter[SPI_1]++;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <SPI1_IRQHandler+0xac>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <SPI1_IRQHandler+0xac>)
 80016ce:	701a      	strb	r2, [r3, #0]
        }
        if (NULL!=SPI_pvTxEmptyCallBackLine[SPI_1])
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <SPI1_IRQHandler+0xb8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <SPI1_IRQHandler+0x92>
		{
			SPI_pvTxEmptyCallBackLine[SPI_1]();
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <SPI1_IRQHandler+0xb8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4798      	blx	r3
		}
    }
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000064 	.word	0x20000064
 80016e8:	20000170 	.word	0x20000170
 80016ec:	20000178 	.word	0x20000178
 80016f0:	2000015c 	.word	0x2000015c
 80016f4:	2000013c 	.word	0x2000013c
 80016f8:	2000016c 	.word	0x2000016c
 80016fc:	20000174 	.word	0x20000174
 8001700:	2000014c 	.word	0x2000014c
 8001704:	2000012c 	.word	0x2000012c

08001708 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    if (((SPI_NUM[SPI_2]->SPI_SR)>>SR_RXNE)&SPI_ONE_BIT_MASKING)
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <SPI2_IRQHandler+0x98>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01c      	beq.n	8001754 <SPI2_IRQHandler+0x4c>
    {
        if (SPI_u8GlobleRxIntCounter[SPI_2]<SPI_u8GlobleRxDataSize[SPI_2])
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <SPI2_IRQHandler+0x9c>)
 800171c:	785a      	ldrb	r2, [r3, #1]
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <SPI2_IRQHandler+0xa0>)
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	429a      	cmp	r2, r3
 8001724:	d20f      	bcs.n	8001746 <SPI2_IRQHandler+0x3e>
        {
            SPI_pvRxDestination[SPI_2][SPI_u8GlobleRxIntCounter[SPI_2]] = SPI_NUM[SPI_2]->SPI_DR;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <SPI2_IRQHandler+0x98>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	68d9      	ldr	r1, [r3, #12]
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <SPI2_IRQHandler+0xa4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <SPI2_IRQHandler+0x9c>)
 8001732:	7852      	ldrb	r2, [r2, #1]
 8001734:	4413      	add	r3, r2
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
            SPI_u8GlobleRxIntCounter[SPI_2]++;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <SPI2_IRQHandler+0x9c>)
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	3301      	adds	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <SPI2_IRQHandler+0x9c>)
 8001744:	705a      	strb	r2, [r3, #1]
        }
        if (NULL!=SPI_pvRxNotEmptyCallBackLine[SPI_2])
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <SPI2_IRQHandler+0xa8>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <SPI2_IRQHandler+0x4c>
		{
			SPI_pvRxNotEmptyCallBackLine[SPI_2]();
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <SPI2_IRQHandler+0xa8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4798      	blx	r3
		}
    }
    if (((SPI_NUM[SPI_2]->SPI_SR)>>SR_TXE)&SPI_ONE_BIT_MASKING)
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <SPI2_IRQHandler+0x98>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01b      	beq.n	800179a <SPI2_IRQHandler+0x92>
    {
        if (SPI_u8GlobleTxIntCounter[SPI_2]<SPI_u8GlobleTxDataSize[SPI_2])
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <SPI2_IRQHandler+0xac>)
 8001764:	785a      	ldrb	r2, [r3, #1]
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <SPI2_IRQHandler+0xb0>)
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	429a      	cmp	r2, r3
 800176c:	d20e      	bcs.n	800178c <SPI2_IRQHandler+0x84>
        {
            SPI_NUM[SPI_2]->SPI_DR = SPI_pvTxData[SPI_2][SPI_u8GlobleTxIntCounter[SPI_2]];
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <SPI2_IRQHandler+0xb4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <SPI2_IRQHandler+0xac>)
 8001774:	7852      	ldrb	r2, [r2, #1]
 8001776:	4413      	add	r3, r2
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <SPI2_IRQHandler+0x98>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60da      	str	r2, [r3, #12]
            SPI_u8GlobleTxIntCounter[SPI_2]++;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <SPI2_IRQHandler+0xac>)
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	3301      	adds	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <SPI2_IRQHandler+0xac>)
 800178a:	705a      	strb	r2, [r3, #1]
        }
        if (NULL!=SPI_pvTxEmptyCallBackLine[SPI_2])
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <SPI2_IRQHandler+0xb8>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <SPI2_IRQHandler+0x92>
		{
			SPI_pvTxEmptyCallBackLine[SPI_2]();
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <SPI2_IRQHandler+0xb8>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4798      	blx	r3
		}
    }
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000064 	.word	0x20000064
 80017a4:	20000170 	.word	0x20000170
 80017a8:	20000178 	.word	0x20000178
 80017ac:	2000015c 	.word	0x2000015c
 80017b0:	2000013c 	.word	0x2000013c
 80017b4:	2000016c 	.word	0x2000016c
 80017b8:	20000174 	.word	0x20000174
 80017bc:	2000014c 	.word	0x2000014c
 80017c0:	2000012c 	.word	0x2000012c

080017c4 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    if (((SPI_NUM[SPI_3]->SPI_SR)>>SR_RXNE)&SPI_ONE_BIT_MASKING)
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <SPI3_IRQHandler+0x98>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01c      	beq.n	8001810 <SPI3_IRQHandler+0x4c>
    {
        if (SPI_u8GlobleRxIntCounter[SPI_3]<SPI_u8GlobleRxDataSize[SPI_3])
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <SPI3_IRQHandler+0x9c>)
 80017d8:	789a      	ldrb	r2, [r3, #2]
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <SPI3_IRQHandler+0xa0>)
 80017dc:	789b      	ldrb	r3, [r3, #2]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d20f      	bcs.n	8001802 <SPI3_IRQHandler+0x3e>
        {
            SPI_pvRxDestination[SPI_3][SPI_u8GlobleRxIntCounter[SPI_3]] = SPI_NUM[SPI_3]->SPI_DR;
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <SPI3_IRQHandler+0x98>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	68d9      	ldr	r1, [r3, #12]
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <SPI3_IRQHandler+0xa4>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <SPI3_IRQHandler+0x9c>)
 80017ee:	7892      	ldrb	r2, [r2, #2]
 80017f0:	4413      	add	r3, r2
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
            SPI_u8GlobleRxIntCounter[SPI_3]++;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <SPI3_IRQHandler+0x9c>)
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	3301      	adds	r3, #1
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <SPI3_IRQHandler+0x9c>)
 8001800:	709a      	strb	r2, [r3, #2]
        }
        if (NULL!=SPI_pvRxNotEmptyCallBackLine[SPI_3])
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <SPI3_IRQHandler+0xa8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <SPI3_IRQHandler+0x4c>
		{
			SPI_pvRxNotEmptyCallBackLine[SPI_3]();
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <SPI3_IRQHandler+0xa8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4798      	blx	r3
		}
    }
    if (((SPI_NUM[SPI_3]->SPI_SR)>>SR_TXE)&SPI_ONE_BIT_MASKING)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <SPI3_IRQHandler+0x98>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01b      	beq.n	8001856 <SPI3_IRQHandler+0x92>
    {
        if (SPI_u8GlobleTxIntCounter[SPI_3]<SPI_u8GlobleTxDataSize[SPI_3])
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <SPI3_IRQHandler+0xac>)
 8001820:	789a      	ldrb	r2, [r3, #2]
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <SPI3_IRQHandler+0xb0>)
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	429a      	cmp	r2, r3
 8001828:	d20e      	bcs.n	8001848 <SPI3_IRQHandler+0x84>
        {
            SPI_NUM[SPI_3]->SPI_DR = SPI_pvTxData[SPI_3][SPI_u8GlobleTxIntCounter[SPI_3]];
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <SPI3_IRQHandler+0xb4>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <SPI3_IRQHandler+0xac>)
 8001830:	7892      	ldrb	r2, [r2, #2]
 8001832:	4413      	add	r3, r2
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <SPI3_IRQHandler+0x98>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
            SPI_u8GlobleTxIntCounter[SPI_3]++;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <SPI3_IRQHandler+0xac>)
 800183e:	789b      	ldrb	r3, [r3, #2]
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <SPI3_IRQHandler+0xac>)
 8001846:	709a      	strb	r2, [r3, #2]
        }
        if (NULL!=SPI_pvTxEmptyCallBackLine[SPI_3])
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <SPI3_IRQHandler+0xb8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <SPI3_IRQHandler+0x92>
		{
			SPI_pvTxEmptyCallBackLine[SPI_3]();
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <SPI3_IRQHandler+0xb8>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4798      	blx	r3
		}
    }
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000064 	.word	0x20000064
 8001860:	20000170 	.word	0x20000170
 8001864:	20000178 	.word	0x20000178
 8001868:	2000015c 	.word	0x2000015c
 800186c:	2000013c 	.word	0x2000013c
 8001870:	2000016c 	.word	0x2000016c
 8001874:	20000174 	.word	0x20000174
 8001878:	2000014c 	.word	0x2000014c
 800187c:	2000012c 	.word	0x2000012c

08001880 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    if (((SPI_NUM[SPI_4]->SPI_SR)>>SR_RXNE)&SPI_ONE_BIT_MASKING)
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <SPI4_IRQHandler+0x98>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01c      	beq.n	80018cc <SPI4_IRQHandler+0x4c>
    {
        if (SPI_u8GlobleRxIntCounter[SPI_4]<SPI_u8GlobleRxDataSize[SPI_4])
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <SPI4_IRQHandler+0x9c>)
 8001894:	78da      	ldrb	r2, [r3, #3]
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <SPI4_IRQHandler+0xa0>)
 8001898:	78db      	ldrb	r3, [r3, #3]
 800189a:	429a      	cmp	r2, r3
 800189c:	d20f      	bcs.n	80018be <SPI4_IRQHandler+0x3e>
        {
            SPI_pvRxDestination[SPI_4][SPI_u8GlobleRxIntCounter[SPI_4]] = SPI_NUM[SPI_4]->SPI_DR;
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <SPI4_IRQHandler+0x98>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	68d9      	ldr	r1, [r3, #12]
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <SPI4_IRQHandler+0xa4>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4a1c      	ldr	r2, [pc, #112]	; (800191c <SPI4_IRQHandler+0x9c>)
 80018aa:	78d2      	ldrb	r2, [r2, #3]
 80018ac:	4413      	add	r3, r2
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
            SPI_u8GlobleRxIntCounter[SPI_4]++;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <SPI4_IRQHandler+0x9c>)
 80018b4:	78db      	ldrb	r3, [r3, #3]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <SPI4_IRQHandler+0x9c>)
 80018bc:	70da      	strb	r2, [r3, #3]
        }
        if (NULL!=SPI_pvRxNotEmptyCallBackLine[SPI_4])
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <SPI4_IRQHandler+0xa8>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <SPI4_IRQHandler+0x4c>
		{
			SPI_pvRxNotEmptyCallBackLine[SPI_4]();
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <SPI4_IRQHandler+0xa8>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4798      	blx	r3
		}
    }
    if (((SPI_NUM[SPI_4]->SPI_SR)>>SR_TXE)&SPI_ONE_BIT_MASKING)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <SPI4_IRQHandler+0x98>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01b      	beq.n	8001912 <SPI4_IRQHandler+0x92>
    {
        if (SPI_u8GlobleTxIntCounter[SPI_4]<SPI_u8GlobleTxDataSize[SPI_4])
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <SPI4_IRQHandler+0xac>)
 80018dc:	78da      	ldrb	r2, [r3, #3]
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <SPI4_IRQHandler+0xb0>)
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20e      	bcs.n	8001904 <SPI4_IRQHandler+0x84>
        {
            SPI_NUM[SPI_4]->SPI_DR = SPI_pvTxData[SPI_4][SPI_u8GlobleTxIntCounter[SPI_4]];
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <SPI4_IRQHandler+0xb4>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <SPI4_IRQHandler+0xac>)
 80018ec:	78d2      	ldrb	r2, [r2, #3]
 80018ee:	4413      	add	r3, r2
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <SPI4_IRQHandler+0x98>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	60da      	str	r2, [r3, #12]
            SPI_u8GlobleTxIntCounter[SPI_4]++;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <SPI4_IRQHandler+0xac>)
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <SPI4_IRQHandler+0xac>)
 8001902:	70da      	strb	r2, [r3, #3]
        }
        if (NULL!=SPI_pvTxEmptyCallBackLine[SPI_4])
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <SPI4_IRQHandler+0xb8>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <SPI4_IRQHandler+0x92>
		{
			SPI_pvTxEmptyCallBackLine[SPI_4]();
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <SPI4_IRQHandler+0xb8>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4798      	blx	r3
		}
    }
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000064 	.word	0x20000064
 800191c:	20000170 	.word	0x20000170
 8001920:	20000178 	.word	0x20000178
 8001924:	2000015c 	.word	0x2000015c
 8001928:	2000013c 	.word	0x2000013c
 800192c:	2000016c 	.word	0x2000016c
 8001930:	20000174 	.word	0x20000174
 8001934:	2000014c 	.word	0x2000014c
 8001938:	2000012c 	.word	0x2000012c

0800193c <MSTK_voidStopTimer>:
 *
 *
 ******************************************************************************
 */
void   MSTK_voidStopTimer         ( void )
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	    STK->CTRL &=~(STK_STOP_TIMER_MASK << STK_CTRL_ENABLE );
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MSTK_voidStopTimer+0x28>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <MSTK_voidStopTimer+0x28>)
 8001946:	f023 0303 	bic.w	r3, r3, #3
 800194a:	6013      	str	r3, [r2, #0]
		STK->LOAD = STK_RESET_COUNTER;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <MSTK_voidStopTimer+0x28>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
		STK->VAL  = STK_RESET_COUNTER;
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <MSTK_voidStopTimer+0x28>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <SysTick_Handler>:
 *
 *
 ******************************************************************************
 */
void SysTick_Handler (void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    if ( SysTick_CallBack != NULL)
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <SysTick_Handler+0x34>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d010      	beq.n	8001996 <SysTick_Handler+0x2e>
    {
         if ( SINGLE == STK_u8IntervalType )
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <SysTick_Handler+0x38>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <SysTick_Handler+0x20>
         {
        	 SysTick_CallBack();
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <SysTick_Handler+0x34>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4798      	blx	r3
        	 MSTK_voidStopTimer();
 8001982:	f7ff ffdb 	bl	800193c <MSTK_voidStopTimer>
         else if ( PERIODIC == STK_u8IntervalType )
         {
        	 SysTick_CallBack();
         }
    }
}
 8001986:	e006      	b.n	8001996 <SysTick_Handler+0x2e>
         else if ( PERIODIC == STK_u8IntervalType )
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Handler+0x38>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d102      	bne.n	8001996 <SysTick_Handler+0x2e>
        	 SysTick_CallBack();
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <SysTick_Handler+0x34>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4798      	blx	r3
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000017c 	.word	0x2000017c
 80019a0:	20000074 	.word	0x20000074

080019a4 <MUSART_voidClearFlags>:
 *
 *
 ******************************************************************************
 */
void   MUSART_voidClearFlags( USARTindex_t Copy_USARTindex )
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	USART_Index[Copy_USARTindex] -> SR = USART_SR_MASK ;
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <MUSART_voidClearFlags+0x24>)
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000078 	.word	0x20000078

080019cc <USART1_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void USART1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_1] != NULL )
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <USART1_IRQHandler+0x1c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <USART1_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_1);
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff ffe3 	bl	80019a4 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_1]();
 80019de:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <USART1_IRQHandler+0x1c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4798      	blx	r3
	}

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000180 	.word	0x20000180

080019ec <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_2] != NULL )
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <USART2_IRQHandler+0x1c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <USART2_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_2);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff ffd3 	bl	80019a4 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_2]();
 80019fe:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <USART2_IRQHandler+0x1c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4798      	blx	r3
	}

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000180 	.word	0x20000180

08001a0c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_3] != NULL )
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <USART3_IRQHandler+0x1c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <USART3_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_3);
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7ff ffc3 	bl	80019a4 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_3]();
 8001a1e:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <USART3_IRQHandler+0x1c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4798      	blx	r3
	}

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000180 	.word	0x20000180

08001a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a36:	490d      	ldr	r1, [pc, #52]	; (8001a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <LoopForever+0xe>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	; (8001a78 <LoopForever+0x16>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a5a:	f000 f811 	bl	8001a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5e:	f7fe fbd4 	bl	800020a <main>

08001a62 <LoopForever>:

LoopForever:
  b LoopForever
 8001a62:	e7fe      	b.n	8001a62 <LoopForever>
  ldr   r0, =_estack
 8001a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a70:	08001ae8 	.word	0x08001ae8
  ldr r2, =_sbss
 8001a74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a78:	20000198 	.word	0x20000198

08001a7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC_IRQHandler>
	...

08001a80 <__libc_init_array>:
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	4d0d      	ldr	r5, [pc, #52]	; (8001ab8 <__libc_init_array+0x38>)
 8001a84:	4c0d      	ldr	r4, [pc, #52]	; (8001abc <__libc_init_array+0x3c>)
 8001a86:	1b64      	subs	r4, r4, r5
 8001a88:	10a4      	asrs	r4, r4, #2
 8001a8a:	2600      	movs	r6, #0
 8001a8c:	42a6      	cmp	r6, r4
 8001a8e:	d109      	bne.n	8001aa4 <__libc_init_array+0x24>
 8001a90:	4d0b      	ldr	r5, [pc, #44]	; (8001ac0 <__libc_init_array+0x40>)
 8001a92:	4c0c      	ldr	r4, [pc, #48]	; (8001ac4 <__libc_init_array+0x44>)
 8001a94:	f000 f818 	bl	8001ac8 <_init>
 8001a98:	1b64      	subs	r4, r4, r5
 8001a9a:	10a4      	asrs	r4, r4, #2
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	42a6      	cmp	r6, r4
 8001aa0:	d105      	bne.n	8001aae <__libc_init_array+0x2e>
 8001aa2:	bd70      	pop	{r4, r5, r6, pc}
 8001aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa8:	4798      	blx	r3
 8001aaa:	3601      	adds	r6, #1
 8001aac:	e7ee      	b.n	8001a8c <__libc_init_array+0xc>
 8001aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab2:	4798      	blx	r3
 8001ab4:	3601      	adds	r6, #1
 8001ab6:	e7f2      	b.n	8001a9e <__libc_init_array+0x1e>
 8001ab8:	08001ae0 	.word	0x08001ae0
 8001abc:	08001ae0 	.word	0x08001ae0
 8001ac0:	08001ae0 	.word	0x08001ae0
 8001ac4:	08001ae4 	.word	0x08001ae4

08001ac8 <_init>:
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aca:	bf00      	nop
 8001acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ace:	bc08      	pop	{r3}
 8001ad0:	469e      	mov	lr, r3
 8001ad2:	4770      	bx	lr

08001ad4 <_fini>:
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	bf00      	nop
 8001ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ada:	bc08      	pop	{r3}
 8001adc:	469e      	mov	lr, r3
 8001ade:	4770      	bx	lr
